var searchIndex = JSON.parse('{\
"bitflags":{"doc":"Generate types for C-style flags with ergonomic APIs.","t":"SCIQSSDIOKAKAAMAAAMADDLLLLMMLLMMLLLLLLLLLMMLLLLLLDNNNDEIILLLLLLLLLLLLLLFLLLLLKLLLFLLLLLLLLLKMMSIQSSDIQIQIALLKLLLLLLLLLLLLLKLLLLOLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMCC","n":["ALL","BitFlags","Bits","Bits","EMPTY","FLAGS","Flag","Flags","bitflags","bits","external","from_bits_retain","internal","iter","name","parser","public","traits","value","__private","Iter","IterNames","borrow","borrow","borrow_mut","borrow_mut","done","flags","from","from","idx","inner","into","into","into_iter","into_iter","new","new","next","next","remaining","remaining","source","try_from","try_from","try_into","try_into","type_id","type_id","AsDisplay","EmptyFlag","InvalidHexFlag","InvalidNamedFlag","ParseError","ParseErrorKind","ParseHex","WriteHex","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","empty_flag","fmt","fmt","fmt","fmt","from","from","from","from_str","into","into","into","invalid_hex_flag","invalid_named_flag","parse_hex","provide","to_string","to_string","to_writer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_hex","got","got","ALL","Bits","Bits","EMPTY","FLAGS","Flag","Flags","Internal","Primitive","Primitive","PublicFlags","__private","all","all","bits","borrow","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","from","from_bits","from_bits","from_bits_retain","from_bits_truncate","from_bits_truncate","from_name","from_name","impl_bits","insert","insert","intersection","intersection","intersects","intersects","into","is_all","is_all","is_empty","is_empty","is_named","is_unnamed","iter","iter","iter_names","iter_names","name","name","new","remove","remove","set","set","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_into","type_id","union","union","value","value","ImplementedByBitFlagsMacro","PublicFlags"],"q":[[0,"bitflags"],[19,"bitflags::external"],[20,"bitflags::iter"],[49,"bitflags::parser"],[92,"bitflags::parser::ParseErrorKind"],[94,"bitflags::traits"],[163,"bitflags::traits::__private"]],"d":["A value with all bits set.","","A bits type that can be used as storage for a flags type.","The underlying bits type.","A value with all bits unset.","The set of defined flags.","A defined flags value that may be named or unnamed.","A set of defined flags using a bits type as storage.","Generate a flags type.","Get the underlying bits value.","Conditional trait implementations for external libraries.","Convert from a bits value exactly.","Generate the internal <code>bitflags</code>-facing flags type.","Yield the bits of a source flags value in a set of …","","Parsing flags from text.","Generate the user-facing flags type.","","","","An iterator over flags values.","An iterator over flags values.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Get a flags value of any remaining bits that haven’t …","","","","","","","","","","","","","An error encountered while parsing flags from text.","","Parse a value from a hex string.","Encode a value as a hex string.","","","","","","","A hex or named flag wasn’t found between separators.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse a flags value from text.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An invalid hex flag was encountered.","A named flag that doesn’t correspond to any on the flags …","Parse the value from hex.","","","","Write a flags value as text.","","","","","","","","","","Write the value as hex.","","","A value with all bits set.","A bits type that can be used as storage for a flags type.","The underlying bits type.","A value with all bits unset.","The set of defined flags.","A defined flags value that may be named or unnamed.","A set of defined flags using a bits type as storage.","The type of the internal field on the generated flags type.","","The type of the underlying storage.","A trait for referencing the <code>bitflags</code>-owned internal type …","","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get the underlying bits value.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether the flag is named.","Whether the flag is unnamed.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Get the name of this flag.","","Define a flag.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","Call <code>Flags::insert</code> when <code>value</code> is <code>true</code> or <code>Flags::remove</code> …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the flags value of this flag.","","",""],"i":[21,0,0,1,21,1,0,0,0,1,0,1,0,0,20,0,0,0,20,0,0,0,2,3,2,3,2,3,2,3,3,2,2,3,2,3,2,3,2,3,3,3,3,2,3,2,3,2,3,0,11,11,11,0,0,0,0,8,7,11,8,7,11,7,8,7,7,11,8,7,11,0,8,7,11,7,7,22,7,8,7,0,8,7,11,8,7,11,8,7,11,23,24,25,21,0,1,21,1,0,0,26,0,26,0,0,1,1,1,20,20,1,1,1,1,1,1,1,1,20,1,1,1,1,1,1,1,0,1,1,1,1,1,1,20,1,1,1,1,20,20,1,1,1,1,20,20,20,1,1,1,1,1,1,1,1,20,20,20,1,1,20,20,0,0],"f":[0,0,0,0,0,0,0,0,0,[[]],0,[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],0,0,[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[1,[[3,[1]]]],[[[2,[1]]],4],[[[3,[1]]],4],[3],0,0,[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[[8,[1]],9],10],[[7,9],10],[[7,9],10],[[11,9],10],[[]],[[]],[[]],[12,[[5,[1,7]]]],[[]],[[]],[[]],[13,7],[13,7],[12,[[5,[14,7]]]],[15],[[],16],[[],16],[[1,17],[[5,[18]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[17,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,14],19],[[14,14],19],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[]],[[]],[[]],[12,4],[12,4],0,[[14,14]],[[14,14]],[[]],[[]],[[14,14],19],[[14,14],19],[[]],[[],19],[[],19],[[],19],[[],19],[20,19],[20,19],[[],2],[[],2],[[],3],[[],3],[20,12],0,[12,20],[[14,14]],[[14,14]],[[14,14,19]],[[14,14,19]],[[]],[[]],[[14,14]],[[14,14]],[[],5],[[],5],[[],6],[[]],[[]],[20],0,0,0],"c":[],"p":[[8,"Flags"],[3,"Iter"],[3,"IterNames"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"ParseError"],[3,"AsDisplay"],[3,"Formatter"],[6,"Result"],[4,"ParseErrorKind"],[15,"str"],[8,"Display"],[8,"Sized"],[3,"Demand"],[3,"String"],[8,"Write"],[3,"Error"],[15,"bool"],[3,"Flag"],[8,"Bits"],[8,"ParseHex"],[8,"WriteHex"],[13,"InvalidNamedFlag"],[13,"InvalidHexFlag"],[8,"PublicFlags"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"clausy":{"doc":"","t":"AFAAAAADLLLLLMLLLLLLLLLLMRNNEDDGNNNRENGLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMIIAAKKLFLADLLMLLLLLLLLNDENRNLLLLNLLLNLLNLLLLLLNNNNNLFFLFLLLLLLLLNNNEDNRNLLLLLLLNNNLLNNLLLLLLNNNLFLFLNNLLLLLLLNAAAAAAAFFFFF","n":["core","main","parser","tests","util","clauses","formula","Clauses","assert_count","assert_valid","borrow","borrow_mut","clauses","clauses","count","count_featureide","fmt","from","from","into","to_string","try_from","try_into","type_id","vars","AUX_VAR_PREFIX","And","Aux","Expr","ExprInFormula","Formula","Id","Named","Not","Or","PRINT_ID","Var","Var","VarId","add_expr","add_var","add_var_aux","add_var_named","assert_shared","assert_valid","aux_root_id","aux_var_id","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dedup","def_and","def_or","eq","eq","equivalent","equivalent","expr","exprs","exprs_inv","fmt","fmt","fmt","fmt","fmt","fmt","format_expr","from","from","from","from","from","from","get_child_exprs","get_expr","get_root_expr","get_var_named","hash","hash","hash_expr","into","into","into","into","is_non_aux_and","make_shared","negate_exprs","new","parse","postorder_rev","preorder_rev","print_sub_exprs","reset_aux_root_expr","set_child_exprs","set_root_expr","splice_or","to_clauses","to_cnf_dist","to_cnf_tseitin","to_nnf","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","var","vars","vars_inv","FormulaParsee","FormulaParser","io","model","parse","parse_into","parse_new","parser","preprocess","sat","IoFormulaParser","borrow","borrow_mut","extension","from","into","new","parse_into","preprocess","try_from","try_into","type_id","EOI","ModelFormulaParser","Rule","WHITESPACE","_PEST_GRAMMAR_ModelFormulaParser","and","borrow","borrow","borrow_mut","borrow_mut","char","clone","clone_into","cmp","comment","eq","equivalent","expr","fmt","from","from","hash","into","into","line","name","not","or","paren_expr","parse","parse_children","parse_into","parse_into","parse_pair","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsupported","var","EOI","Rule","SatFormulaParser","WHITESPACE","_PEST_GRAMMAR_SatFormulaParser","and","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","comment","comment_text","comment_var","eq","equivalent","expr","file","fmt","from","from","hash","into","into","not","number","or","parse","parse_children","parse_into","parse_pair","partial_cmp","problem","space","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","var","cnf","formula","parser","cnf_dist","nnf","valid","exec","file_exists","read_file","d4","io","path"],"q":[[0,"clausy"],[5,"clausy::core"],[7,"clausy::core::clauses"],[25,"clausy::core::formula"],[126,"clausy::parser"],[136,"clausy::parser::io"],[148,"clausy::parser::model"],[192,"clausy::parser::sat"],[236,"clausy::tests"],[239,"clausy::tests::formula"],[242,"clausy::util"],[245,"clausy::util::exec"]],"d":["Core data structures and algorithms on feature-model …","Main entry point.","Parsers for feature-model formula files.","Unit tests.","Miscellaneous utilities.","Clause representation of a feature-model formula.","Data structures and algorithms for feature-model formulas.","A Formula in its clause representation.","","Panics if this clause representation is invalid.","","","Returns the sub-expressions of a formula as clauses.","The clauses of this clause representation.","Counts the number of satisfying assignments of this clause …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The variables of this clause representation.","Prefix for auxiliary variables.","A conjunction of an expression.","An auxiliary variable.","An expression in a formula.","An expression that is explicitly paired with the formula …","A feature-model formula.","Identifier type for expressions.","A named variable.","A negation of an expression.","A disjunction of an expression.","Whether to print identifiers of expressions.","A variable in a formula.","A propositional variable.","Identifier type for variables.","Adds a new expression to this formula, returning its new …","Adds a new variable to this formula, returning the …","Adds a new auxiliary variable to this formula, returning …","Adds a new named variable to this formula, returning the …","Panics if structural sharing is violated in this formula.","Panics if this formula is invalid.","Specifies the auxiliary root expression of this formula.","","","","","","","","","","","","","Defines an And expression with a new auxiliary variable.","Defines an Or expression with a new auxiliary variable.","","","","","Adds or looks up an expression of this formula, returning …","Stores all expressions in this formula.","Maps expressions to their identifiers.","","","","","","","Writes an expression of this formula to a formatter.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the identifiers of the children of an expression.","Looks ups the identifier for an expression of this formula.","Returns the root expression of this formula.","Looks ups the identifier for the Var expression of a named …","","","Computes the hash of an expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Manually enforces structural sharing in this formula.","Returns expressions that negate the given expressions.","Creates a new, empty formula.","","Visits all sub-expressions of this formula using a reverse …","Visits all sub-expressions of this formula using a reverse …","Prints all sub-expression of this formula.","Resets the auxiliary root expression, if necessary.","Sets the children of an expression in this formula.","Sets the root expression of this formula.","","","Transforms this formula into conjunctive normal form by …","","Transforms this formula into negation normal form by …","","","","","","","","","","","","","","","","","Adds or looks up a named variable of this formula, …","Stores all variables in this formula.","Maps variables to their identifiers.","An object that can parse a feature-model formula file into …","Parses a feature-model formula file into a Formula …","Parser for any file format accepted by FeatureIDE.","Parser for KConfigReader .model files.","","Parses a feature-model formula file into an existing …","Parses a feature-model formula file into a new Formula.","Returns the appropriate parser for a file extension.","Preprocesses a feature-model formula file, if necessary.","Parser for DIMACS .sat files.","Parses feature-model formula files in any file format …","","","The extension of the parsed file.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Parses feature-model formula files in the .model format.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Parses feature-model formula files in the .sat format.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Utilities for executing external programs.","Returns whether a file exists at a given path.","Reads the contents and extension of a file.","Counts the number of satisfying assignments of some CNF in …","Converts a given feature-model file from one format into …","Returns the path of a bundled external program."],"i":[0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,11,13,0,0,0,0,13,11,11,0,0,11,0,5,5,5,5,5,5,5,5,16,11,13,5,16,11,13,5,13,13,5,5,5,11,13,11,13,5,5,5,16,11,13,13,5,5,5,16,11,13,5,5,5,5,5,5,5,11,13,5,16,11,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,16,13,5,16,11,13,5,16,11,13,5,16,11,13,5,5,5,5,0,0,0,0,32,20,20,0,20,0,0,23,23,23,23,23,23,23,23,23,23,23,24,0,0,24,0,24,24,29,24,29,24,24,24,24,24,24,24,24,24,24,29,24,24,29,24,24,24,24,24,29,0,0,29,0,24,24,24,29,24,29,24,29,24,24,30,0,0,30,0,30,30,31,30,31,30,30,30,30,30,30,30,30,30,30,30,30,31,30,30,31,30,30,30,31,0,31,0,30,30,30,30,30,31,30,31,30,31,30,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,[[[2,[1]]]],0,0,0,0,0,0,[[3,4,1]],[3],[[]],[[]],[5,[[2,[[2,[6]]]]]],0,[3,1],[[4,1],1],[[3,7],8],[[]],[5,3],[[]],[[],1],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,11],12],[[5,13],12],[5,12],[[5,4],12],[5],[5,5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[[]],[[[2,[12]]],[[2,[12]]]],[[5,[14,[12]]]],[[5,[14,[12]]]],[[11,11],15],[[13,13],15],[[],15],[[],15],[[5,11],12],0,0,[[16,7],8],[[11,7],8],[[13,7],8],[[13,7],8],[[5,7],8],[[5,7],8],[[5,12,7],8],[[]],[[]],[[]],[[],5],[[]],[4,5],[11,[[14,[12]]]],[[5,11],[[17,[12]]]],[5,12],[[5,4],[[17,[12]]]],[[11,18]],[[13,18]],[11,19],[[]],[[]],[[]],[[]],[[5,12],15],[5],[[5,[2,[12]]],[[2,[12]]]],[[],5],[[5,1,[21,[20]]],12],[[5,22]],[[5,22]],[5],[5],[[5,12,[2,[12]]]],[[5,12]],[[5,12,[2,[12]]]],[5,3],[5,5],[5,5],[5,5],[[]],[[],1],[[],1],[[],1],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[5,4],12],0,0,0,0,0,0,[[1,[21,[20]]],12],[[1,5],12],[1,5],[[[17,[1]]],[[21,[20]]]],[1,1],0,0,[[]],[[]],0,[[]],[[]],[1,23],[[23,1,5],12],[[23,1],1],[[],9],[[],9],[[],10],0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[24,24],[[]],[[24,24],25],0,[[24,24],15],[[],15],0,[[24,7],8],[[]],[[]],[[24,18]],[[]],[[]],0,0,0,0,0,[[24,4],[[9,[[26,[24]],[27,[24]]]]]],[[[28,[24]],5],[[2,[12]]]],[[4,5],12],[[29,1,5],12],[[[28,[24]],5],12],[[24,24],[[17,[25]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[30,30],[[]],[[30,30],25],0,0,0,[[30,30],15],[[],15],0,0,[[30,7],8],[[]],[[]],[[30,18]],[[]],[[]],0,0,0,[[30,4],[[9,[[26,[30]],[27,[30]]]]]],[[[28,[30]],[14,[12]],5],[[2,[12]]]],[[31,1,5],12],[[[28,[30]],[14,[12]],5],12],[[30,30],[[17,[25]]]],0,0,[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,0,0,0,[4,15],[4],[4,1],[[4,4,4],1],[4,1]],"c":[],"p":[[3,"String"],[3,"Vec"],[3,"Clauses"],[15,"str"],[3,"Formula"],[15,"i32"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[4,"Expr"],[15,"usize"],[4,"Var"],[15,"slice"],[15,"bool"],[3,"ExprInFormula"],[4,"Option"],[8,"Hasher"],[15,"u64"],[8,"FormulaParser"],[3,"Box"],[8,"FnMut"],[3,"IoFormulaParser"],[4,"Rule"],[4,"Ordering"],[3,"Pairs"],[3,"Error"],[3,"Pair"],[3,"ModelFormulaParser"],[4,"Rule"],[3,"SatFormulaParser"],[8,"FormulaParsee"]]},\
"fastrand":{"doc":"A simple and fast random number generator.","t":"DFLFLFLLLFLFLFLLLLFLLLFLFLLLLLLLLLLLFLAFLFLFLFLFLLFLFLFFFLOFLFLLLLLFLFLFLFLFLFLFLLRRDFFFLLFFFMFLFFLFFFFFFOLFFFMFFLLFLFFFFFFFF","n":["Rng","alphabetic","alphabetic","alphanumeric","alphanumeric","bool","bool","borrow","borrow_mut","char","char","choice","choice","choose_multiple","choose_multiple","clone","clone_into","default","digit","digit","eq","equivalent","f32","f32","f64","f64","fill","fmt","fork","from","gen_mod_u128","gen_mod_u32","gen_mod_u64","gen_u128","gen_u32","gen_u64","get_seed","get_seed","global_rng","i128","i128","i16","i16","i32","i32","i64","i64","i8","i8","into","isize","isize","lowercase","lowercase","mul_high_u128","mul_high_u32","mul_high_u64","new","rng_integer","seed","seed","shuffle","shuffle","to_owned","try_from","try_into","type_id","u128","u128","u16","u16","u32","u32","u64","u64","u8","u8","uppercase","uppercase","usize","usize","with_seed","DEFAULT_RNG_SEED","RNG","RestoreOnDrop","alphabetic","alphanumeric","bool","borrow","borrow_mut","char","choice","choose_multiple","current","digit","drop","f32","f64","from","get_seed","i128","i16","i32","i64","i8","integer","into","isize","lowercase","random_seed","rng","seed","shuffle","try_from","try_into","try_with_rng","type_id","u128","u16","u32","u64","u8","uppercase","usize","with_rng"],"q":[[0,"fastrand"],[82,"fastrand::global_rng"]],"d":["A random number generator.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>bool</code>.","Generates a random <code>bool</code>.","","","Generates a random <code>char</code> in the given range.","Generates a random <code>char</code> in the given range.","Choose an item from an iterator at random.","Choose an item from an iterator at random.","Collects <code>amount</code> values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","Clones the generator by creating a new generator with the …","","Initialize the <code>Rng</code> from the system’s random number …","Generates a random digit in the given <code>base</code>.","Generates a random digit in the given <code>base</code>.","","","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Fill a byte slice with random data.","","Clones the generator by deterministically deriving a new …","Returns the argument unchanged.","Generates a random <code>u128</code> in <code>0..n</code>.","Generates a random <code>u32</code> in <code>0..n</code>.","Generates a random <code>u64</code> in <code>0..n</code>.","Generates a random <code>u128</code>.","Generates a random <code>u32</code>.","Generates a random <code>u64</code>.","Gives back <strong>current</strong> seed that is being held by the …","Gives back <strong>current</strong> seed that is being held by this …","A global, thread-local random number generator.","Generates a random <code>i128</code> in the given range.","Generates a random <code>i128</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i8</code> in the given range.","Generates a random <code>i8</code> in the given range.","Calls <code>U::from(self)</code>.","Generates a random <code>isize</code> in the given range.","Generates a random <code>isize</code> in the given range.","Generates a random <code>char</code> in range a-z.","Generates a random <code>char</code> in range a-z.","Computes <code>(a * b) &gt;&gt; 128</code>.","Computes <code>(a * b) &gt;&gt; 32</code>.","Computes <code>(a * b) &gt;&gt; 64</code>.","Creates a new random number generator.","","Initializes the thread-local generator with the given seed.","Initializes this generator with the given seed.","Shuffles a slice randomly.","Shuffles a slice randomly.","","","","","Generates a random <code>u128</code> in the given range.","Generates a random <code>u128</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>usize</code> in the given range.","Generates a random <code>usize</code> in the given range.","Creates a new random number generator with the initial …","","","Make sure the original RNG is restored even on panic.","Generates a random <code>char</code> in ranges a-z and A-Z.","Generates a random <code>char</code> in ranges a-z, A-Z and 0-9.","Generates a random <code>bool</code>.","","","Generates a random <code>char</code> in the given range.","Choose an item from an iterator at random.","Collects <code>amount</code> values at random from the iterator into a …","","Generates a random digit in the given <code>base</code>.","","Generates a random <code>f32</code> in range <code>0..1</code>.","Generates a random <code>f64</code> in range <code>0..1</code>.","Returns the argument unchanged.","Gives back <strong>current</strong> seed that is being held by the …","Generates a random <code>i128</code> in the given range.","Generates a random <code>i16</code> in the given range.","Generates a random <code>i32</code> in the given range.","Generates a random <code>i64</code> in the given range.","Generates a random <code>i8</code> in the given range.","","Calls <code>U::from(self)</code>.","Generates a random <code>isize</code> in the given range.","Generates a random <code>char</code> in range a-z.","","","Initializes the thread-local generator with the given seed.","Shuffles a slice randomly.","","","Try to run an operation with the current thread-local …","","Generates a random <code>u128</code> in the given range.","Generates a random <code>u16</code> in the given range.","Generates a random <code>u32</code> in the given range.","Generates a random <code>u64</code> in the given range.","Generates a random <code>u8</code> in the given range.","Generates a random <code>char</code> in range A-Z.","Generates a random <code>usize</code> in the given range.","Run an operation with the current thread-local generator."],"i":[0,0,2,0,2,0,2,2,2,0,2,0,2,0,2,2,2,2,0,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,0,0,2,0,2,0,2,0,2,0,2,2,0,2,0,2,0,0,0,2,0,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,2,0,0,0,0,0,0,28,28,0,0,0,28,0,28,0,0,28,0,0,0,0,0,0,0,28,0,0,0,28,0,0,28,28,0,28,0,0,0,0,0,0,0,0],"f":[0,[[],1],[2,1],[[],1],[2,1],[[],3],[2,3],[[]],[[]],[[[4,[1]]],1],[[2,[4,[1]]],1],[5,6],[[2,5],6],[[7,8],9],[[2,7,8],9],[2,2],[[]],[[],2],[10,1],[[2,10],1],[[2,2],3],[[],3],[[],11],[2,11],[[],12],[2,12],[[2,[14,[13]]]],[[2,15],16],[2,2],[[]],[[2,17],17],[[2,10],10],[[2,18],18],[2,17],[2,10],[2,18],[[],18],[2,18],0,[[[4,[19]]],19],[[2,[4,[19]]],19],[[[4,[20]]],20],[[2,[4,[20]]],20],[[[4,[21]]],21],[[2,[4,[21]]],21],[[[4,[22]]],22],[[2,[4,[22]]],22],[[[4,[23]]],23],[[2,[4,[23]]],23],[[]],[[[4,[24]]],24],[[2,[4,[24]]],24],[[],1],[2,1],[[17,17],17],[[10,10],10],[[18,18],18],[[],2],0,[18],[[2,18]],[14],[[2,14]],[[]],[[],25],[[],25],[[],26],[[[4,[17]]],17],[[2,[4,[17]]],17],[[[4,[27]]],27],[[2,[4,[27]]],27],[[[4,[10]]],10],[[2,[4,[10]]],10],[[[4,[18]]],18],[[2,[4,[18]]],18],[[[4,[13]]],13],[[2,[4,[13]]],13],[[],1],[2,1],[[[4,[8]]],8],[[2,[4,[8]]],8],[18,2],0,0,0,[[],1],[[],1],[[],3],[[]],[[]],[[[4,[1]]],1],[5,6],[[7,8],9],0,[10,1],[28],[[],11],[[],12],[[]],[[],18],[[[4,[19]]],19],[[[4,[20]]],20],[[[4,[21]]],21],[[[4,[22]]],22],[[[4,[23]]],23],0,[[]],[[[4,[24]]],24],[[],1],[[],[[6,[18]]]],0,[18],[14],[[],25],[[],25],[29,[[25,[30]]]],[[],26],[[[4,[17]]],17],[[[4,[27]]],27],[[[4,[10]]],10],[[[4,[18]]],18],[[[4,[13]]],13],[[],1],[[[4,[8]]],8],[29]],"c":[],"p":[[15,"char"],[3,"Rng"],[15,"bool"],[8,"RangeBounds"],[8,"IntoIterator"],[4,"Option"],[8,"Iterator"],[15,"usize"],[3,"Vec"],[15,"u32"],[15,"f32"],[15,"f64"],[15,"u8"],[15,"slice"],[3,"Formatter"],[6,"Result"],[15,"u128"],[15,"u64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"RestoreOnDrop"],[8,"FnOnce"],[3,"AccessError"]]},\
"linux_raw_sys":{"doc":"","t":"AAAAAAALLGGGGGGGGGGGGGELLLLLLRRRRRRRRRRRRRRRRRRRRRRFFFRRRDTDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRMMMLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNNNNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNNNNNNNNNNSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDRRRRRRRRDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGGGMMMMGGGGGDDGGGGGDGGGGGGGGDGDDGGGGGGDGGGGGDGGGGGGGDMMGMMMMMMMMMGGGGGTDDDDDTDDDDDGGGMMGGGGGMDDGMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMGGGMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLDLMMMMMMMMMMMMLLMMMMMMMMMMMDLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDMMMMMMMMMMDDDMMDMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMEDDDTDDTDDDDDMMMMMMDMDLLLLLLMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDMMMMMMMMDDDDMMMMDMMMMMMMMMMMMMMMMLDMMLMMMMMMMEEMMMMMMMMDMLLLMMMMMDMMLMMMMMMMMDMMDMMMMMMMMLMMMMMMMMMMMMMMMMMMMDDDDMMMMMMMMMMMMMMMMMDMMMMMMMMLLLLLLLLLLMMLMMMMDDMMMDTDGDTDGGTGMMMGMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMGMMMDDDMMMDDMMMMMMMMMMMMMMMMMMMMMMMGDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMDTDTDDDDDDDDDDDLMDMMMMMMMMMDDDDMDMMMMMRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFFRF","n":["ctypes","elf","errno","general","ioctl","select_macros","signal_macros","borrow","borrow_mut","c_char","c_double","c_float","c_int","c_long","c_longlong","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","fmt","from","into","try_from","try_into","type_id","DT_HASH","DT_NULL","DT_RELA","DT_RELAENT","DT_RELASZ","DT_STRTAB","DT_SYMENT","DT_SYMTAB","DT_VERDEF","DT_VERSYM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_NIDENT","EI_OSABI","EI_VERSION","ELFABIVERSION","ELFCLASS","ELFDATA","ELFMAG","ELFOSABI_LINUX","ELFOSABI_SYSV","ELF_ST_BIND","ELF_ST_TYPE","ELF_ST_VISIBILITY","EM_CURRENT","ET_DYN","EV_CURRENT","Elf_Dyn","Elf_Dyn_Union","Elf_Ehdr","Elf_Phdr","Elf_Rela","Elf_Sym","Elf_Verdaux","Elf_Verdef","Elf_auxv_t","PF_R","PF_W","PF_X","PN_XNUM","PT_DYNAMIC","PT_GNU_RELRO","PT_GNU_STACK","PT_INTERP","PT_LOAD","PT_PHDR","PT_TLS","R_RELATIVE","SELFMAG","SHN_ABS","SHN_UNDEF","STB_GLOBAL","STB_WEAK","STN_UNDEF","STT_FUNC","STT_NOTYPE","STV_DEFAULT","VER_DEF_CURRENT","VER_FLG_BASE","_vda_next","a_type","a_val","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","d_ptr","d_tag","d_un","d_val","e_ehsize","e_entry","e_flags","e_ident","e_machine","e_phentsize","e_phnum","e_phoff","e_shentsize","e_shnum","e_shoff","e_shstrndx","e_type","e_version","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","p_align","p_filesz","p_flags","p_memsz","p_offset","p_paddr","p_type","p_vaddr","r_addend","r_info","r_offset","st_info","st_name","st_other","st_shndx","st_size","st_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vd_aux","vd_cnt","vd_flags","vd_hash","vd_ndx","vd_next","vd_version","vda_name","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTTY","ENOTUNIQ","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUCLEAN","EUNATCH","EUSERS","EWOULDBLOCK","EXDEV","EXFULL","AAFS_MAGIC","ADDRB","ADFS_SUPER_MAGIC","AFFS_SUPER_MAGIC","AFS_FS_MAGIC","AFS_SUPER_MAGIC","ANON_INODE_FS_MAGIC","ARCH_SET_FS","ARG_MAX","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_MINSIGSTKSZ","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_RSEQ_ALIGN","AT_RSEQ_FEATURE_SIZE","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AT_VECTOR_SIZE_ARCH","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BDEVFS_MAGIC","BINDERFS_SUPER_MAGIC","BINFMTFS_MAGIC","BLOCK_SIZE","BLOCK_SIZE_BITS","BMAP_IOCTL","BOTHER","BPF_FS_MAGIC","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BTRFS_TEST_MAGIC","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CAP_AUDIT_CONTROL","CAP_AUDIT_READ","CAP_AUDIT_WRITE","CAP_BLOCK_SUSPEND","CAP_BPF","CAP_CHECKPOINT_RESTORE","CAP_CHOWN","CAP_DAC_OVERRIDE","CAP_DAC_READ_SEARCH","CAP_FOWNER","CAP_FSETID","CAP_IPC_LOCK","CAP_IPC_OWNER","CAP_KILL","CAP_LAST_CAP","CAP_LEASE","CAP_LINUX_IMMUTABLE","CAP_MAC_ADMIN","CAP_MAC_OVERRIDE","CAP_MKNOD","CAP_NET_ADMIN","CAP_NET_BIND_SERVICE","CAP_NET_BROADCAST","CAP_NET_RAW","CAP_PERFMON","CAP_SETFCAP","CAP_SETGID","CAP_SETPCAP","CAP_SETUID","CAP_SYSLOG","CAP_SYS_ADMIN","CAP_SYS_BOOT","CAP_SYS_CHROOT","CAP_SYS_MODULE","CAP_SYS_NICE","CAP_SYS_PACCT","CAP_SYS_PTRACE","CAP_SYS_RAWIO","CAP_SYS_RESOURCE","CAP_SYS_TIME","CAP_SYS_TTY_CONFIG","CAP_WAKE_ALARM","CBAUD","CBAUDEX","CEPH_SUPER_MAGIC","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CIFS_SUPER_MAGIC","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCKS_MASK","CLOCKS_MONO","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_SGI_CYCLE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_ARGS_SIZE_VER0","CLONE_ARGS_SIZE_VER1","CLONE_ARGS_SIZE_VER2","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_CLEAR_SIGHAND","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_INTO_CGROUP","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWTIME","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CMSPAR","CODA_SUPER_MAGIC","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRAMFS_MAGIC_WEND","CRDLY","CREAD","CRTSCTS","CS5","CS6","CS7","CS8","CSIGNAL","CSIZE","CSTOPB","DAXFS_MAGIC","DEBUGFS_MAGIC","DEVMEM_MAGIC","DEVPTS_SUPER_MAGIC","DMA_BUF_MAGIC","DN_ACCESS","DN_ATTRIB","DN_CREATE","DN_DELETE","DN_MODIFY","DN_MULTISHOT","DN_RENAME","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECRYPTFS_SUPER_MAGIC","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFIVARFS_MAGIC","EFS_SUPER_MAGIC","EMT_TAGOVF","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLNVAL","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EROFS_SUPER_MAGIC_V1","EXFAT_SUPER_MAGIC","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_NO_HIDE_STALE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FASYNC","FD_CLOEXEC","FF0","FF1","FFDLY","FILE_DEDUPE_RANGE_DIFFERS","FILE_DEDUPE_RANGE_SAME","FLUSHO","FPE_CONDTRAP","FPE_FLTDIV","FPE_FLTINV","FPE_FLTOVF","FPE_FLTRES","FPE_FLTSUB","FPE_FLTUND","FPE_FLTUNK","FPE_INTDIV","FPE_INTOVF","FSCONFIG_CMD_CREATE","FSCONFIG_CMD_RECONFIGURE","FSCONFIG_SET_BINARY","FSCONFIG_SET_FD","FSCONFIG_SET_FLAG","FSCONFIG_SET_PATH","FSCONFIG_SET_PATH_EMPTY","FSCONFIG_SET_STRING","FSCRYPT_KEY_DESCRIPTOR_SIZE","FSCRYPT_KEY_DESC_PREFIX","FSCRYPT_KEY_DESC_PREFIX_SIZE","FSCRYPT_KEY_IDENTIFIER_SIZE","FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY","FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS","FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR","FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER","FSCRYPT_KEY_STATUS_ABSENT","FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF","FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED","FSCRYPT_KEY_STATUS_PRESENT","FSCRYPT_MAX_KEY_SIZE","FSCRYPT_MODE_ADIANTUM","FSCRYPT_MODE_AES_128_CBC","FSCRYPT_MODE_AES_128_CTS","FSCRYPT_MODE_AES_256_CTS","FSCRYPT_MODE_AES_256_HCTR2","FSCRYPT_MODE_AES_256_XTS","FSCRYPT_MODE_SM4_CTS","FSCRYPT_MODE_SM4_XTS","FSCRYPT_POLICY_FLAGS_PAD_16","FSCRYPT_POLICY_FLAGS_PAD_32","FSCRYPT_POLICY_FLAGS_PAD_4","FSCRYPT_POLICY_FLAGS_PAD_8","FSCRYPT_POLICY_FLAGS_PAD_MASK","FSCRYPT_POLICY_FLAG_DIRECT_KEY","FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32","FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64","FSCRYPT_POLICY_V1","FSCRYPT_POLICY_V2","FSLABEL_MAX","FSMOUNT_CLOEXEC","FSOPEN_CLOEXEC","FSPICK_CLOEXEC","FSPICK_EMPTY_PATH","FSPICK_NO_AUTOMOUNT","FSPICK_SYMLINK_NOFOLLOW","FS_APPEND_FL","FS_BTREE_FL","FS_CASEFOLD_FL","FS_COMPRBLK_FL","FS_COMPR_FL","FS_DAX_FL","FS_DIRSYNC_FL","FS_DIRTY_FL","FS_EA_INODE_FL","FS_ENCRYPTION_MODE_ADIANTUM","FS_ENCRYPTION_MODE_AES_128_CBC","FS_ENCRYPTION_MODE_AES_128_CTS","FS_ENCRYPTION_MODE_AES_256_CBC","FS_ENCRYPTION_MODE_AES_256_CTS","FS_ENCRYPTION_MODE_AES_256_GCM","FS_ENCRYPTION_MODE_AES_256_XTS","FS_ENCRYPTION_MODE_INVALID","FS_ENCRYPT_FL","FS_EOFBLOCKS_FL","FS_EXTENT_FL","FS_FL_USER_MODIFIABLE","FS_FL_USER_VISIBLE","FS_HUGE_FILE_FL","FS_IMAGIC_FL","FS_IMMUTABLE_FL","FS_INDEX_FL","FS_INLINE_DATA_FL","FS_JOURNAL_DATA_FL","FS_KEY_DESCRIPTOR_SIZE","FS_KEY_DESC_PREFIX","FS_KEY_DESC_PREFIX_SIZE","FS_MAX_KEY_SIZE","FS_NOATIME_FL","FS_NOCOMP_FL","FS_NOCOW_FL","FS_NODUMP_FL","FS_NOTAIL_FL","FS_POLICY_FLAGS_PAD_16","FS_POLICY_FLAGS_PAD_32","FS_POLICY_FLAGS_PAD_4","FS_POLICY_FLAGS_PAD_8","FS_POLICY_FLAGS_PAD_MASK","FS_POLICY_FLAGS_VALID","FS_POLICY_FLAG_DIRECT_KEY","FS_PROJINHERIT_FL","FS_RESERVED_FL","FS_SECRM_FL","FS_SYNC_FL","FS_TOPDIR_FL","FS_UNRM_FL","FS_VERITY_FL","FS_XFLAG_APPEND","FS_XFLAG_COWEXTSIZE","FS_XFLAG_DAX","FS_XFLAG_EXTSIZE","FS_XFLAG_EXTSZINHERIT","FS_XFLAG_FILESTREAM","FS_XFLAG_HASATTR","FS_XFLAG_IMMUTABLE","FS_XFLAG_NOATIME","FS_XFLAG_NODEFRAG","FS_XFLAG_NODUMP","FS_XFLAG_NOSYMLINKS","FS_XFLAG_PREALLOC","FS_XFLAG_PROJINHERIT","FS_XFLAG_REALTIME","FS_XFLAG_RTINHERIT","FS_XFLAG_SYNC","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_32","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_CMP_REQUEUE_PI_PRIVATE","FUTEX_CMP_REQUEUE_PRIVATE","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_LOCK_PI2_PRIVATE","FUTEX_LOCK_PI_PRIVATE","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_OWNER_DIED","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_REQUEUE_PRIVATE","FUTEX_TID_MASK","FUTEX_TRYLOCK_PI","FUTEX_TRYLOCK_PI_PRIVATE","FUTEX_UNLOCK_PI","FUTEX_UNLOCK_PI_PRIVATE","FUTEX_WAIT","FUTEX_WAITERS","FUTEX_WAITV_MAX","FUTEX_WAIT_BITSET","FUTEX_WAIT_BITSET_PRIVATE","FUTEX_WAIT_PRIVATE","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAIT_REQUEUE_PI_PRIVATE","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_BITSET_PRIVATE","FUTEX_WAKE_OP","FUTEX_WAKE_OP_PRIVATE","FUTEX_WAKE_PRIVATE","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_EXLCK","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETOWNER_UIDS","F_GETOWN_EX","F_GETPIPE_SZ","F_GETSIG","F_GET_FILE_RW_HINT","F_GET_RW_HINT","F_GET_SEALS","F_LINUX_SPECIFIC_BASE","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_OWNER_PGRP","F_OWNER_PID","F_OWNER_TID","F_RDLCK","F_SEAL_EXEC","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETOWN_EX","F_SETPIPE_SZ","F_SETSIG","F_SET_FILE_RW_HINT","F_SET_RW_HINT","F_SHLCK","F_UNLCK","F_WRLCK","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16KB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","IBSHIFT","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","ILL_BADIADDR","ILL_BADSTK","ILL_COPROC","ILL_ILLADR","ILL_ILLOPC","ILL_ILLOPN","ILL_ILLTRP","ILL_PRVOPC","ILL_PRVREG","IMAXBEL","INLCR","INPCK","INR_OPEN_CUR","INR_OPEN_MAX","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IOCSIZE_MASK","IOCSIZE_SHIFT","IOC_IN","IOC_INOUT","IOC_OUT","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUCLC","IUTF8","IXANY","IXOFF","IXON","JFFS2_SUPER_MAGIC","LINK_MAX","LINUX_VERSION_CODE","LINUX_VERSION_MAJOR","LINUX_VERSION_PATCHLEVEL","LINUX_VERSION_SUBLEVEL","LOCK_EX","LOCK_MAND","LOCK_NB","LOCK_READ","LOCK_RW","LOCK_SH","LOCK_UN","LOCK_WRITE","MADV_COLD","MADV_COLLAPSE","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16KB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAP_UNINITIALIZED","MAX_CANON","MAX_CLOCKS","MAX_INPUT","MCL_CURRENT","MCL_FUTURE","MCL_ONFAULT","MEMBARRIER_CMD_FLAG_CPU","MEMBARRIER_CMD_GET_REGISTRATIONS","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_SHARED","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_EXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MFD_NOEXEC_SEAL","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_LIMIT","MLOCK_ONFAULT","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MOUNT_ATTR_IDMAP","MOUNT_ATTR_NOATIME","MOUNT_ATTR_NODEV","MOUNT_ATTR_NODIRATIME","MOUNT_ATTR_NOEXEC","MOUNT_ATTR_NOSUID","MOUNT_ATTR_NOSYMFOLLOW","MOUNT_ATTR_RDONLY","MOUNT_ATTR_RELATIME","MOUNT_ATTR_SIZE_VER0","MOUNT_ATTR_STRICTATIME","MOUNT_ATTR__ATIME","MOVE_MOUNT_F_AUTOMOUNTS","MOVE_MOUNT_F_EMPTY_PATH","MOVE_MOUNT_F_SYMLINKS","MOVE_MOUNT_SET_GROUP","MOVE_MOUNT_T_AUTOMOUNTS","MOVE_MOUNT_T_EMPTY_PATH","MOVE_MOUNT_T_SYMLINKS","MOVE_MOUNT__MASK","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSDOS_SUPER_MAGIC","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_BORN","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOREMOTELOCK","MS_NOSEC","MS_NOSUID","MS_NOSYMFOLLOW","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SUBMOUNT","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","MS_VERBOSE","MTD_INODE_FS_MAGIC","NAME_MAX","NCC","NCCS","NCP_SUPER_MAGIC","NFS_SUPER_MAGIC","NGROUPS_MAX","NILFS_SUPER_MAGIC","NL0","NL1","NLDLY","NOFLSH","NR_FILE","NR_OPEN","NSFS_MAGIC","NSIG","NSIGBUS","NSIGCHLD","NSIGEMT","NSIGFPE","NSIGILL","NSIGPOLL","NSIGSEGV","NSIGSYS","NSIGTRAP","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","OVERCOMMIT_ALWAYS","OVERCOMMIT_GUESS","OVERCOMMIT_NEVER","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_SYNC","O_TMPFILE","O_TMPFILE_MASK","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PIPEFS_MAGIC","PIPE_BUF","PKEY_ACCESS_MASK","PKEY_DISABLE_ACCESS","PKEY_DISABLE_WRITE","POLLERR","POLLHUP","POLLIN","POLLMSG","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLREMOVE","POLLWRBAND","POLLWRNORM","POLL_ERR","POLL_HUP","POLL_IN","POLL_MSG","POLL_OUT","POLL_PRI","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_SEM","PROT_WRITE","PSTOREFS_MAGIC","P_ALL","P_PGID","P_PID","P_PIDFD","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","RAMFS_MAGIC","RDTGROUP_SUPER_MAGIC","REISER2FS_JR_SUPER_MAGIC_STRING","REISER2FS_SUPER_MAGIC_STRING","REISERFS_SUPER_MAGIC","REISERFS_SUPER_MAGIC_STRING","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","ROBUST_LIST_LIMIT","RTSIG_MAX","RUSAGE_BOTH","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","RWF_WRITE_LIFE_NOT_SET","RWH_WRITE_LIFE_EXTREME","RWH_WRITE_LIFE_LONG","RWH_WRITE_LIFE_MEDIUM","RWH_WRITE_LIFE_NONE","RWH_WRITE_LIFE_NOT_SET","RWH_WRITE_LIFE_SHORT","R_OK","SA_EXPOSE_TAGBITS","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_NOMASK","SA_ONESHOT","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_RESTORER","SA_SIGINFO","SA_UNSUPPORTED","SCHED_BATCH","SCHED_DEADLINE","SCHED_FIFO","SCHED_FLAG_ALL","SCHED_FLAG_DL_OVERRUN","SCHED_FLAG_KEEP_ALL","SCHED_FLAG_KEEP_PARAMS","SCHED_FLAG_KEEP_POLICY","SCHED_FLAG_RECLAIM","SCHED_FLAG_RESET_ON_FORK","SCHED_FLAG_UTIL_CLAMP","SCHED_FLAG_UTIL_CLAMP_MAX","SCHED_FLAG_UTIL_CLAMP_MIN","SCHED_IDLE","SCHED_NORMAL","SCHED_RESET_ON_FORK","SCHED_RR","SECRETMEM_MAGIC","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_MAX","SEEK_SET","SEGV_ACCADI","SEGV_ACCERR","SEGV_ADIDERR","SEGV_ADIPERR","SEGV_BNDERR","SEGV_MAPERR","SEGV_MTEAERR","SEGV_MTESERR","SEGV_PKUERR","SELINUX_MAGIC","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_MAX_SIZE","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_SETMASK","SIG_UNBLOCK","SI_ASYNCIO","SI_ASYNCNL","SI_DETHREAD","SI_KERNEL","SI_MAX_SIZE","SI_MESGQ","SI_QUEUE","SI_SIGIO","SI_TIMER","SI_TKILL","SI_USER","SMACK_MAGIC","SMB2_SUPER_MAGIC","SMB_SUPER_MAGIC","SOCKFS_MAGIC","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SQUASHFS_MAGIC","SS_AUTODISARM","SS_DISABLE","SS_FLAG_BITS","SS_ONSTACK","STACK_END_MAGIC","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STAT_HAVE_NSEC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYNC_FILE_RANGE_WRITE_AND_WAIT","SYSFS_MAGIC","SYS_SECCOMP","SYS_USER_DISPATCH","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TFD_CLOEXEC","TFD_CREATE_FLAGS","TFD_NONBLOCK","TFD_SETTIME_FLAGS","TFD_SHARED_FCNTL_FLAGS","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","TIMER_ABSTIME","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_LOOP","TIOCM_OUT1","TIOCM_OUT2","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCSER_TEMT","TMPFS_MAGIC","TOSTOP","TRACEFS_MAGIC","TRAP_BRANCH","TRAP_BRKPT","TRAP_HWBKPT","TRAP_PERF","TRAP_PERF_FLAG_ASYNC","TRAP_TRACE","TRAP_UNK","UDF_SUPER_MAGIC","UFFDIO","UFFDIO_COPY_MODE_DONTWAKE","UFFDIO_COPY_MODE_WP","UFFDIO_REGISTER_MODE_MINOR","UFFDIO_REGISTER_MODE_MISSING","UFFDIO_REGISTER_MODE_WP","UFFDIO_ZEROPAGE_MODE_DONTWAKE","UFFD_API","UFFD_EVENT_FORK","UFFD_EVENT_PAGEFAULT","UFFD_EVENT_REMAP","UFFD_EVENT_REMOVE","UFFD_EVENT_UNMAP","UFFD_FEATURE_EVENT_FORK","UFFD_FEATURE_EVENT_REMAP","UFFD_FEATURE_EVENT_REMOVE","UFFD_FEATURE_EVENT_UNMAP","UFFD_FEATURE_EXACT_ADDRESS","UFFD_FEATURE_MINOR_HUGETLBFS","UFFD_FEATURE_MINOR_SHMEM","UFFD_FEATURE_MISSING_HUGETLBFS","UFFD_FEATURE_MISSING_SHMEM","UFFD_FEATURE_PAGEFAULT_FLAG_WP","UFFD_FEATURE_SIGBUS","UFFD_FEATURE_THREAD_ID","UFFD_FEATURE_WP_HUGETLBFS_SHMEM","UFFD_PAGEFAULT_FLAG_MINOR","UFFD_PAGEFAULT_FLAG_WP","UFFD_PAGEFAULT_FLAG_WRITE","UFFD_USER_MODE_ONLY","UIO_FASTIOV","UIO_MAXIOV","UMOUNT_NOFOLLOW","UMOUNT_UNUSED","USBDEVICE_SUPER_MAGIC","USERFAULTFD_IOC","UTIME_NOW","UTIME_OMIT","V9FS_MAGIC","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VFS_CAP_FLAGS_EFFECTIVE","VFS_CAP_FLAGS_MASK","VFS_CAP_REVISION","VFS_CAP_REVISION_1","VFS_CAP_REVISION_2","VFS_CAP_REVISION_3","VFS_CAP_REVISION_MASK","VFS_CAP_REVISION_SHIFT","VFS_CAP_U32","VFS_CAP_U32_1","VFS_CAP_U32_2","VFS_CAP_U32_3","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WEXITED","WNOHANG","WNOWAIT","WSTOPPED","WUNTRACED","W_OK","XATTR_APPARMOR_SUFFIX","XATTR_BTRFS_PREFIX","XATTR_CAPS_SUFFIX","XATTR_CREATE","XATTR_EVM_SUFFIX","XATTR_HURD_PREFIX","XATTR_IMA_SUFFIX","XATTR_LIST_MAX","XATTR_MAC_OSX_PREFIX","XATTR_NAME_APPARMOR","XATTR_NAME_CAPS","XATTR_NAME_EVM","XATTR_NAME_IMA","XATTR_NAME_MAX","XATTR_NAME_POSIX_ACL_ACCESS","XATTR_NAME_POSIX_ACL_DEFAULT","XATTR_NAME_SELINUX","XATTR_NAME_SMACK","XATTR_NAME_SMACKEXEC","XATTR_NAME_SMACKIPIN","XATTR_NAME_SMACKIPOUT","XATTR_NAME_SMACKMMAP","XATTR_NAME_SMACKTRANSMUTE","XATTR_OS2_PREFIX","XATTR_POSIX_ACL_ACCESS","XATTR_POSIX_ACL_DEFAULT","XATTR_REPLACE","XATTR_SECURITY_PREFIX","XATTR_SELINUX_SUFFIX","XATTR_SIZE_MAX","XATTR_SMACK_EXEC","XATTR_SMACK_IPIN","XATTR_SMACK_IPOUT","XATTR_SMACK_MMAP","XATTR_SMACK_SUFFIX","XATTR_SMACK_TRANSMUTE","XATTR_SYSTEM_PREFIX","XATTR_TRUSTED_PREFIX","XATTR_USER_PREFIX","XCASE","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XTABS","X_OK","ZONEFS_MAGIC","_IOC_DIRBITS","_IOC_DIRMASK","_IOC_DIRSHIFT","_IOC_NONE","_IOC_NRBITS","_IOC_NRMASK","_IOC_NRSHIFT","_IOC_READ","_IOC_SIZEBITS","_IOC_SIZEMASK","_IOC_SIZESHIFT","_IOC_TYPEBITS","_IOC_TYPEMASK","_IOC_TYPESHIFT","_IOC_WRITE","_LINUX_CAPABILITY_U32S","_LINUX_CAPABILITY_U32S_1","_LINUX_CAPABILITY_U32S_2","_LINUX_CAPABILITY_U32S_3","_LINUX_CAPABILITY_VERSION","_LINUX_CAPABILITY_VERSION_1","_LINUX_CAPABILITY_VERSION_2","_LINUX_CAPABILITY_VERSION_3","_NSIG","_STK_LIM","_UFFDIO_API","_UFFDIO_CONTINUE","_UFFDIO_COPY","_UFFDIO_REGISTER","_UFFDIO_UNREGISTER","_UFFDIO_WAKE","_UFFDIO_WRITEPROTECT","_UFFDIO_ZEROPAGE","__BindgenBitfieldUnit","__FD_SETSIZE","__FPE_DECDIV","__FPE_DECERR","__FPE_DECOVF","__FPE_INVASC","__FPE_INVDEC","__ILL_BNDMOD","__ILL_BREAK","__IncompleteArrayField","__NR__sysctl","__NR_accept","__NR_accept4","__NR_access","__NR_acct","__NR_add_key","__NR_adjtimex","__NR_afs_syscall","__NR_alarm","__NR_arch_prctl","__NR_bind","__NR_bpf","__NR_brk","__NR_capget","__NR_capset","__NR_chdir","__NR_chmod","__NR_chown","__NR_chroot","__NR_clock_adjtime","__NR_clock_getres","__NR_clock_gettime","__NR_clock_nanosleep","__NR_clock_settime","__NR_clone","__NR_clone3","__NR_close","__NR_close_range","__NR_connect","__NR_copy_file_range","__NR_creat","__NR_create_module","__NR_delete_module","__NR_dup","__NR_dup2","__NR_dup3","__NR_epoll_create","__NR_epoll_create1","__NR_epoll_ctl","__NR_epoll_ctl_old","__NR_epoll_pwait","__NR_epoll_pwait2","__NR_epoll_wait","__NR_epoll_wait_old","__NR_eventfd","__NR_eventfd2","__NR_execve","__NR_execveat","__NR_exit","__NR_exit_group","__NR_faccessat","__NR_faccessat2","__NR_fadvise64","__NR_fallocate","__NR_fanotify_init","__NR_fanotify_mark","__NR_fchdir","__NR_fchmod","__NR_fchmodat","__NR_fchown","__NR_fchownat","__NR_fcntl","__NR_fdatasync","__NR_fgetxattr","__NR_finit_module","__NR_flistxattr","__NR_flock","__NR_fork","__NR_fremovexattr","__NR_fsconfig","__NR_fsetxattr","__NR_fsmount","__NR_fsopen","__NR_fspick","__NR_fstat","__NR_fstatfs","__NR_fsync","__NR_ftruncate","__NR_futex","__NR_futex_waitv","__NR_futimesat","__NR_get_kernel_syms","__NR_get_mempolicy","__NR_get_robust_list","__NR_get_thread_area","__NR_getcpu","__NR_getcwd","__NR_getdents","__NR_getdents64","__NR_getegid","__NR_geteuid","__NR_getgid","__NR_getgroups","__NR_getitimer","__NR_getpeername","__NR_getpgid","__NR_getpgrp","__NR_getpid","__NR_getpmsg","__NR_getppid","__NR_getpriority","__NR_getrandom","__NR_getresgid","__NR_getresuid","__NR_getrlimit","__NR_getrusage","__NR_getsid","__NR_getsockname","__NR_getsockopt","__NR_gettid","__NR_gettimeofday","__NR_getuid","__NR_getxattr","__NR_init_module","__NR_inotify_add_watch","__NR_inotify_init","__NR_inotify_init1","__NR_inotify_rm_watch","__NR_io_cancel","__NR_io_destroy","__NR_io_getevents","__NR_io_pgetevents","__NR_io_setup","__NR_io_submit","__NR_io_uring_enter","__NR_io_uring_register","__NR_io_uring_setup","__NR_ioctl","__NR_ioperm","__NR_iopl","__NR_ioprio_get","__NR_ioprio_set","__NR_kcmp","__NR_kexec_file_load","__NR_kexec_load","__NR_keyctl","__NR_kill","__NR_landlock_add_rule","__NR_landlock_create_ruleset","__NR_landlock_restrict_self","__NR_lchown","__NR_lgetxattr","__NR_link","__NR_linkat","__NR_listen","__NR_listxattr","__NR_llistxattr","__NR_lookup_dcookie","__NR_lremovexattr","__NR_lseek","__NR_lsetxattr","__NR_lstat","__NR_madvise","__NR_mbind","__NR_membarrier","__NR_memfd_create","__NR_memfd_secret","__NR_migrate_pages","__NR_mincore","__NR_mkdir","__NR_mkdirat","__NR_mknod","__NR_mknodat","__NR_mlock","__NR_mlock2","__NR_mlockall","__NR_mmap","__NR_modify_ldt","__NR_mount","__NR_mount_setattr","__NR_move_mount","__NR_move_pages","__NR_mprotect","__NR_mq_getsetattr","__NR_mq_notify","__NR_mq_open","__NR_mq_timedreceive","__NR_mq_timedsend","__NR_mq_unlink","__NR_mremap","__NR_msgctl","__NR_msgget","__NR_msgrcv","__NR_msgsnd","__NR_msync","__NR_munlock","__NR_munlockall","__NR_munmap","__NR_name_to_handle_at","__NR_nanosleep","__NR_newfstatat","__NR_nfsservctl","__NR_open","__NR_open_by_handle_at","__NR_open_tree","__NR_openat","__NR_openat2","__NR_pause","__NR_perf_event_open","__NR_personality","__NR_pidfd_getfd","__NR_pidfd_open","__NR_pidfd_send_signal","__NR_pipe","__NR_pipe2","__NR_pivot_root","__NR_pkey_alloc","__NR_pkey_free","__NR_pkey_mprotect","__NR_poll","__NR_ppoll","__NR_prctl","__NR_pread64","__NR_preadv","__NR_preadv2","__NR_prlimit64","__NR_process_madvise","__NR_process_mrelease","__NR_process_vm_readv","__NR_process_vm_writev","__NR_pselect6","__NR_ptrace","__NR_putpmsg","__NR_pwrite64","__NR_pwritev","__NR_pwritev2","__NR_query_module","__NR_quotactl","__NR_quotactl_fd","__NR_read","__NR_readahead","__NR_readlink","__NR_readlinkat","__NR_readv","__NR_reboot","__NR_recvfrom","__NR_recvmmsg","__NR_recvmsg","__NR_remap_file_pages","__NR_removexattr","__NR_rename","__NR_renameat","__NR_renameat2","__NR_request_key","__NR_restart_syscall","__NR_rmdir","__NR_rseq","__NR_rt_sigaction","__NR_rt_sigpending","__NR_rt_sigprocmask","__NR_rt_sigqueueinfo","__NR_rt_sigreturn","__NR_rt_sigsuspend","__NR_rt_sigtimedwait","__NR_rt_tgsigqueueinfo","__NR_sched_get_priority_max","__NR_sched_get_priority_min","__NR_sched_getaffinity","__NR_sched_getattr","__NR_sched_getparam","__NR_sched_getscheduler","__NR_sched_rr_get_interval","__NR_sched_setaffinity","__NR_sched_setattr","__NR_sched_setparam","__NR_sched_setscheduler","__NR_sched_yield","__NR_seccomp","__NR_security","__NR_select","__NR_semctl","__NR_semget","__NR_semop","__NR_semtimedop","__NR_sendfile","__NR_sendmmsg","__NR_sendmsg","__NR_sendto","__NR_set_mempolicy","__NR_set_mempolicy_home_node","__NR_set_robust_list","__NR_set_thread_area","__NR_set_tid_address","__NR_setdomainname","__NR_setfsgid","__NR_setfsuid","__NR_setgid","__NR_setgroups","__NR_sethostname","__NR_setitimer","__NR_setns","__NR_setpgid","__NR_setpriority","__NR_setregid","__NR_setresgid","__NR_setresuid","__NR_setreuid","__NR_setrlimit","__NR_setsid","__NR_setsockopt","__NR_settimeofday","__NR_setuid","__NR_setxattr","__NR_shmat","__NR_shmctl","__NR_shmdt","__NR_shmget","__NR_shutdown","__NR_sigaltstack","__NR_signalfd","__NR_signalfd4","__NR_socket","__NR_socketpair","__NR_splice","__NR_stat","__NR_statfs","__NR_statx","__NR_swapoff","__NR_swapon","__NR_symlink","__NR_symlinkat","__NR_sync","__NR_sync_file_range","__NR_syncfs","__NR_sysfs","__NR_sysinfo","__NR_syslog","__NR_tee","__NR_tgkill","__NR_time","__NR_timer_create","__NR_timer_delete","__NR_timer_getoverrun","__NR_timer_gettime","__NR_timer_settime","__NR_timerfd_create","__NR_timerfd_gettime","__NR_timerfd_settime","__NR_times","__NR_tkill","__NR_truncate","__NR_tuxcall","__NR_umask","__NR_umount2","__NR_uname","__NR_unlink","__NR_unlinkat","__NR_unshare","__NR_uselib","__NR_userfaultfd","__NR_ustat","__NR_utime","__NR_utimensat","__NR_utimes","__NR_vfork","__NR_vhangup","__NR_vmsplice","__NR_vserver","__NR_wait4","__NR_waitid","__NR_write","__NR_writev","__O_SYNC","__O_TMPFILE","__WALL","__WCLONE","__WNOTHREAD","__X32_SYSCALL_BIT","__be16","__be32","__be64","__bindgen_anon_1","__bindgen_anon_1","__bindgen_anon_1","__bindgen_padding_0","__fsword_t","__kernel_caddr_t","__kernel_clock_t","__kernel_clockid_t","__kernel_daddr_t","__kernel_fd_set","__kernel_fsid_t","__kernel_gid16_t","__kernel_gid32_t","__kernel_gid_t","__kernel_ino_t","__kernel_ipc_pid_t","__kernel_itimerspec","__kernel_key_t","__kernel_loff_t","__kernel_long_t","__kernel_mode_t","__kernel_mqd_t","__kernel_off_t","__kernel_old_dev_t","__kernel_old_gid_t","__kernel_old_itimerval","__kernel_old_time_t","__kernel_old_timespec","__kernel_old_timeval","__kernel_old_uid_t","__kernel_pid_t","__kernel_ptrdiff_t","__kernel_rwf_t","__kernel_sighandler_t","__kernel_size_t","__kernel_sock_timeval","__kernel_ssize_t","__kernel_suseconds_t","__kernel_time64_t","__kernel_time_t","__kernel_timer_t","__kernel_timespec","__kernel_uid16_t","__kernel_uid32_t","__kernel_uid_t","__kernel_ulong_t","__le16","__le32","__le64","__old_kernel_stat","__out_reserved","__pad0","__poll_t","__reserved","__reserved","__reserved","__reserved","__reserved","__reserved","__reserved","__reserved","__reserved","__restorefn_t","__s16","__s32","__s64","__s8","__sifields","__sifields__bindgen_ty_1","__sifields__bindgen_ty_2","__sifields__bindgen_ty_3","__sifields__bindgen_ty_4","__sifields__bindgen_ty_5","__sifields__bindgen_ty_5__bindgen_ty_1","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3","__sifields__bindgen_ty_6","__sifields__bindgen_ty_7","__sighandler_t","__signalfn_t","__sigrestore_t","__spare0","__spare3","__sum16","__u16","__u32","__u64","__u8","__unused","__user_cap_data_struct","__user_cap_header_struct","__wsum","_addr","_addr_bnd","_addr_lsb","_addr_pkey","_arch","_attribute","_band","_bitfield_1","_bitfield_align_1","_call_addr","_data","_dummy_bnd","_dummy_pkey","_fd","_flags","_function","_kill","_lower","_overrun","_pad","_perf","_pid","_pid","_pid","_pkey","_rt","_si_pad","_sifields","_sigchld","_sigev_thread","_sigev_un","_sigfault","_sigpoll","_sigsys","_sigval","_sigval","_status","_stime","_sys_private","_syscall","_tid","_tid","_timer","_trapno","_type","_uid","_uid","_uid","_upper","_utime","address","api","arg","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attr_clr","attr_set","base_addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","buf_size","bytes_deduped","c_cc","c_cc","c_cc","c_cc","c_cflag","c_cflag","c_cflag","c_cflag","c_iflag","c_iflag","c_iflag","c_iflag","c_ispeed","c_ispeed","c_lflag","c_lflag","c_lflag","c_lflag","c_line","c_line","c_line","c_line","c_oflag","c_oflag","c_oflag","c_oflag","c_ospeed","c_ospeed","cap_user_data_t","cap_user_header_t","cc_t","cgroup","child_tid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","cmp","compat_statfs64","contents","contents_encryption_mode","contents_encryption_mode","cookie","copy","d_ino","d_name","d_off","d_reclen","d_type","data","data","data","default","default","descriptor","dest_count","dest_fd","dest_offset","dest_offset","dst","dummy","effective","end","entropy_count","entry_number","epoll_event","eq","eq","eq","eq","eq","event","events","events","exit_signal","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_flags","f_flags","f_flags","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namelen","f_owner_ex","f_spare","f_spare","f_spare","f_type","f_type","f_type","fd","fds_bits","feat","features","file_clone_range","file_dedupe_range","file_dedupe_range_info","filenames_encryption_mode","filenames_encryption_mode","files_stat_struct","flags","flags","flags","flags","flags","flags","flock","flock64","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsconfig_command","fscrypt_add_key_arg","fscrypt_get_key_status_arg","fscrypt_get_policy_ex_arg","fscrypt_get_policy_ex_arg__bindgen_ty_1","fscrypt_key","fscrypt_key_specifier","fscrypt_key_specifier__bindgen_ty_1","fscrypt_policy_v1","fscrypt_policy_v2","fscrypt_provisioning_key_payload","fscrypt_remove_key_arg","fstrim_range","fsx_cowextsize","fsx_extsize","fsx_nextents","fsx_pad","fsx_projid","fsx_xflags","fsxattr","futex_offset","futex_waitv","get","get_bit","hash","hash","hash","hash","identifier","info","inheritable","inheritable","inheritable","inodes_stat_t","inotify_event","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ioctls","ioctls","iov_base","iov_len","iovec","it_interval","it_interval","it_interval","it_interval","it_value","it_value","it_value","it_value","itimerspec","itimerval","kernel_sigaction","kernel_sigset_t","key_id","key_spec","key_spec","key_spec","ktermios","l_len","l_len","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","len","len","len","len","len","limit","limit_in_pages","linux_dirent64","list","list_op_pending","lm","magic_etc","magic_etc","mapped","mask","master_key_descriptor","master_key_identifier","max_files","membarrier_cmd","membarrier_cmd_flag","minlen","mode","mode","mode","mode","mode","mode","mode","mount_attr","name","new","new","new_bitfield_1","next","nr_files","nr_free_files","nr_inodes","nr_unused","open_how","pagefault","parent_tid","partial_cmp","permitted","permitted","permitted","pid","pid","pidfd","policy","policy_size","pollfd","propagation","ptid","rand_pool_info","range","range","range","range","raw","raw","raw","raw_size","read_exec_only","remap","removal_status_flags","remove","reserved","reserved","reserved1","reserved1","reserved1","reserved2","reserved2","reserved2","reserved3","reserved3","resolve","revents","rlim_cur","rlim_cur","rlim_max","rlim_max","rlimit","rlimit64","robust_list","robust_list_head","rootid","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","sa_flags","sa_flags","sa_handler","sa_handler_kernel","sa_mask","sa_mask","sa_restorer","sa_restorer","seg_32bit","seg_not_present","set","set_bit","set_contents","set_limit_in_pages","set_lm","set_read_exec_only","set_seg_32bit","set_seg_not_present","set_tid","set_tid_size","set_useable","si_code","si_errno","si_signo","sig","sigaction","sigaltstack","sigev_notify","sigev_signo","sigev_value","sigevent","sigevent__bindgen_ty_1","sigevent__bindgen_ty_1__bindgen_ty_1","sigevent_t","siginfo","siginfo__bindgen_ty_1","siginfo__bindgen_ty_1__bindgen_ty_1","siginfo_t","sigset_t","sigval","sigval_t","sival_int","sival_ptr","size","speed_t","src","src_fd","src_length","src_length","src_offset","src_offset","ss_flags","ss_size","ss_sp","st_atime","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_nlink","st_nlink","st_rdev","st_rdev","st_size","st_size","st_uid","st_uid","stack","stack_size","stack_t","start","start","start","stat","statfs","statfs64","status","status","status_flags","statx","statx_timestamp","storage","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","tcflag_t","termio","termios","termios2","timespec","timeval","timezone","tls","to","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tv_nsec","tv_nsec","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tv_usec","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tz_dsttime","tz_minuteswest","u","uaddr","ufd","uffd_msg","uffd_msg__bindgen_ty_1","uffd_msg__bindgen_ty_1__bindgen_ty_1","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1","uffd_msg__bindgen_ty_1__bindgen_ty_2","uffd_msg__bindgen_ty_1__bindgen_ty_3","uffd_msg__bindgen_ty_1__bindgen_ty_4","uffd_msg__bindgen_ty_1__bindgen_ty_5","uffdio_api","uffdio_continue","uffdio_copy","uffdio_range","uffdio_register","uffdio_writeprotect","uffdio_zeropage","useable","user_count","user_desc","userns_fd","v1","v2","val","val","version","version","version","version","vfs_cap_data","vfs_cap_data__bindgen_ty_1","vfs_ns_cap_data","vfs_ns_cap_data__bindgen_ty_1","wd","winsize","ws_col","ws_row","ws_xpixel","ws_ypixel","zeropage","ACRN_IOCTL_ASSIGN_PCIDEV","ACRN_IOCTL_ATTACH_IOREQ_CLIENT","ACRN_IOCTL_CLEAR_VM_IOREQ","ACRN_IOCTL_CREATE_IOREQ_CLIENT","ACRN_IOCTL_CREATE_VM","ACRN_IOCTL_DEASSIGN_PCIDEV","ACRN_IOCTL_DESTROY_IOREQ_CLIENT","ACRN_IOCTL_DESTROY_VM","ACRN_IOCTL_INJECT_MSI","ACRN_IOCTL_IOEVENTFD","ACRN_IOCTL_IRQFD","ACRN_IOCTL_NOTIFY_REQUEST_FINISH","ACRN_IOCTL_PAUSE_VM","ACRN_IOCTL_PM_GET_CPU_STATE","ACRN_IOCTL_RESET_PTDEV_INTR","ACRN_IOCTL_RESET_VM","ACRN_IOCTL_SET_IRQLINE","ACRN_IOCTL_SET_MEMSEG","ACRN_IOCTL_SET_PTDEV_INTR","ACRN_IOCTL_SET_VCPU_REGS","ACRN_IOCTL_START_VM","ACRN_IOCTL_UNSET_MEMSEG","ACRN_IOCTL_VM_INTR_MONITOR","AGPIOC_ALLOCATE","APM_IOC_STANDBY","APM_IOC_SUSPEND","ASPEED_LPC_CTRL_IOCTL_GET_SIZE","ASPEED_LPC_CTRL_IOCTL_MAP","ASPEED_P2A_CTRL_IOCTL_GET_MEMORY_CONFIG","ASPEED_P2A_CTRL_IOCTL_SET_WINDOW","ATMARPD_CTRL","ATMARP_ENCAP","ATMARP_MKIP","ATMARP_SETENTRY","ATMLEC_CTRL","ATMLEC_DATA","ATMLEC_MCAST","ATMMPC_CTRL","ATMMPC_DATA","ATMSIGD_CTRL","ATMTCP_CREATE","ATMTCP_REMOVE","ATM_ADDADDR","ATM_ADDLECSADDR","ATM_ADDPARTY","ATM_DELADDR","ATM_DELLECSADDR","ATM_DROPPARTY","ATM_GETADDR","ATM_GETCIRANGE","ATM_GETESI","ATM_GETLECSADDR","ATM_GETLINKRATE","ATM_GETLOOP","ATM_GETNAMES","ATM_GETSTAT","ATM_GETSTATZ","ATM_GETTYPE","ATM_NEWBACKENDIF","ATM_QUERYLOOP","ATM_RSTADDR","ATM_SETBACKEND","ATM_SETCIRANGE","ATM_SETESI","ATM_SETESIF","ATM_SETLOOP","ATM_SETSC","AUTOFS_DEV_IOCTL_ASKUMOUNT","AUTOFS_DEV_IOCTL_CATATONIC","AUTOFS_DEV_IOCTL_CLOSEMOUNT","AUTOFS_DEV_IOCTL_EXPIRE","AUTOFS_DEV_IOCTL_FAIL","AUTOFS_DEV_IOCTL_ISMOUNTPOINT","AUTOFS_DEV_IOCTL_OPENMOUNT","AUTOFS_DEV_IOCTL_PROTOSUBVER","AUTOFS_DEV_IOCTL_PROTOVER","AUTOFS_DEV_IOCTL_READY","AUTOFS_DEV_IOCTL_REQUESTER","AUTOFS_DEV_IOCTL_SETPIPEFD","AUTOFS_DEV_IOCTL_TIMEOUT","AUTOFS_DEV_IOCTL_VERSION","AUTOFS_IOC_ASKUMOUNT","AUTOFS_IOC_CATATONIC","AUTOFS_IOC_EXPIRE","AUTOFS_IOC_EXPIRE_MULTI","AUTOFS_IOC_FAIL","AUTOFS_IOC_PROTOSUBVER","AUTOFS_IOC_PROTOVER","AUTOFS_IOC_READY","AUTOFS_IOC_SETTIMEOUT","BLKALIGNOFF","BLKBSZGET","BLKBSZSET","BLKCLOSEZONE","BLKDISCARD","BLKDISCARDZEROES","BLKFINISHZONE","BLKFLSBUF","BLKFRAGET","BLKFRASET","BLKGETDISKSEQ","BLKGETNRZONES","BLKGETSIZE","BLKGETSIZE64","BLKGETZONESZ","BLKIOMIN","BLKIOOPT","BLKOPENZONE","BLKPBSZGET","BLKPG","BLKRAGET","BLKRASET","BLKREPORTZONE","BLKRESETZONE","BLKROGET","BLKROSET","BLKROTATIONAL","BLKRRPART","BLKSECDISCARD","BLKSECTGET","BLKSECTSET","BLKSSZGET","BLKTRACESETUP","BLKTRACESTART","BLKTRACESTOP","BLKTRACETEARDOWN","BLKZEROOUT","BR2684_SETFILT","BTRFS_IOC_ADD_DEV","BTRFS_IOC_BALANCE","BTRFS_IOC_BALANCE_CTL","BTRFS_IOC_BALANCE_PROGRESS","BTRFS_IOC_BALANCE_V2","BTRFS_IOC_CLONE","BTRFS_IOC_CLONE_RANGE","BTRFS_IOC_DEFAULT_SUBVOL","BTRFS_IOC_DEFRAG","BTRFS_IOC_DEFRAG_RANGE","BTRFS_IOC_DEVICES_READY","BTRFS_IOC_DEV_INFO","BTRFS_IOC_DEV_REPLACE","BTRFS_IOC_FILE_EXTENT_SAME","BTRFS_IOC_FORGET_DEV","BTRFS_IOC_FS_INFO","BTRFS_IOC_GET_DEV_STATS","BTRFS_IOC_GET_FEATURES","BTRFS_IOC_GET_SUBVOL_INFO","BTRFS_IOC_GET_SUBVOL_ROOTREF","BTRFS_IOC_GET_SUPPORTED_FEATURES","BTRFS_IOC_INO_LOOKUP","BTRFS_IOC_INO_LOOKUP_USER","BTRFS_IOC_INO_PATHS","BTRFS_IOC_LOGICAL_INO","BTRFS_IOC_LOGICAL_INO_V2","BTRFS_IOC_QGROUP_ASSIGN","BTRFS_IOC_QGROUP_CREATE","BTRFS_IOC_QGROUP_LIMIT","BTRFS_IOC_QUOTA_CTL","BTRFS_IOC_QUOTA_RESCAN","BTRFS_IOC_QUOTA_RESCAN_STATUS","BTRFS_IOC_QUOTA_RESCAN_WAIT","BTRFS_IOC_RESIZE","BTRFS_IOC_RM_DEV","BTRFS_IOC_RM_DEV_V2","BTRFS_IOC_SCAN_DEV","BTRFS_IOC_SCRUB","BTRFS_IOC_SCRUB_CANCEL","BTRFS_IOC_SCRUB_PROGRESS","BTRFS_IOC_SEND","BTRFS_IOC_SET_FEATURES","BTRFS_IOC_SET_RECEIVED_SUBVOL","BTRFS_IOC_SNAP_CREATE","BTRFS_IOC_SNAP_CREATE_V2","BTRFS_IOC_SNAP_DESTROY","BTRFS_IOC_SNAP_DESTROY_V2","BTRFS_IOC_SPACE_INFO","BTRFS_IOC_START_SYNC","BTRFS_IOC_SUBVOL_CREATE","BTRFS_IOC_SUBVOL_CREATE_V2","BTRFS_IOC_SUBVOL_GETFLAGS","BTRFS_IOC_SUBVOL_SETFLAGS","BTRFS_IOC_SYNC","BTRFS_IOC_TRANS_END","BTRFS_IOC_TRANS_START","BTRFS_IOC_TREE_SEARCH","BTRFS_IOC_TREE_SEARCH_V2","BTRFS_IOC_WAIT_SYNC","BT_BMC_IOCTL_SMS_ATN","CAPI_CLR_FLAGS","CAPI_GET_ERRCODE","CAPI_GET_FLAGS","CAPI_GET_MANUFACTURER","CAPI_GET_PROFILE","CAPI_GET_SERIAL","CAPI_GET_VERSION","CAPI_INSTALLED","CAPI_MANUFACTURER_CMD","CAPI_NCCI_GETUNIT","CAPI_NCCI_OPENCOUNT","CAPI_REGISTER","CAPI_SET_FLAGS","CCISS_BIG_PASSTHRU","CCISS_DEREGDISK","CCISS_GETBUSTYPES","CCISS_GETDRIVVER","CCISS_GETFIRMVER","CCISS_GETHEARTBEAT","CCISS_GETINTINFO","CCISS_GETLUNINFO","CCISS_GETNODENAME","CCISS_GETPCIINFO","CCISS_PASSTHRU","CCISS_REGNEWD","CCISS_REGNEWDISK","CCISS_RESCANDISK","CCISS_REVALIDVOLS","CCISS_SETINTINFO","CCISS_SETNODENAME","CEC_ADAP_G_CAPS","CEC_ADAP_G_CONNECTOR_INFO","CEC_ADAP_G_LOG_ADDRS","CEC_ADAP_G_PHYS_ADDR","CEC_ADAP_S_LOG_ADDRS","CEC_ADAP_S_PHYS_ADDR","CEC_DQEVENT","CEC_G_MODE","CEC_RECEIVE","CEC_S_MODE","CEC_TRANSMIT","CHIOEXCHANGE","CHIOGELEM","CHIOGPARAMS","CHIOGPICKER","CHIOGSTATUS","CHIOGVPARAMS","CHIOINITELEM","CHIOMOVE","CHIOPOSITION","CHIOSPICKER","CHIOSVOLTAG","CIOC_KERNEL_VERSION","CM_IOCGATR","CM_IOSDBGLVL","CXL_MEM_QUERY_COMMANDS","CXL_MEM_SEND_COMMAND","DELL_WMI_SMBIOS_CMD","DFL_FPGA_CHECK_EXTENSION","DFL_FPGA_FME_ERR_GET_IRQ_NUM","DFL_FPGA_FME_ERR_SET_IRQ","DFL_FPGA_FME_PORT_ASSIGN","DFL_FPGA_FME_PORT_PR","DFL_FPGA_FME_PORT_RELEASE","DFL_FPGA_GET_API_VERSION","DFL_FPGA_PORT_DMA_MAP","DFL_FPGA_PORT_DMA_UNMAP","DFL_FPGA_PORT_ERR_GET_IRQ_NUM","DFL_FPGA_PORT_ERR_SET_IRQ","DFL_FPGA_PORT_GET_INFO","DFL_FPGA_PORT_GET_REGION_INFO","DFL_FPGA_PORT_RESET","DFL_FPGA_PORT_UINT_GET_IRQ_NUM","DFL_FPGA_PORT_UINT_SET_IRQ","DMA_BUF_IOCTL_SYNC","DMA_BUF_SET_NAME","DMA_BUF_SET_NAME_A","DMA_BUF_SET_NAME_B","DMA_HEAP_IOCTL_ALLOC","DM_DEV_ARM_POLL","DM_DEV_CREATE","DM_DEV_REMOVE","DM_DEV_RENAME","DM_DEV_SET_GEOMETRY","DM_DEV_STATUS","DM_DEV_SUSPEND","DM_DEV_WAIT","DM_GET_TARGET_VERSION","DM_LIST_DEVICES","DM_LIST_VERSIONS","DM_REMOVE_ALL","DM_TABLE_CLEAR","DM_TABLE_DEPS","DM_TABLE_LOAD","DM_TABLE_STATUS","DM_TARGET_MSG","DM_VERSION","ENI_MEMDUMP","ENI_SETMULT","EVIOCGEFFECTS","EVIOCGID","EVIOCGKEYCODE","EVIOCGKEYCODE_V2","EVIOCGMASK","EVIOCGRAB","EVIOCGREP","EVIOCGVERSION","EVIOCREVOKE","EVIOCRMFF","EVIOCSCLOCKID","EVIOCSFF","EVIOCSKEYCODE","EVIOCSKEYCODE_V2","EVIOCSMASK","EVIOCSREP","EXT4_IOC32_GETRSVSZ","EXT4_IOC32_GETVERSION","EXT4_IOC32_GETVERSION_OLD","EXT4_IOC32_GROUP_EXTEND","EXT4_IOC32_SETRSVSZ","EXT4_IOC32_SETVERSION","EXT4_IOC32_SETVERSION_OLD","EXT4_IOC_ALLOC_DA_BLKS","EXT4_IOC_CHECKPOINT","EXT4_IOC_CLEAR_ES_CACHE","EXT4_IOC_GETRSVSZ","EXT4_IOC_GETSTATE","EXT4_IOC_GETVERSION","EXT4_IOC_GETVERSION_OLD","EXT4_IOC_GET_ES_CACHE","EXT4_IOC_GROUP_EXTEND","EXT4_IOC_MIGRATE","EXT4_IOC_PRECACHE_EXTENTS","EXT4_IOC_RESIZE_FS","EXT4_IOC_SETRSVSZ","EXT4_IOC_SETVERSION","EXT4_IOC_SETVERSION_OLD","EXT4_IOC_SHUTDOWN","EXT4_IOC_SWAP_BOOT","F2FS_IOC_COMMIT_ATOMIC_WRITE","F2FS_IOC_COMPRESS_FILE","F2FS_IOC_DECOMPRESS_FILE","F2FS_IOC_DEFRAGMENT","F2FS_IOC_FLUSH_DEVICE","F2FS_IOC_GARBAGE_COLLECT","F2FS_IOC_GARBAGE_COLLECT_RANGE","F2FS_IOC_GET_COMPRESS_BLOCKS","F2FS_IOC_GET_COMPRESS_OPTION","F2FS_IOC_GET_FEATURES","F2FS_IOC_GET_PIN_FILE","F2FS_IOC_MOVE_RANGE","F2FS_IOC_PRECACHE_EXTENTS","F2FS_IOC_RELEASE_COMPRESS_BLOCKS","F2FS_IOC_RELEASE_VOLATILE_WRITE","F2FS_IOC_RESERVE_COMPRESS_BLOCKS","F2FS_IOC_RESIZE_FS","F2FS_IOC_SEC_TRIM_FILE","F2FS_IOC_SET_COMPRESS_OPTION","F2FS_IOC_SET_PIN_FILE","F2FS_IOC_SHUTDOWN","F2FS_IOC_START_ATOMIC_WRITE","F2FS_IOC_START_VOLATILE_WRITE","F2FS_IOC_WRITE_CHECKPOINT","FAT_IOCTL_GET_ATTRIBUTES","FAT_IOCTL_GET_VOLUME_ID","FAT_IOCTL_SET_ATTRIBUTES","FBIOGET_VBLANK","FBIO_CURSOR","FBIO_GETCONTROL2","FBIO_RADEON_GET_MIRROR","FBIO_RADEON_SET_MIRROR","FBIO_WAITEVENT","FBIO_WAITFORVSYNC","FDCLRPRM","FDDEFPRM","FDEJECT","FDFLUSH","FDFMTBEG","FDFMTEND","FDFMTTRK","FDGETDRVPRM","FDGETDRVSTAT","FDGETDRVTYP","FDGETFDCSTAT","FDGETMAXERRS","FDGETPRM","FDMSGOFF","FDMSGON","FDPOLLDRVSTAT","FDRAWCMD","FDRESET","FDSETDRVPRM","FDSETEMSGTRESH","FDSETMAXERRS","FDSETPRM","FDTWADDLE","FDWERRORCLR","FDWERRORGET","FIBMAP","FICLONE","FICLONERANGE","FIDEDUPERANGE","FIFREEZE","FIGETBSZ","FIOASYNC","FIOCLEX","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FIOSETOWN","FITHAW","FITRIM","FSI_SCOM_CHECK","FSI_SCOM_READ","FSI_SCOM_RESET","FSI_SCOM_WRITE","FSL_HV_IOCTL_DOORBELL","FSL_HV_IOCTL_GETPROP","FSL_HV_IOCTL_MEMCPY","FSL_HV_IOCTL_PARTITION_GET_STATUS","FSL_HV_IOCTL_PARTITION_RESTART","FSL_HV_IOCTL_PARTITION_START","FSL_HV_IOCTL_PARTITION_STOP","FSL_HV_IOCTL_SETPROP","FSL_MC_SEND_MC_COMMAND","FS_IOC32_GETFLAGS","FS_IOC32_GETVERSION","FS_IOC32_SETFLAGS","FS_IOC32_SETVERSION","FS_IOC_ADD_ENCRYPTION_KEY","FS_IOC_ENABLE_VERITY","FS_IOC_FIEMAP","FS_IOC_FSGETXATTR","FS_IOC_FSSETXATTR","FS_IOC_GETFLAGS","FS_IOC_GETFSLABEL","FS_IOC_GETFSMAP","FS_IOC_GETVERSION","FS_IOC_GET_ENCRYPTION_KEY_STATUS","FS_IOC_GET_ENCRYPTION_NONCE","FS_IOC_GET_ENCRYPTION_POLICY","FS_IOC_GET_ENCRYPTION_POLICY_EX","FS_IOC_GET_ENCRYPTION_PWSALT","FS_IOC_MEASURE_VERITY","FS_IOC_READ_VERITY_METADATA","FS_IOC_REMOVE_ENCRYPTION_KEY","FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS","FS_IOC_SETFLAGS","FS_IOC_SETFSLABEL","FS_IOC_SETVERSION","FS_IOC_SET_ENCRYPTION_POLICY","FUSE_DEV_IOC_CLONE","FW_CDEV_IOC_ADD_DESCRIPTOR","FW_CDEV_IOC_ALLOCATE","FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE","FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE_ONCE","FW_CDEV_IOC_CREATE_ISO_CONTEXT","FW_CDEV_IOC_DEALLOCATE","FW_CDEV_IOC_DEALLOCATE_ISO_RESOURCE","FW_CDEV_IOC_DEALLOCATE_ISO_RESOURCE_ONCE","FW_CDEV_IOC_FLUSH_ISO","FW_CDEV_IOC_GET_CYCLE_TIMER","FW_CDEV_IOC_GET_CYCLE_TIMER2","FW_CDEV_IOC_GET_INFO","FW_CDEV_IOC_GET_SPEED","FW_CDEV_IOC_INITIATE_BUS_RESET","FW_CDEV_IOC_QUEUE_ISO","FW_CDEV_IOC_RECEIVE_PHY_PACKETS","FW_CDEV_IOC_REMOVE_DESCRIPTOR","FW_CDEV_IOC_SEND_BROADCAST_REQUEST","FW_CDEV_IOC_SEND_PHY_PACKET","FW_CDEV_IOC_SEND_REQUEST","FW_CDEV_IOC_SEND_RESPONSE","FW_CDEV_IOC_SEND_STREAM_PACKET","FW_CDEV_IOC_SET_ISO_CHANNELS","FW_CDEV_IOC_START_ISO","FW_CDEV_IOC_STOP_ISO","GIO_CMAP","GIO_FONT","GIO_FONTX","GIO_SCRNMAP","GIO_UNIMAP","GIO_UNISCRNMAP","GPIOHANDLE_GET_LINE_VALUES_IOCTL","GPIOHANDLE_SET_CONFIG_IOCTL","GPIOHANDLE_SET_LINE_VALUES_IOCTL","GPIO_GET_CHIPINFO_IOCTL","GPIO_GET_LINEEVENT_IOCTL","GPIO_GET_LINEHANDLE_IOCTL","GPIO_GET_LINEINFO_IOCTL","GPIO_GET_LINEINFO_UNWATCH_IOCTL","GPIO_GET_LINEINFO_WATCH_IOCTL","GPIO_V2_GET_LINEINFO_IOCTL","GPIO_V2_GET_LINEINFO_WATCH_IOCTL","GPIO_V2_GET_LINE_IOCTL","GPIO_V2_LINE_GET_VALUES_IOCTL","GPIO_V2_LINE_SET_CONFIG_IOCTL","GPIO_V2_LINE_SET_VALUES_IOCTL","GSMIOC_DISABLE_NET","GSMIOC_ENABLE_NET","GSMIOC_GETCONF","GSMIOC_GETFIRST","GSMIOC_SETCONF","HE_GET_REG","HIDIOCAPPLICATION","HIDIOCGCOLLECTIONINDEX","HIDIOCGCOLLECTIONINFO","HIDIOCGDEVINFO","HIDIOCGFIELDINFO","HIDIOCGFLAG","HIDIOCGRAWINFO","HIDIOCGRDESC","HIDIOCGRDESCSIZE","HIDIOCGREPORT","HIDIOCGREPORTINFO","HIDIOCGSTRING","HIDIOCGUCODE","HIDIOCGUSAGE","HIDIOCGUSAGES","HIDIOCGVERSION","HIDIOCINITREPORT","HIDIOCSFLAG","HIDIOCSREPORT","HIDIOCSUSAGE","HIDIOCSUSAGES","HPET_DPI","HPET_EPI","HPET_IE_OFF","HPET_IE_ON","HPET_INFO","HPET_IRQFREQ","I2OEVTGET","I2OEVTREG","I2OGETIOPS","I2OHRTGET","I2OHTML","I2OLCTGET","I2OPARMGET","I2OPARMSET","I2OPASSTHRU","I2OPASSTHRU32","I2OSWDEL","I2OSWDL","I2OSWUL","I2OVALIDATE","I8K_GET_FAN","I8K_GET_SPEED","I8K_SET_FAN","IDT77105_GETSTAT","IDT77105_GETSTATZ","INOTIFY_IOC_SETNEXTWD","IOCTL_MEI_CONNECT_CLIENT","IOCTL_MEI_CONNECT_CLIENT_VTAG","IOCTL_MEI_NOTIFY_GET","IOCTL_MEI_NOTIFY_SET","IOCTL_VM_SOCKETS_GET_LOCAL_CID","IOC_OPAL_ACTIVATE_LSP","IOC_OPAL_ACTIVATE_USR","IOC_OPAL_ADD_USR_TO_LR","IOC_OPAL_ENABLE_DISABLE_MBR","IOC_OPAL_ERASE_LR","IOC_OPAL_GENERIC_TABLE_RW","IOC_OPAL_LOCK_UNLOCK","IOC_OPAL_LR_SETUP","IOC_OPAL_MBR_DONE","IOC_OPAL_PSID_REVERT_TPR","IOC_OPAL_REVERT_TPR","IOC_OPAL_SAVE","IOC_OPAL_SECURE_ERASE_LR","IOC_OPAL_SET_PW","IOC_OPAL_TAKE_OWNERSHIP","IOC_OPAL_WRITE_SHADOW_MBR","IOC_PR_CLEAR","IOC_PR_PREEMPT","IOC_PR_PREEMPT_ABORT","IOC_PR_REGISTER","IOC_PR_RELEASE","IOC_PR_RESERVE","IOC_WATCH_QUEUE_SET_FILTER","IOC_WATCH_QUEUE_SET_SIZE","IPMICTL_GET_MAINTENANCE_MODE_CMD","IPMICTL_GET_MY_ADDRESS_CMD","IPMICTL_GET_MY_CHANNEL_ADDRESS_CMD","IPMICTL_GET_MY_CHANNEL_LUN_CMD","IPMICTL_GET_MY_LUN_CMD","IPMICTL_GET_TIMING_PARMS_CMD","IPMICTL_RECEIVE_MSG","IPMICTL_RECEIVE_MSG_TRUNC","IPMICTL_REGISTER_FOR_CMD","IPMICTL_REGISTER_FOR_CMD_CHANS","IPMICTL_SEND_COMMAND","IPMICTL_SEND_COMMAND_SETTIME","IPMICTL_SET_GETS_EVENTS_CMD","IPMICTL_SET_MAINTENANCE_MODE_CMD","IPMICTL_SET_MY_ADDRESS_CMD","IPMICTL_SET_MY_CHANNEL_ADDRESS_CMD","IPMICTL_SET_MY_CHANNEL_LUN_CMD","IPMICTL_SET_MY_LUN_CMD","IPMICTL_SET_TIMING_PARMS_CMD","IPMICTL_UNREGISTER_FOR_CMD","IPMICTL_UNREGISTER_FOR_CMD_CHANS","IPMI_BMC_IOCTL_CLEAR_SMS_ATN","IPMI_BMC_IOCTL_FORCE_ABORT","IPMI_BMC_IOCTL_SET_SMS_ATN","ISST_IF_GET_PHY_ID","ISST_IF_GET_PLATFORM_INFO","ISST_IF_IO_CMD","ISST_IF_MBOX_COMMAND","ISST_IF_MSR_COMMAND","IVTVFB_IOC_DMA_FRAME","JSIOCGAXES","JSIOCGAXMAP","JSIOCGBTNMAP","JSIOCGBUTTONS","JSIOCGCORR","JSIOCGVERSION","JSIOCSAXMAP","JSIOCSBTNMAP","JSIOCSCORR","KCOV_DISABLE","KCOV_ENABLE","KCOV_INIT_TRACE","KCOV_REMOTE_ENABLE","KDADDIO","KDDELIO","KDDISABIO","KDENABIO","KDGETKEYCODE","KDGETLED","KDGETMODE","KDGKBDIACR","KDGKBENT","KDGKBLED","KDGKBMETA","KDGKBMODE","KDGKBSENT","KDGKBTYPE","KDMKTONE","KDSETKEYCODE","KDSETLED","KDSETMODE","KDSIGACCEPT","KDSKBENT","KDSKBLED","KDSKBMETA","KDSKBMODE","KDSKBSENT","KIOCSOUND","KVM_ARM_SET_DEVICE_ADDR","KVM_ARM_VCPU_FINALIZE","KVM_ASSIGN_DEV_IRQ","KVM_ASSIGN_PCI_DEVICE","KVM_ASSIGN_SET_INTX_MASK","KVM_ASSIGN_SET_MSIX_ENTRY","KVM_ASSIGN_SET_MSIX_NR","KVM_CHECK_EXTENSION","KVM_CLEAR_DIRTY_LOG","KVM_CREATE_DEVICE","KVM_CREATE_IRQCHIP","KVM_CREATE_PIT","KVM_CREATE_PIT2","KVM_CREATE_VCPU","KVM_CREATE_VM","KVM_DEASSIGN_DEV_IRQ","KVM_DEASSIGN_PCI_DEVICE","KVM_DIRTY_TLB","KVM_ENABLE_CAP","KVM_GET_API_VERSION","KVM_GET_CLOCK","KVM_GET_DEVICE_ATTR","KVM_GET_DIRTY_LOG","KVM_GET_FPU","KVM_GET_IRQCHIP","KVM_GET_MP_STATE","KVM_GET_NR_MMU_PAGES","KVM_GET_ONE_REG","KVM_GET_REGS","KVM_GET_REG_LIST","KVM_GET_SREGS","KVM_GET_STATS_FD","KVM_GET_TSC_KHZ","KVM_GET_VCPU_MMAP_SIZE","KVM_HAS_DEVICE_ATTR","KVM_HYPERV_EVENTFD","KVM_INTERRUPT","KVM_IOEVENTFD","KVM_IRQFD","KVM_IRQ_LINE","KVM_IRQ_LINE_STATUS","KVM_KVMCLOCK_CTRL","KVM_MEMORY_ENCRYPT_OP","KVM_MEMORY_ENCRYPT_REG_REGION","KVM_MEMORY_ENCRYPT_UNREG_REGION","KVM_NMI","KVM_PPC_ALLOCATE_HTAB","KVM_PPC_GET_PVINFO","KVM_PPC_GET_SMMU_INFO","KVM_PPC_RESIZE_HPT_COMMIT","KVM_PPC_RESIZE_HPT_PREPARE","KVM_PPC_SVM_OFF","KVM_REGISTER_COALESCED_MMIO","KVM_REINJECT_CONTROL","KVM_RESET_DIRTY_RINGS","KVM_RUN","KVM_S390_CLEAR_RESET","KVM_S390_ENABLE_SIE","KVM_S390_GET_CMMA_BITS","KVM_S390_GET_IRQ_STATE","KVM_S390_GET_SKEYS","KVM_S390_INITIAL_RESET","KVM_S390_INTERRUPT","KVM_S390_IRQ","KVM_S390_MEM_OP","KVM_S390_NORMAL_RESET","KVM_S390_PV_COMMAND","KVM_S390_SET_CMMA_BITS","KVM_S390_SET_INITIAL_PSW","KVM_S390_SET_IRQ_STATE","KVM_S390_SET_SKEYS","KVM_S390_STORE_STATUS","KVM_S390_UCAS_MAP","KVM_S390_UCAS_UNMAP","KVM_S390_VCPU_FAULT","KVM_SET_BOOT_CPU_ID","KVM_SET_CLOCK","KVM_SET_DEVICE_ATTR","KVM_SET_FPU","KVM_SET_GSI_ROUTING","KVM_SET_GUEST_DEBUG","KVM_SET_IDENTITY_MAP_ADDR","KVM_SET_IRQCHIP","KVM_SET_MP_STATE","KVM_SET_NR_MMU_PAGES","KVM_SET_ONE_REG","KVM_SET_REGS","KVM_SET_SIGNAL_MASK","KVM_SET_SREGS","KVM_SET_TSC_KHZ","KVM_SET_TSS_ADDR","KVM_SET_USER_MEMORY_REGION","KVM_SET_VAPIC_ADDR","KVM_SIGNAL_MSI","KVM_SMI","KVM_TPR_ACCESS_REPORTING","KVM_TRANSLATE","KVM_UNREGISTER_COALESCED_MMIO","KVM_X86_GET_MCE_CAP_SUPPORTED","KVM_X86_SETUP_MCE","KVM_XEN_HVM_GET_ATTR","KVM_XEN_HVM_SET_ATTR","KVM_XEN_VCPU_GET_ATTR","KVM_XEN_VCPU_SET_ATTR","LIRC_GET_FEATURES","LIRC_GET_LENGTH","LIRC_GET_MAX_TIMEOUT","LIRC_GET_MIN_TIMEOUT","LIRC_GET_REC_MODE","LIRC_GET_REC_RESOLUTION","LIRC_GET_REC_TIMEOUT","LIRC_GET_SEND_MODE","LIRC_SET_MEASURE_CARRIER_MODE","LIRC_SET_REC_CARRIER","LIRC_SET_REC_CARRIER_RANGE","LIRC_SET_REC_MODE","LIRC_SET_REC_TIMEOUT","LIRC_SET_REC_TIMEOUT_REPORTS","LIRC_SET_SEND_CARRIER","LIRC_SET_SEND_DUTY_CYCLE","LIRC_SET_SEND_MODE","LIRC_SET_TRANSMITTER_MASK","LIRC_SET_WIDEBAND_RECEIVER","LPSETTIMEOUT_NEW","MATROXFB_GET_ALL_OUTPUTS","MATROXFB_GET_AVAILABLE_OUTPUTS","MATROXFB_GET_OUTPUT_CONNECTION","MATROXFB_GET_OUTPUT_MODE","MATROXFB_SET_OUTPUT_CONNECTION","MATROXFB_SET_OUTPUT_MODE","MEDIA_IOC_DEVICE_INFO","MEDIA_IOC_ENUM_ENTITIES","MEDIA_IOC_ENUM_LINKS","MEDIA_IOC_G_TOPOLOGY","MEDIA_IOC_SETUP_LINK","MEDIA_REQUEST_IOC_QUEUE","MEDIA_REQUEST_IOC_REINIT","MEYEIOC_SYNC","MGSL_IOCCLRMODCOUNT","MGSL_IOCGGPIO","MGSL_IOCGIF","MGSL_IOCGPARAMS","MGSL_IOCGSTATS","MGSL_IOCGTXIDLE","MGSL_IOCGXCTRL","MGSL_IOCGXSYNC","MGSL_IOCLOOPTXDONE","MGSL_IOCRXENABLE","MGSL_IOCSGPIO","MGSL_IOCSIF","MGSL_IOCSPARAMS","MGSL_IOCSTXIDLE","MGSL_IOCSXCTRL","MGSL_IOCSXSYNC","MGSL_IOCTXABORT","MGSL_IOCTXENABLE","MGSL_IOCWAITEVENT","MGSL_IOCWAITGPIO","MMTIMER_GETBITS","MMTIMER_GETCOUNTER","MMTIMER_GETFREQ","MMTIMER_GETOFFSET","MMTIMER_GETRES","MMTIMER_MMAPAVAIL","MTIOCGET","MTIOCPOS","MTIOCTOP","NBD_CLEAR_QUE","NBD_CLEAR_SOCK","NBD_DISCONNECT","NBD_DO_IT","NBD_PRINT_DEBUG","NBD_SET_BLKSIZE","NBD_SET_FLAGS","NBD_SET_SIZE","NBD_SET_SIZE_BLOCKS","NBD_SET_SOCK","NBD_SET_TIMEOUT","ND_IOCTL_ARS_CAP","ND_IOCTL_ARS_START","ND_IOCTL_ARS_STATUS","ND_IOCTL_CALL","ND_IOCTL_CLEAR_ERROR","ND_IOCTL_DIMM_FLAGS","ND_IOCTL_GET_CONFIG_DATA","ND_IOCTL_GET_CONFIG_SIZE","ND_IOCTL_SET_CONFIG_DATA","ND_IOCTL_VENDOR","NE_ADD_VCPU","NE_CREATE_VM","NE_GET_IMAGE_LOAD_INFO","NE_SET_USER_MEMORY_REGION","NE_START_ENCLAVE","NILFS_IOCTL_CHANGE_CPMODE","NILFS_IOCTL_CLEAN_SEGMENTS","NILFS_IOCTL_DELETE_CHECKPOINT","NILFS_IOCTL_GET_BDESCS","NILFS_IOCTL_GET_CPINFO","NILFS_IOCTL_GET_CPSTAT","NILFS_IOCTL_GET_SUINFO","NILFS_IOCTL_GET_SUSTAT","NILFS_IOCTL_GET_VINFO","NILFS_IOCTL_RESIZE","NILFS_IOCTL_SET_ALLOC_RANGE","NILFS_IOCTL_SET_SUINFO","NILFS_IOCTL_SYNC","NS_ADJBUFLEV","NS_GETPSTAT","NS_GET_NSTYPE","NS_GET_OWNER_UID","NS_GET_PARENT","NS_GET_USERNS","NS_SETBUFLEV","NVME_IOCTL_ADMIN64_CMD","NVME_IOCTL_ADMIN_CMD","NVME_IOCTL_ID","NVME_IOCTL_IO64_CMD","NVME_IOCTL_IO_CMD","NVME_IOCTL_RESCAN","NVME_IOCTL_RESET","NVME_IOCTL_SUBMIT_IO","NVME_IOCTL_SUBSYS_RESET","NVRAM_INIT","NVRAM_SETCKS","PACKET_CTRL_CMD","PCITEST_BAR","PCITEST_CLEAR_IRQ","PCITEST_COPY","PCITEST_GET_IRQTYPE","PCITEST_LEGACY_IRQ","PCITEST_MSI","PCITEST_MSIX","PCITEST_READ","PCITEST_SET_IRQTYPE","PCITEST_WRITE","PERF_EVENT_IOC_ID","PERF_EVENT_IOC_MODIFY_ATTRIBUTES","PERF_EVENT_IOC_PAUSE_OUTPUT","PERF_EVENT_IOC_PERIOD","PERF_EVENT_IOC_QUERY_BPF","PERF_EVENT_IOC_SET_BPF","PERF_EVENT_IOC_SET_FILTER","PHN_GETREG","PHN_GETREGS","PHN_GET_REG","PHN_GET_REGS","PHN_NOT_OH","PHN_SETREG","PHN_SETREGS","PHN_SET_REG","PHN_SET_REGS","PIO_CMAP","PIO_FONT","PIO_FONTRESET","PIO_FONTX","PIO_SCRNMAP","PIO_UNIMAP","PIO_UNIMAPCLR","PIO_UNISCRNMAP","PMU_IOC_CAN_SLEEP","PMU_IOC_GET_BACKLIGHT","PMU_IOC_GET_MODEL","PMU_IOC_GRAB_BACKLIGHT","PMU_IOC_HAS_ADB","PMU_IOC_SET_BACKLIGHT","PMU_IOC_SLEEP","PPCLAIM","PPCLRIRQ","PPDATADIR","PPEXCL","PPFCONTROL","PPGETFLAGS","PPGETMODE","PPGETMODES","PPGETPHASE","PPGETTIME","PPNEGOT","PPPIOCATTACH","PPPIOCATTCHAN","PPPIOCBRIDGECHAN","PPPIOCCONNECT","PPPIOCDETACH","PPPIOCDISCONN","PPPIOCGASYNCMAP","PPPIOCGCHAN","PPPIOCGDEBUG","PPPIOCGFLAGS","PPPIOCGIDLE","PPPIOCGIDLE32","PPPIOCGIDLE64","PPPIOCGL2TPSTATS","PPPIOCGMRU","PPPIOCGNPMODE","PPPIOCGRASYNCMAP","PPPIOCGUNIT","PPPIOCGXASYNCMAP","PPPIOCNEWUNIT","PPPIOCSACTIVE","PPPIOCSASYNCMAP","PPPIOCSCOMPRESS","PPPIOCSDEBUG","PPPIOCSFLAGS","PPPIOCSMAXCID","PPPIOCSMRRU","PPPIOCSMRU","PPPIOCSNPMODE","PPPIOCSPASS","PPPIOCSRASYNCMAP","PPPIOCSXASYNCMAP","PPPIOCUNBRIDGECHAN","PPPIOCXFERUNIT","PPPOEIOCDFWD","PPPOEIOCSFWD","PPRCONTROL","PPRDATA","PPRELEASE","PPRSTATUS","PPSETFLAGS","PPSETMODE","PPSETPHASE","PPSETTIME","PPS_FETCH","PPS_GETCAP","PPS_GETPARAMS","PPS_KC_BIND","PPS_SETPARAMS","PPWCONTROL","PPWCTLONIRQ","PPWDATA","PPYIELD","PTP_CLOCK_GETCAPS","PTP_CLOCK_GETCAPS2","PTP_ENABLE_PPS","PTP_ENABLE_PPS2","PTP_EXTTS_REQUEST","PTP_EXTTS_REQUEST2","PTP_PEROUT_REQUEST","PTP_PEROUT_REQUEST2","PTP_PIN_GETFUNC","PTP_PIN_GETFUNC2","PTP_PIN_SETFUNC","PTP_PIN_SETFUNC2","PTP_SYS_OFFSET","PTP_SYS_OFFSET2","PTP_SYS_OFFSET_EXTENDED","PTP_SYS_OFFSET_EXTENDED2","PTP_SYS_OFFSET_PRECISE","PTP_SYS_OFFSET_PRECISE2","REISERFS_IOC_UNPACK","RFKILL_IOCTL_NOINPUT","RIO_ALLOC_DMA","RIO_CM_CHAN_ACCEPT","RIO_CM_CHAN_BIND","RIO_CM_CHAN_CLOSE","RIO_CM_CHAN_CONNECT","RIO_CM_CHAN_CREATE","RIO_CM_CHAN_LISTEN","RIO_CM_CHAN_RECEIVE","RIO_CM_CHAN_SEND","RIO_CM_EP_GET_LIST","RIO_CM_EP_GET_LIST_SIZE","RIO_CM_MPORT_GET_LIST","RIO_DEV_ADD","RIO_DEV_DEL","RIO_DISABLE_DOORBELL_RANGE","RIO_DISABLE_PORTWRITE_RANGE","RIO_ENABLE_DOORBELL_RANGE","RIO_ENABLE_PORTWRITE_RANGE","RIO_FREE_DMA","RIO_GET_EVENT_MASK","RIO_MAP_INBOUND","RIO_MAP_OUTBOUND","RIO_MPORT_GET_PROPERTIES","RIO_MPORT_MAINT_COMPTAG_SET","RIO_MPORT_MAINT_HDID_SET","RIO_MPORT_MAINT_PORT_IDX_GET","RIO_MPORT_MAINT_READ_LOCAL","RIO_MPORT_MAINT_READ_REMOTE","RIO_MPORT_MAINT_WRITE_LOCAL","RIO_MPORT_MAINT_WRITE_REMOTE","RIO_SET_EVENT_MASK","RIO_TRANSFER","RIO_UNMAP_INBOUND","RIO_UNMAP_OUTBOUND","RIO_WAIT_FOR_ASYNC","RNDADDENTROPY","RNDADDTOENTCNT","RNDCLEARPOOL","RNDGETENTCNT","RNDGETPOOL","RNDRESEEDCRNG","RNDZAPENTCNT","RPMSG_CREATE_EPT_IOCTL","RPMSG_DESTROY_EPT_IOCTL","RPROC_GET_SHUTDOWN_ON_RELEASE","RPROC_SET_SHUTDOWN_ON_RELEASE","RTC_AIE_OFF","RTC_AIE_ON","RTC_ALM_READ","RTC_ALM_SET","RTC_EPOCH_READ","RTC_EPOCH_SET","RTC_IRQP_READ","RTC_IRQP_SET","RTC_PIE_OFF","RTC_PIE_ON","RTC_PLL_GET","RTC_PLL_SET","RTC_RD_TIME","RTC_SET_TIME","RTC_UIE_OFF","RTC_UIE_ON","RTC_VL_CLR","RTC_VL_READ","RTC_WIE_OFF","RTC_WIE_ON","RTC_WKALM_RD","RTC_WKALM_SET","SCIF_ACCEPTREG","SCIF_ACCEPTREQ","SCIF_BIND","SCIF_CONNECT","SCIF_FENCE_MARK","SCIF_FENCE_SIGNAL","SCIF_FENCE_WAIT","SCIF_GET_NODEIDS","SCIF_LISTEN","SCIF_READFROM","SCIF_RECV","SCIF_REG","SCIF_SEND","SCIF_UNREG","SCIF_VREADFROM","SCIF_VWRITETO","SCIF_WRITETO","SEV_ISSUE_CMD","SIOCADDDLCI","SIOCADDMULTI","SIOCADDRT","SIOCATMARK","SIOCDARP","SIOCDELDLCI","SIOCDELMULTI","SIOCDELRT","SIOCDEVPRIVATE","SIOCDIFADDR","SIOCDRARP","SIOCGARP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGPGRP","SIOCGRARP","SIOCGSTAMP","SIOCGSTAMPNS_NEW","SIOCGSTAMP_NEW","SIOCMKCLIP","SIOCPROTOPRIVATE","SIOCRTMSG","SIOCSARP","SIOCSIFADDR","SIOCSIFATMTCP","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNAME","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSPGRP","SIOCSRARP","SIOGIFINDEX","SNAPSHOT_ALLOC_SWAP_PAGE","SNAPSHOT_ATOMIC_RESTORE","SNAPSHOT_AVAIL_SWAP_SIZE","SNAPSHOT_CREATE_IMAGE","SNAPSHOT_FREE","SNAPSHOT_FREEZE","SNAPSHOT_FREE_SWAP_PAGES","SNAPSHOT_GET_IMAGE_SIZE","SNAPSHOT_PLATFORM_SUPPORT","SNAPSHOT_POWER_OFF","SNAPSHOT_PREF_IMAGE_SIZE","SNAPSHOT_S2RAM","SNAPSHOT_SET_SWAP_AREA","SNAPSHOT_UNFREEZE","SONET_CLRDIAG","SONET_GETDIAG","SONET_GETFRAMING","SONET_GETFRSENSE","SONET_GETSTAT","SONET_GETSTATZ","SONET_SETDIAG","SONET_SETFRAMING","SONYPI_IOCGBAT1CAP","SONYPI_IOCGBAT1REM","SONYPI_IOCGBAT2CAP","SONYPI_IOCGBAT2REM","SONYPI_IOCGBATFLAGS","SONYPI_IOCGBLUE","SONYPI_IOCGBRT","SONYPI_IOCGFAN","SONYPI_IOCGTEMP","SONYPI_IOCSBLUE","SONYPI_IOCSBRT","SONYPI_IOCSFAN","SPIOCSTYPE","STP_POLICY_ID_GET","STP_POLICY_ID_SET","STP_SET_OPTIONS","SWITCHTEC_IOCTL_EVENT_CTL","SWITCHTEC_IOCTL_EVENT_SUMMARY","SWITCHTEC_IOCTL_EVENT_SUMMARY_LEGACY","SWITCHTEC_IOCTL_FLASH_INFO","SWITCHTEC_IOCTL_FLASH_PART_INFO","SWITCHTEC_IOCTL_PFF_TO_PORT","SWITCHTEC_IOCTL_PORT_TO_PFF","SYNC_IOC_FILE_INFO","SYNC_IOC_MERGE","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TEE_IOC_CANCEL","TEE_IOC_CLOSE_SESSION","TEE_IOC_INVOKE","TEE_IOC_OPEN_SESSION","TEE_IOC_SHM_ALLOC","TEE_IOC_SHM_REGISTER","TEE_IOC_SUPPL_RECV","TEE_IOC_SUPPL_SEND","TEE_IOC_VERSION","TFD_IOC_SET_TICKS","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TOSHIBA_ACPI_SCI","TOSH_SMM","TUNATTACHFILTER","TUNDETACHFILTER","TUNGETDEVNETNS","TUNGETFEATURES","TUNGETFILTER","TUNGETIFF","TUNGETSNDBUF","TUNGETVNETBE","TUNGETVNETHDRSZ","TUNGETVNETLE","TUNSETCARRIER","TUNSETDEBUG","TUNSETFILTEREBPF","TUNSETGROUP","TUNSETIFF","TUNSETIFINDEX","TUNSETLINK","TUNSETNOCSUM","TUNSETOFFLOAD","TUNSETOWNER","TUNSETPERSIST","TUNSETQUEUE","TUNSETSNDBUF","TUNSETSTEERINGEBPF","TUNSETTXFILTER","TUNSETVNETBE","TUNSETVNETHDRSZ","TUNSETVNETLE","UDF_GETEABLOCK","UDF_GETEASIZE","UDF_GETVOLIDENT","UDF_RELOCATE_BLOCKS","UDMABUF_CREATE","UDMABUF_CREATE_LIST","UFFDIO_API","UFFDIO_CONTINUE","UFFDIO_COPY","UFFDIO_REGISTER","UFFDIO_UNREGISTER","UFFDIO_WAKE","UFFDIO_WRITEPROTECT","UFFDIO_ZEROPAGE","UI_ABS_SETUP","UI_BEGIN_FF_ERASE","UI_BEGIN_FF_UPLOAD","UI_DEV_CREATE","UI_DEV_DESTROY","UI_DEV_SETUP","UI_END_FF_ERASE","UI_END_FF_UPLOAD","UI_GET_VERSION","UI_SET_ABSBIT","UI_SET_EVBIT","UI_SET_FFBIT","UI_SET_KEYBIT","UI_SET_LEDBIT","UI_SET_MSCBIT","UI_SET_PHYS","UI_SET_PROPBIT","UI_SET_RELBIT","UI_SET_SNDBIT","UI_SET_SWBIT","USBDEVFS_ALLOC_STREAMS","USBDEVFS_ALLOW_SUSPEND","USBDEVFS_BULK","USBDEVFS_CLAIMINTERFACE","USBDEVFS_CLAIM_PORT","USBDEVFS_CLEAR_HALT","USBDEVFS_CONNECT","USBDEVFS_CONNECTINFO","USBDEVFS_CONTROL","USBDEVFS_DISCARDURB","USBDEVFS_DISCONNECT","USBDEVFS_DISCONNECT_CLAIM","USBDEVFS_DISCSIGNAL","USBDEVFS_DROP_PRIVILEGES","USBDEVFS_FORBID_SUSPEND","USBDEVFS_FREE_STREAMS","USBDEVFS_GETDRIVER","USBDEVFS_GET_CAPABILITIES","USBDEVFS_GET_SPEED","USBDEVFS_HUB_PORTINFO","USBDEVFS_IOCTL","USBDEVFS_REAPURB","USBDEVFS_REAPURB32","USBDEVFS_REAPURBNDELAY","USBDEVFS_REAPURBNDELAY32","USBDEVFS_RELEASEINTERFACE","USBDEVFS_RELEASE_PORT","USBDEVFS_RESET","USBDEVFS_RESETEP","USBDEVFS_SETCONFIGURATION","USBDEVFS_SETINTERFACE","USBDEVFS_SUBMITURB","USBDEVFS_WAIT_FOR_RESUME","UVCIOC_CTRL_MAP","UVCIOC_CTRL_QUERY","VBG_IOCTL_ACQUIRE_GUEST_CAPABILITIES","VBG_IOCTL_CHANGE_FILTER_MASK","VBG_IOCTL_CHANGE_GUEST_CAPABILITIES","VBG_IOCTL_CHECK_BALLOON","VBG_IOCTL_DRIVER_VERSION_INFO","VBG_IOCTL_HGCM_CONNECT","VBG_IOCTL_HGCM_DISCONNECT","VBG_IOCTL_INTERRUPT_ALL_WAIT_FOR_EVENTS","VBG_IOCTL_VMMDEV_REQUEST_BIG","VBG_IOCTL_WAIT_FOR_EVENTS","VBG_IOCTL_WRITE_CORE_DUMP","VDUSE_CREATE_DEV","VDUSE_DESTROY_DEV","VDUSE_DEV_GET_FEATURES","VDUSE_DEV_INJECT_CONFIG_IRQ","VDUSE_DEV_SET_CONFIG","VDUSE_GET_API_VERSION","VDUSE_IOTLB_GET_FD","VDUSE_SET_API_VERSION","VDUSE_VQ_GET_INFO","VDUSE_VQ_INJECT_IRQ","VDUSE_VQ_SETUP","VDUSE_VQ_SETUP_KICKFD","VFAT_IOCTL_READDIR_BOTH","VFAT_IOCTL_READDIR_SHORT","VFIO_CHECK_EXTENSION","VFIO_DEVICE_FEATURE","VFIO_DEVICE_GET_GFX_DMABUF","VFIO_DEVICE_GET_INFO","VFIO_DEVICE_GET_IRQ_INFO","VFIO_DEVICE_GET_PCI_HOT_RESET_INFO","VFIO_DEVICE_GET_REGION_INFO","VFIO_DEVICE_IOEVENTFD","VFIO_DEVICE_PCI_HOT_RESET","VFIO_DEVICE_QUERY_GFX_PLANE","VFIO_DEVICE_RESET","VFIO_DEVICE_SET_IRQS","VFIO_EEH_PE_OP","VFIO_GET_API_VERSION","VFIO_GROUP_GET_DEVICE_FD","VFIO_GROUP_GET_STATUS","VFIO_GROUP_SET_CONTAINER","VFIO_GROUP_UNSET_CONTAINER","VFIO_IOMMU_DIRTY_PAGES","VFIO_IOMMU_DISABLE","VFIO_IOMMU_ENABLE","VFIO_IOMMU_GET_INFO","VFIO_IOMMU_MAP_DMA","VFIO_IOMMU_SPAPR_REGISTER_MEMORY","VFIO_IOMMU_SPAPR_TCE_CREATE","VFIO_IOMMU_SPAPR_TCE_GET_INFO","VFIO_IOMMU_SPAPR_TCE_REMOVE","VFIO_IOMMU_SPAPR_UNREGISTER_MEMORY","VFIO_IOMMU_UNMAP_DMA","VFIO_SET_IOMMU","VHOST_GET_BACKEND_FEATURES","VHOST_GET_FEATURES","VHOST_GET_VRING_BASE","VHOST_GET_VRING_BUSYLOOP_TIMEOUT","VHOST_GET_VRING_ENDIAN","VHOST_NET_SET_BACKEND","VHOST_RESET_OWNER","VHOST_SCSI_CLEAR_ENDPOINT","VHOST_SCSI_GET_ABI_VERSION","VHOST_SCSI_GET_EVENTS_MISSED","VHOST_SCSI_SET_ENDPOINT","VHOST_SCSI_SET_EVENTS_MISSED","VHOST_SET_BACKEND_FEATURES","VHOST_SET_FEATURES","VHOST_SET_LOG_BASE","VHOST_SET_LOG_FD","VHOST_SET_MEM_TABLE","VHOST_SET_OWNER","VHOST_SET_VRING_ADDR","VHOST_SET_VRING_BASE","VHOST_SET_VRING_BUSYLOOP_TIMEOUT","VHOST_SET_VRING_CALL","VHOST_SET_VRING_ENDIAN","VHOST_SET_VRING_ERR","VHOST_SET_VRING_KICK","VHOST_SET_VRING_NUM","VHOST_VDPA_GET_CONFIG","VHOST_VDPA_GET_DEVICE_ID","VHOST_VDPA_GET_IOVA_RANGE","VHOST_VDPA_GET_STATUS","VHOST_VDPA_GET_VRING_NUM","VHOST_VDPA_SET_CONFIG","VHOST_VDPA_SET_CONFIG_CALL","VHOST_VDPA_SET_STATUS","VHOST_VDPA_SET_VRING_ENABLE","VHOST_VSOCK_SET_GUEST_CID","VHOST_VSOCK_SET_RUNNING","VIDIOC_AM437X_CCDC_CFG","VIDIOC_CREATE_BUFS","VIDIOC_CROPCAP","VIDIOC_DBG_G_CHIP_INFO","VIDIOC_DBG_G_REGISTER","VIDIOC_DBG_S_REGISTER","VIDIOC_DECODER_CMD","VIDIOC_DQBUF","VIDIOC_DQEVENT","VIDIOC_DV_TIMINGS_CAP","VIDIOC_ENCODER_CMD","VIDIOC_ENUMAUDIO","VIDIOC_ENUMAUDOUT","VIDIOC_ENUMINPUT","VIDIOC_ENUMOUTPUT","VIDIOC_ENUMSTD","VIDIOC_ENUM_DV_TIMINGS","VIDIOC_ENUM_FMT","VIDIOC_ENUM_FRAMEINTERVALS","VIDIOC_ENUM_FRAMESIZES","VIDIOC_ENUM_FREQ_BANDS","VIDIOC_EXPBUF","VIDIOC_G_AUDIO","VIDIOC_G_AUDOUT","VIDIOC_G_CROP","VIDIOC_G_CTRL","VIDIOC_G_DV_TIMINGS","VIDIOC_G_EDID","VIDIOC_G_ENC_INDEX","VIDIOC_G_EXT_CTRLS","VIDIOC_G_FBUF","VIDIOC_G_FMT","VIDIOC_G_FREQUENCY","VIDIOC_G_INPUT","VIDIOC_G_JPEGCOMP","VIDIOC_G_MODULATOR","VIDIOC_G_OUTPUT","VIDIOC_G_PARM","VIDIOC_G_PRIORITY","VIDIOC_G_SELECTION","VIDIOC_G_SLICED_VBI_CAP","VIDIOC_G_STD","VIDIOC_G_TUNER","VIDIOC_LOG_STATUS","VIDIOC_OMAP3ISP_AEWB_CFG","VIDIOC_OMAP3ISP_AF_CFG","VIDIOC_OMAP3ISP_CCDC_CFG","VIDIOC_OMAP3ISP_HIST_CFG","VIDIOC_OMAP3ISP_PRV_CFG","VIDIOC_OMAP3ISP_STAT_EN","VIDIOC_OMAP3ISP_STAT_REQ","VIDIOC_OVERLAY","VIDIOC_PREPARE_BUF","VIDIOC_QBUF","VIDIOC_QUERYBUF","VIDIOC_QUERYCAP","VIDIOC_QUERYCTRL","VIDIOC_QUERYMENU","VIDIOC_QUERYSTD","VIDIOC_QUERY_DV_TIMINGS","VIDIOC_QUERY_EXT_CTRL","VIDIOC_REQBUFS","VIDIOC_STREAMOFF","VIDIOC_STREAMON","VIDIOC_SUBDEV_DV_TIMINGS_CAP","VIDIOC_SUBDEV_ENUMSTD","VIDIOC_SUBDEV_ENUM_DV_TIMINGS","VIDIOC_SUBDEV_ENUM_FRAME_INTERVAL","VIDIOC_SUBDEV_ENUM_FRAME_SIZE","VIDIOC_SUBDEV_ENUM_MBUS_CODE","VIDIOC_SUBDEV_G_CROP","VIDIOC_SUBDEV_G_DV_TIMINGS","VIDIOC_SUBDEV_G_EDID","VIDIOC_SUBDEV_G_FMT","VIDIOC_SUBDEV_G_FRAME_INTERVAL","VIDIOC_SUBDEV_G_SELECTION","VIDIOC_SUBDEV_G_STD","VIDIOC_SUBDEV_QUERYCAP","VIDIOC_SUBDEV_QUERYSTD","VIDIOC_SUBDEV_QUERY_DV_TIMINGS","VIDIOC_SUBDEV_S_CROP","VIDIOC_SUBDEV_S_DV_TIMINGS","VIDIOC_SUBDEV_S_EDID","VIDIOC_SUBDEV_S_FMT","VIDIOC_SUBDEV_S_FRAME_INTERVAL","VIDIOC_SUBDEV_S_SELECTION","VIDIOC_SUBDEV_S_STD","VIDIOC_SUBSCRIBE_EVENT","VIDIOC_S_AUDIO","VIDIOC_S_AUDOUT","VIDIOC_S_CROP","VIDIOC_S_CTRL","VIDIOC_S_DV_TIMINGS","VIDIOC_S_EDID","VIDIOC_S_EXT_CTRLS","VIDIOC_S_FBUF","VIDIOC_S_FMT","VIDIOC_S_FREQUENCY","VIDIOC_S_HW_FREQ_SEEK","VIDIOC_S_INPUT","VIDIOC_S_JPEGCOMP","VIDIOC_S_MODULATOR","VIDIOC_S_OUTPUT","VIDIOC_S_PARM","VIDIOC_S_PRIORITY","VIDIOC_S_SELECTION","VIDIOC_S_STD","VIDIOC_S_TUNER","VIDIOC_TRY_DECODER_CMD","VIDIOC_TRY_ENCODER_CMD","VIDIOC_TRY_EXT_CTRLS","VIDIOC_TRY_FMT","VIDIOC_UNSUBSCRIBE_EVENT","VTPM_PROXY_IOC_NEW_DEV","VT_ACTIVATE","VT_DISALLOCATE","VT_GETMODE","VT_GETSTATE","VT_OPENQRY","VT_RELDISP","VT_RESIZE","VT_RESIZEX","VT_SETMODE","VT_WAITACTIVE","WDIOC_GETBOOTSTATUS","WDIOC_GETPRETIMEOUT","WDIOC_GETSTATUS","WDIOC_GETSUPPORT","WDIOC_GETTEMP","WDIOC_GETTIMELEFT","WDIOC_GETTIMEOUT","WDIOC_KEEPALIVE","WDIOC_SETOPTIONS","WDIOC_SETPRETIMEOUT","WDIOC_SETTIMEOUT","ZATM_GETPOOL","ZATM_GETPOOLZ","ZATM_SETPOOL","FD_CLR","FD_ISSET","FD_SET","FD_ZERO","SIG_DFL","sig_ign"],"q":[[0,"linux_raw_sys"],[7,"linux_raw_sys::ctypes"],[29,"linux_raw_sys::elf"],[202,"linux_raw_sys::errno"],[335,"linux_raw_sys::general"],[3677,"linux_raw_sys::ioctl"],[5268,"linux_raw_sys::select_macros"],[5272,"linux_raw_sys::signal_macros"]],"d":["","The ELF ABI. 🧝","","","","","","","","","","","","","","","","","","","","","Equivalent to C’s <code>void</code> type when used as a pointer.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeust doesn’t currently permit us to use <code>transmute</code> to …"],"i":[0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,9,9,144,145,146,147,143,10,7,8,9,144,145,146,147,143,10,7,8,9,7,8,9,8,7,7,8,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,146,147,143,10,7,8,9,144,145,146,147,143,10,7,8,9,145,145,145,145,145,145,145,145,10,10,10,146,146,146,146,146,146,144,145,146,147,143,10,7,8,9,144,145,146,147,143,10,7,8,9,10,144,145,146,147,143,10,7,8,9,147,147,147,147,147,147,147,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108,108,108,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,109,109,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,75,116,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,100,0,148,32,34,128,35,36,44,79,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,0,0,0,0,0,100,0,0,0,69,115,115,115,74,78,73,105,105,74,72,70,71,73,72,78,114,70,66,117,115,65,67,68,71,114,116,76,114,117,77,114,114,114,66,67,68,68,66,74,66,117,114,115,72,65,67,68,70,68,88,93,87,12,12,12,12,37,37,105,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,131,131,40,81,82,83,85,81,82,83,85,81,82,83,85,82,83,81,82,83,85,81,82,83,85,81,82,83,85,82,83,0,0,0,62,62,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,0,16,0,105,30,32,130,96,132,132,132,132,132,21,23,29,16,12,112,129,40,38,40,96,42,20,91,131,105,0,16,48,108,109,110,87,29,47,62,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,0,102,103,104,102,103,104,47,17,88,93,0,0,0,30,32,0,28,30,32,44,62,88,0,0,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,128,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,70,71,72,73,74,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,118,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,90,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,43,43,0,46,0,16,16,16,108,109,110,112,129,20,22,24,0,0,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,93,95,86,86,0,49,52,56,57,49,52,56,57,0,0,0,0,148,148,35,36,0,26,27,26,27,26,27,26,27,26,27,39,130,90,94,96,105,105,0,46,46,105,21,23,99,130,30,32,41,0,0,39,28,31,95,96,97,98,99,0,130,16,12,105,45,41,41,42,42,0,118,62,16,20,22,24,19,25,62,33,33,0,37,119,0,95,97,98,99,148,31,128,148,105,118,35,118,40,118,129,87,92,129,87,92,87,92,28,47,60,61,60,61,0,0,0,0,23,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,63,107,63,107,63,107,63,107,105,105,16,16,105,105,105,105,105,105,62,62,105,76,76,76,106,0,0,77,77,77,0,0,0,0,0,0,0,0,0,0,0,113,113,31,0,96,38,38,129,38,129,64,64,64,100,101,100,100,100,100,101,100,100,101,100,101,100,101,100,101,100,101,100,100,101,100,101,100,101,100,101,62,62,0,39,91,94,0,0,0,36,40,36,0,0,16,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,0,0,0,0,62,90,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,48,51,54,79,48,50,51,53,54,55,79,50,53,55,25,34,128,148,16,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,128,35,36,37,38,39,40,129,41,42,43,44,45,46,130,47,131,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,132,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,58,58,34,44,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,36,0,37,111,111,18,44,19,30,32,111,0,0,0,0,130,0,84,84,84,84,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[[]],[[]],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6,6],[6,6],[6,6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[10,11],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12],[[12,13],14],[12],[[12,13],14],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[16,[15]]],[[16,[15]]]],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],0,[[[16,[120]],[16,[120]]],121],0,[105,122],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[16,[123]]]],[[],[[12,[123]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[[16,[124]],[16,[124]]],125],[[48,48],125],[[108,108],125],[[109,109],125],[[110,110],125],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[16,[126]],2],127],[[12,2],127],[[17,2],127],[[18,2],127],[[19,2],127],[[20,2],127],[[21,2],127],[[22,2],127],[[23,2],127],[[24,2],127],[[25,2],127],[[26,2],127],[[27,2],127],[[28,2],127],[[29,2],127],[[30,2],127],[[31,2],127],[[32,2],127],[[128,2],127],[[37,2],127],[[38,2],127],[[39,2],127],[[40,2],127],[[129,2],127],[[41,2],127],[[42,2],127],[[43,2],127],[[44,2],127],[[45,2],127],[[46,2],127],[[130,2],127],[[47,2],127],[[131,2],127],[[48,2],127],[[49,2],127],[[50,2],127],[[51,2],127],[[52,2],127],[[53,2],127],[[54,2],127],[[55,2],127],[[56,2],127],[[57,2],127],[[58,2],127],[[59,2],127],[[60,2],127],[[61,2],127],[[62,2],127],[[63,2],127],[[64,2],127],[[65,2],127],[[68,2],127],[[70,2],127],[[71,2],127],[[72,2],127],[[73,2],127],[[74,2],127],[[78,2],127],[[79,2],127],[[80,2],127],[[81,2],127],[[82,2],127],[[83,2],127],[[84,2],127],[[85,2],127],[[86,2],127],[[89,2],127],[[90,2],127],[[91,2],127],[[92,2],127],[[93,2],127],[[94,2],127],[[95,2],127],[[96,2],127],[[97,2],127],[[98,2],127],[[99,2],127],[[132,2],127],[[100,2],127],[[101,2],127],[[102,2],127],[[103,2],127],[[104,2],127],[[105,2],127],[[106,2],127],[[107,2],127],[[108,2],127],[[109,2],127],[[110,2],127],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[16,[[0,[[133,[[14,[6]]]],[134,[[14,[6]]]]]]]],13,6],135],[[[16,[[0,[[133,[[14,[6]]]],[134,[[14,[6]]]]]]]],13],125],[[[16,[136]],137]],[[108,137]],[[109,137]],[[110,137]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[105,122],0,0,0,[105,122],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],16],[[],12],[[122,122,122,122,122,122,122],[[16,[[138,[6]]]]]],0,0,0,0,0,0,0,0,[[[16,[139]],[16,[139]]],[[140,[121]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[105,122],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[105,122],[105,122],[[[16,[[0,[[133,[[14,[6]]]],[134,[[14,[6]]]]]]]],13,6,135]],[[[16,[[0,[[133,[[14,[6]]]],[134,[[14,[6]]]]]]]],13,125]],[[105,122]],[[105,122]],[[105,122]],[[105,122]],[[105,122]],[[105,122]],0,0,[[105,122]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[105,122],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[141,17]],[[141,17],125],[[141,17]],[17],0,[[],142]],"c":[],"p":[[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"TypeId"],[15,"u8"],[3,"Elf_Dyn"],[19,"Elf_Dyn_Union"],[3,"Elf_auxv_t"],[3,"Elf_Rela"],[15,"u32"],[3,"__IncompleteArrayField"],[15,"usize"],[15,"slice"],[8,"Clone"],[3,"__BindgenBitfieldUnit"],[3,"__kernel_fd_set"],[3,"__kernel_fsid_t"],[3,"__user_cap_header_struct"],[3,"__user_cap_data_struct"],[3,"vfs_cap_data"],[3,"vfs_cap_data__bindgen_ty_1"],[3,"vfs_ns_cap_data"],[3,"vfs_ns_cap_data__bindgen_ty_1"],[3,"f_owner_ex"],[3,"flock"],[3,"flock64"],[3,"open_how"],[3,"epoll_event"],[3,"fscrypt_policy_v1"],[3,"fscrypt_key"],[3,"fscrypt_policy_v2"],[3,"fscrypt_get_policy_ex_arg"],[3,"fscrypt_key_specifier"],[3,"fscrypt_remove_key_arg"],[3,"fscrypt_get_key_status_arg"],[3,"mount_attr"],[3,"file_clone_range"],[3,"fstrim_range"],[3,"file_dedupe_range_info"],[3,"files_stat_struct"],[3,"inodes_stat_t"],[3,"fsxattr"],[3,"futex_waitv"],[3,"robust_list"],[3,"robust_list_head"],[3,"pollfd"],[3,"__kernel_timespec"],[3,"__kernel_itimerspec"],[3,"__kernel_old_timeval"],[3,"__kernel_old_timespec"],[3,"__kernel_old_itimerval"],[3,"__kernel_sock_timeval"],[3,"timespec"],[3,"timeval"],[3,"itimerspec"],[3,"itimerval"],[3,"timezone"],[3,"rusage"],[3,"rlimit"],[3,"rlimit64"],[3,"clone_args"],[3,"sigaction"],[3,"sigaltstack"],[3,"__sifields__bindgen_ty_1"],[3,"__sifields__bindgen_ty_2"],[3,"__sifields__bindgen_ty_3"],[3,"__sifields__bindgen_ty_4"],[3,"__sifields__bindgen_ty_5"],[3,"__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],[3,"__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],[3,"__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],[3,"__sifields__bindgen_ty_6"],[3,"__sifields__bindgen_ty_7"],[3,"siginfo"],[3,"siginfo__bindgen_ty_1__bindgen_ty_1"],[3,"sigevent"],[3,"sigevent__bindgen_ty_1__bindgen_ty_1"],[3,"statx_timestamp"],[3,"statx"],[3,"termios"],[3,"termios2"],[3,"ktermios"],[3,"winsize"],[3,"termio"],[3,"iovec"],[3,"uffd_msg"],[3,"uffd_msg__bindgen_ty_1__bindgen_ty_1"],[3,"uffd_msg__bindgen_ty_1__bindgen_ty_2"],[3,"uffd_msg__bindgen_ty_1__bindgen_ty_3"],[3,"uffd_msg__bindgen_ty_1__bindgen_ty_4"],[3,"uffd_msg__bindgen_ty_1__bindgen_ty_5"],[3,"uffdio_api"],[3,"uffdio_range"],[3,"uffdio_register"],[3,"uffdio_copy"],[3,"uffdio_zeropage"],[3,"uffdio_writeprotect"],[3,"uffdio_continue"],[3,"stat"],[3,"__old_kernel_stat"],[3,"statfs"],[3,"statfs64"],[3,"compat_statfs64"],[3,"user_desc"],[3,"kernel_sigset_t"],[3,"kernel_sigaction"],[4,"fsconfig_command"],[4,"membarrier_cmd"],[4,"membarrier_cmd_flag"],[19,"fscrypt_get_policy_ex_arg__bindgen_ty_1"],[19,"fscrypt_key_specifier__bindgen_ty_1"],[19,"sigval"],[19,"__sifields"],[19,"__sifields__bindgen_ty_5__bindgen_ty_1"],[19,"siginfo__bindgen_ty_1"],[19,"sigevent__bindgen_ty_1"],[19,"uffd_msg__bindgen_ty_1"],[19,"uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],[8,"Ord"],[4,"Ordering"],[6,"c_uint"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[6,"Result"],[3,"fscrypt_provisioning_key_payload"],[3,"file_dedupe_range"],[3,"inotify_event"],[3,"rand_pool_info"],[3,"linux_dirent64"],[8,"AsRef"],[8,"AsMut"],[15,"u64"],[8,"Hash"],[8,"Hasher"],[15,"array"],[8,"PartialOrd"],[4,"Option"],[6,"c_int"],[6,"__kernel_sighandler_t"],[3,"Elf_Verdaux"],[3,"Elf_Ehdr"],[3,"Elf_Phdr"],[3,"Elf_Sym"],[3,"Elf_Verdef"],[3,"fscrypt_add_key_arg"]]},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":"DDDAAAMMMAAFFFFFFAFFFFFFMMMMMMAAAAFFFFAAAAASDDDDDDRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLFLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDDIDLLLLLLMMLLLLALLLLLLLMLMLLLLLLMKLLLLLLLLLLLLLLLRDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLFFLLLLLLLLLLLLLLLLLLLDSGLLLLLLMMLLLLNDDDNNNNENNDEEDLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMAADSSSDDDLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLFMLLLLLLLLLLLLLLLLMFLLLMMMMMMLLLFLMLLLLLLLLLLLLLLLLMMMMMMDLLLLLLLLLLLFLMLLMLLLLMMAAAAADDDDDDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLDMLLLLLLLLLLLLLLLMLLLLLLFFFFFFFOAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLNDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKKOOODDDLLLLLLLLLLLLLFLLLLLLLLLLLLMMMFFFFFFFFFFFFFFFFFFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLNDDDDDNELLLLLLLLLLLLLLLLLLLLLLFLFLMMLLLLLLLLLLMMLLLLLLLLLLLLLMMLLLLLLLMMLMMFLFLAMMLLLLLLLLLLLLLLLLLLLNNSSNNDDETGDDTGDENDLMMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLFMLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLMFFFMMMMMMMLFFFFFFMLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMMSSSQIDIKLKKLLLKLLLKKLKLLLLKLLKLKKKLKKLKLLLLAA","n":["Memchr","Memchr2","Memchr3","arch","cow","ext","it","it","it","macros","memchr","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","needle1","needle1","needle1","needle2","needle2","needle3","vector","all","generic","x86_64","is_equal","is_equal_raw","is_prefix","is_suffix","memchr","packedpair","rabinkarp","shiftor","twoway","LOOP_BYTES","One","OneIter","Three","ThreeIter","Two","TwoIter","USIZE_ALIGN","USIZE_BYTES","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","confirm","confirm","confirm","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","has_needle","has_needle","has_needle","has_zero_byte","into","into","into","into","into","into","into_iter","into_iter","into_iter","it","it","it","iter","iter","iter","new","new","new","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","s1","s1","s1","s2","s2","s3","searcher","searcher","searcher","size_hint","size_hint","size_hint","splat","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","v1","v1","v1","v2","v2","v3","DefaultFrequencyRank","Finder","HeuristicFrequencyRank","Pair","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte1","byte2","clone","clone","clone_into","clone_into","default_rank","find_prefilter","fmt","fmt","from","from","from","index1","index1","index2","index2","into","into","into","new","new","pair","pair","rank","rank","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_indices","with_pair","with_ranker","RANK","Finder","FinderRev","Hash","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","del","eq","equivalent","find","find_raw","fmt","fmt","fmt","forward","from","from","from","hash","hash_2pow","into","into","into","is_equal_raw","is_fast","new","new","new","reverse","rfind","rfind_raw","roll","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Finder","MAX_NEEDLE_LEN","Mask","borrow","borrow_mut","find","fmt","from","into","masks","needle_len","new","try_from","try_into","type_id","Accept","ApproximateByteSet","Finder","FinderRev","Large","Maximal","Minimal","Push","Shift","Skip","Small","Suffix","SuffixKind","SuffixOrdering","TwoWay","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byteset","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","critical_pos","find","find_large_imp","find_small_imp","find_with_prefilter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","new","new","new","period","pos","reverse","reverse","rfind","rfind_large_imp","rfind_small_imp","shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","period","shift","memchr","packedpair","Iter","LOOP_SIZE","LOOP_SIZE","LOOP_SIZE","One","Three","Two","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count","count_byte_by_byte","count_raw","end","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","from","from","from","from","fwd_byte_by_byte","haystack","into","into","into","into","needle1","needle1","needle1","needle2","needle2","needle3","new","new","new","new","next","next_back","original_start","rev_byte_by_byte","rfind_raw","rfind_raw","rfind_raw","s1","s1","s1","s2","s2","s3","search_chunk","search_chunk","search_chunk","search_slice_with_raw","size_hint","start","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","v1","v1","v1","v2","v2","v3","Finder","borrow","borrow_mut","clone","clone_into","find","find_in_chunk","find_prefilter","find_prefilter_in_chunk","fmt","from","into","matched","min_haystack_len","min_haystack_len","new","pair","pair","to_owned","try_from","try_into","type_id","v1","v2","avx2","memchr","sse2","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","avx2","avx2","avx2","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","count_raw_avx2","count_raw_sse2","find","find","find","find_raw","find_raw","find_raw","find_raw_avx2","find_raw_avx2","find_raw_avx2","find_raw_sse2","find_raw_sse2","find_raw_sse2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","it","it","it","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","rfind_raw_avx2","rfind_raw_avx2","rfind_raw_avx2","rfind_raw_sse2","rfind_raw_sse2","rfind_raw_sse2","searcher","searcher","searcher","size_hint","size_hint","size_hint","sse2","sse2","sse2","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","avx2","borrow","borrow_mut","clone","clone_into","find","find_impl","find_prefilter","find_prefilter_impl","fmt","from","into","is_available","min_haystack_len","new","pair","sse2","to_owned","try_from","try_into","type_id","with_pair","with_pair_impl","count_raw","memchr2_raw","memchr3_raw","memchr_raw","memrchr2_raw","memrchr3_raw","memrchr_raw","unsafe_ifunc","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","count_raw_impl","find","find","find","find_raw","find_raw","find_raw","find_raw_impl","find_raw_impl","find_raw_impl","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","it","it","it","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","rfind_raw_impl","rfind_raw_impl","rfind_raw_impl","searcher","searcher","searcher","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_impl","find_prefilter","find_prefilter_impl","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","with_pair_impl","Borrowed","CowBytes","Imp","Owned","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","fmt","fmt","from","from","into","into","into_owned","new","new","new_owned","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Byte","Pointer","as_usize","distance","to_char","debug","log","trace","Memchr","Memchr2","Memchr3","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","count_raw","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","it","it","it","memchr","memchr2","memchr2_iter","memchr2_raw","memchr3","memchr3_iter","memchr3_raw","memchr_iter","memchr_raw","memrchr","memrchr2","memrchr2_iter","memrchr2_raw","memrchr3","memrchr3_iter","memrchr3_raw","memrchr_iter","memrchr_raw","needle1","needle1","needle1","needle2","needle2","needle3","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_forward_with_ranker","build_reverse","clone","clone","clone","clone_into","clone_into","clone_into","default","find","find","find_iter","find_iter","finder","finder","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","haystack","haystack","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","needle","needle","new","new","new","new","new","next","next","pos","pos","prefilter","prefilter","prestate","rfind","rfind","rfind_iter","rfind_iter","searcher","searcher","searcher","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Auto","Empty","MIN_SKIPS","MIN_SKIP_BYTES","None","OneByte","Pre","Prefilter","PrefilterConfig","PrefilterKind","PrefilterKindFn","PrefilterState","Searcher","SearcherKind","SearcherKindFn","SearcherRev","SearcherRevKind","TwoWay","TwoWayWithPrefilter","avx2","avx2","avx2","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","do_packed_search","empty","fallback","fallback","find","find","find","find_simple","finder","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","is_effective","is_effective","is_inert","is_none","kind","kind","kind","new","new","new","one_byte","prefilter_kind_avx2","prefilter_kind_fallback","prefilter_kind_sse2","prestate","prestrat","prestrat","rabinkarp","rabinkarp","rarest_byte","rarest_offset","rfind","searcher_kind_avx2","searcher_kind_empty","searcher_kind_one_byte","searcher_kind_sse2","searcher_kind_two_way","searcher_kind_two_way_with_prefilter","skipped","skips","skips","sse2","sse2","sse2","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_way","two_way_with_prefilter","twoway","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","finder","needle","ALIGN","BITS","BYTES","Mask","MoveMask","SensibleMoveMask","Vector","all_zeros_except_least_significant","all_zeros_except_least_significant","and","and","and","borrow","borrow_mut","clear_least_significant_bit","clear_least_significant_bit","clone","clone_into","cmpeq","count_ones","count_ones","first_offset","first_offset","fmt","from","get_for_offset","has_non_zero","has_non_zero","into","last_offset","last_offset","load_aligned","load_unaligned","movemask","movemask_will_have_non_zero","or","or","or","splat","to_owned","try_from","try_into","type_id","x86avx2","x86sse2"],"q":[[0,"memchr"],[31,"memchr::arch"],[34,"memchr::arch::all"],[43,"memchr::arch::all::memchr"],[177,"memchr::arch::all::packedpair"],[227,"memchr::arch::all::packedpair::default_rank"],[228,"memchr::arch::all::rabinkarp"],[283,"memchr::arch::all::shiftor"],[298,"memchr::arch::all::twoway"],[419,"memchr::arch::all::twoway::Shift"],[421,"memchr::arch::generic"],[423,"memchr::arch::generic::memchr"],[518,"memchr::arch::generic::packedpair"],[542,"memchr::arch::x86_64"],[545,"memchr::arch::x86_64::avx2"],[547,"memchr::arch::x86_64::avx2::memchr"],[684,"memchr::arch::x86_64::avx2::packedpair"],[708,"memchr::arch::x86_64::memchr"],[716,"memchr::arch::x86_64::sse2"],[718,"memchr::arch::x86_64::sse2::memchr"],[842,"memchr::arch::x86_64::sse2::packedpair"],[864,"memchr::cow"],[897,"memchr::ext"],[902,"memchr::macros"],[905,"memchr::memchr"],[985,"memchr::memmem"],[1086,"memchr::memmem::searcher"],[1263,"memchr::memmem::searcher::SearcherRevKind"],[1265,"memchr::vector"]],"d":["An iterator over all occurrences of a single byte in a …","An iterator over all occurrences of two possible bytes in …","An iterator over all occurrences of three possible bytes …","A module with low-level architecture dependent routines.","","","","","","","","Search for the first occurrence of a byte in a slice.","Search for the first occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the first occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Search for the last occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the last occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","","","","","","","","Contains architecture independent routines.","This module defines “generic” routines that can be …","Vector algorithms for the <code>x86_64</code> target.","Compare corresponding bytes in <code>x</code> and <code>y</code> for equality.","Compare <code>n</code> bytes at the given pointers for equality.","Returns true if and only if <code>needle</code> is a prefix of <code>haystack</code>.","Returns true if and only if <code>needle</code> is a suffix of <code>haystack</code>.","Provides architecture independent implementations of <code>memchr</code>…","Provides an architecture independent implementation of the …","An implementation of the Rabin-Karp substring search …","An implementation of the Shift-Or substring search …","An implementation of the Two-Way substring search algorithm…","The number of bytes we examine per each iteration of our …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","The bits that must be zero for a <code>*const usize</code> to be …","The number of bytes in a single <code>usize</code> value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of the needle in the given …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Return <code>true</code> if <code>x</code> contains any zero byte.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generic iterator implementation.","Generic iterator implementation.","Generic iterator implementation.","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of one of the …","Returns an iterator over all occurrences of one of the …","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the two …","Create a new searcher that finds occurrences of the three …","","","","","","","Return the last occurrence of the needle in the given …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","The underlying memchr searcher.","The underlying memchr searcher.","The underlying memchr searcher.","","","","Repeat the given byte into a word size number. That is, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default byte frequency heuristic that is good for most …","An architecture independent “packed pair” finder.","This trait allows the user to customize the heuristic used …","A pair of byte offsets into a needle to use as a predicate.","","","","","","","","","","","","","","Run this finder on the given haystack as a prefilter.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first offset of the pair.","","Returns the second offset of the pair.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new prefilter that reports possible locations …","Create a new pair of offsets from the given needle.","Returns the pair of offsets (into the needle) used to …","","Return the heuristic frequency rank of the given byte. A …","","","","","","","","","","","","","Create a new pair using the offsets given for the needle …","Create a new prefilter using the pair given.","Create a new pair of offsets from the given needle and …","","A forward substring searcher using the Rabin-Karp …","A reverse substring searcher using the Rabin-Karp …","A Rabin-Karp hash. This might represent the hash of a …","Add a byte to this hash.","","","","","","","","","","","","","","Remove a byte from this hash. The given needle hash should …","","","Return the first occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>find</code>, but accepts and returns raw pointers.","","","","Create a new hash from the bytes given for use in forward …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The actual hash.","The factor needed to multiply a byte by in order to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true when <code>x[i] == y[i]</code> for all <code>0 &lt;= i &lt; n</code>.","Whether RK is believed to be very fast for the given …","Create a new Rabin-Karp forward searcher for the given …","Create a new Rabin-Karp reverse searcher for the given …","Create a new hash that represents the empty string.","Create a new hash from the bytes given for use in reverse …","Return the last occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>rfind</code>, but accepts and returns raw pointers.","Add ‘new’ and remove ‘old’ from this hash. The …","","","","","","","","","","","","","A forward substring searcher using the Shift-Or algorithm.","","The type of our mask.","","","Return the first occurrence of the needle given to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create a new Shift-Or forward searcher for the given <code>needle</code>…","","","","This occurs when the given candidate byte indicates that …","A bitset used to track whether a particular byte exists in …","A forward substring searcher that uses the Two-Way …","A reverse substring searcher that uses the Two-Way …","","Extract the largest lexicographic suffix from a string.","Extract the smallest lexicographic suffix from a string.","This occurs when no decision to accept or skip the …","A representation of the amount we’re allowed to shift by …","This occurs when the given candidate byte excludes the …","","A suffix extracted from a needle along with its period.","The kind of suffix to extract.","The result of comparing corresponding bytes between two …","An implementation of the TwoWay substring search algorithm.","","","","","","","","","","","","","","","","","A small bitset used as a quick prefilter (in addition to …","","","","","","","","","","","","","","","Returns true if and only if the given candidate byte …","Return true if and only if the given byte might be in this …","A critical position in needle. Specifically, this position …","Returns the first occurrence of <code>needle</code> in the given …","","","This is like <code>Finder::find</code>, but it accepts a prefilter for …","","","","","","","","","Compute the shift for a given needle in the forward …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a searcher that finds occurrences of the given …","Create a searcher that finds occurrences of the given …","Create a new set from the given needle.","The period of this suffix.","The starting position of this suffix.","Compute the shift for a given needle in the reverse …","","Returns the last occurrence of <code>needle</code> in the given <code>haystack</code>…","","","The amount we shift by in the Two-Way search algorithm. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic crate-internal routines for the <code>memchr</code> family of …","Generic crate-internal routines for the “packed pair” …","An iterator over all occurrences of a set of bytes in a …","The number of bytes we examine per each iteration of our …","The number of bytes we examine per each iteration of our …","The number of bytes we examine per each iteration of our …","Finds all occurrences of a single byte in a haystack.","Finds all occurrences of two bytes in a haystack.","Finds all occurrences of two bytes in a haystack.","","","","","","","","","","","","","","","","","Returns the number of remaining elements in this iterator.","Performs a forward byte-at-a-time loop until <code>ptr &gt;= end_ptr</code>…","Return a count of all matching bytes in the given haystack.","The current ending point into the haystack. That is, where …","Return a pointer to the first occurrence of the needle in …","Return a pointer to the first occurrence of one of the …","Return a pointer to the first occurrence of one of the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Performs a forward byte-at-a-time loop until either …","A marker for tracking the lifetime of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the needle given to <code>One::new</code>.","Returns the first needle given to <code>Two::new</code>.","Returns the first needle given to <code>Three::new</code>.","Returns the second needle given to <code>Two::new</code>.","Returns the second needle given to <code>Three::new</code>.","Returns the third needle given to <code>Three::new</code>.","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the byte …","Create a new generic memchr iterator.","Returns the next occurrence in the forward direction.","Returns the next occurrence in reverse.","The original starting point into the haystack. We use this …","Performs a reverse byte-at-a-time loop until either …","Return a pointer to the last occurrence of the needle in …","Return a pointer to the last occurrence of the needle in …","Return a pointer to the last occurrence of the needle in …","","","","","","","Search <code>V::BYTES</code> starting at <code>cur</code> via an unaligned load.","Search <code>V::BYTES</code> starting at <code>cur</code> via an unaligned load.","Search <code>V::BYTES</code> starting at <code>cur</code> via an unaligned load.","Search a slice using a function that operates on raw …","Provides an implementation of <code>Iterator::size_hint</code>.","The current starting point into the haystack. That is, …","","","","","","","","","","","","","","","","","","","","","","","A generic architecture dependent “packed pair” finder.","","","","","Searches the given haystack for the given needle. The …","Search for an occurrence of our byte pair from the needle …","Searches the given haystack for offsets that represent …","Search for an occurrence of our byte pair from the needle …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Accepts a chunk-relative offset and returns a haystack …","Returns the minimum haystack length that this <code>Finder</code> can …","","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","","","","Algorithms for the <code>x86_64</code> target using 256-bit vectors via …","Wrapper routines for <code>memchr</code> and friends.","Algorithms for the <code>x86_64</code> target using 128-bit vectors via …","This module defines 256-bit vector implementations of …","A 256-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","Used for haystacks bigger than 32 bytes.","Used for haystacks bigger than 32 bytes.","Used for haystacks bigger than 32 bytes.","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Execute a count using AVX2 vectors and routines.","Execute a count using SSE2 vectors and routines.","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Execute a search using AVX2 vectors and routines.","Execute a search using AVX2 vectors and routines.","Execute a search using AVX2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Execute a search using AVX2 vectors and routines.","Execute a search using AVX2 vectors and routines.","Execute a search using AVX2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","","","","","","","Used for haystacks less than 32 bytes.","Used for haystacks less than 32 bytes.","Used for haystacks less than 32 bytes.","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 256-bit vector …","","","","","","Execute a search using AVX2 vectors and routines.","Execute a search using AVX2 vectors and routines.","Run this finder on the given haystack as a prefilter.","Execute a prefilter search using AVX2 vectors and routines.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","","Create a new “packed pair” finder using the pair of …","Create a new <code>Finder</code> specific to SSE2 vectors and routines.","Count all matching bytes, but using raw pointers to …","memchr2, but using raw pointers to represent the haystack.","memchr3, but using raw pointers to represent the haystack.","memchr, but using raw pointers to represent the haystack.","memrchr2, but using raw pointers to represent the haystack.","memrchr3, but using raw pointers to represent the haystack.","memrchr, but using raw pointers to represent the haystack.","Provides a way to run a memchr-like function while …","This module defines 128-bit vector implementations of …","A 128-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Execute a count using SSE2 vectors and routines.","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 128-bit vector …","","","","","Execute a search using SSE2 vectors and routines.","Execute a search using SSE2 vectors and routines.","Run this finder on the given haystack as a prefilter.","Execute a prefilter search using SSE2 vectors and routines.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","Create a new <code>Finder</code> specific to SSE2 vectors and routines.","","A specialized copy-on-write byte string.","","","Return a borrowed byte string, regardless of whether this …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return an owned version of this copy-on-write byte string.","Create a new borrowed CowBytes.","","Create a new owned CowBytes.","","","","","","","","","A trait for adding some helper routines to raw bytes.","A trait for adding some helper routines to pointers.","Casts this pointer to <code>usize</code>.","Returns the distance, in units of <code>T</code>, between <code>self</code> and …","Converts this byte to a <code>char</code> if it’s ASCII. Otherwise …","","","","An iterator over all occurrences of a single byte in a …","An iterator over all occurrences of two possible bytes in …","An iterator over all occurrences of three possible bytes …","","","","","","","","","","","","","","Count all matching bytes, but using raw pointers to …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Search for the first occurrence of a byte in a slice.","Search for the first occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","memchr2, but using raw pointers to represent the haystack.","Search for the first occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","memchr3, but using raw pointers to represent the haystack.","Returns an iterator over all occurrences of the needle in …","memchr, but using raw pointers to represent the haystack.","Search for the last occurrence of a byte in a slice.","Search for the last occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","memrchr2, but using raw pointers to represent the haystack.","Search for the last occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","memrchr3, but using raw pointers to represent the haystack.","Returns an iterator over all occurrences of the needle in …","memrchr, but using raw pointers to represent the haystack.","","","","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","","","","","","","","","","","","","","","","","","","","","","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a forward finder using the given needle and a custom …","Build a reverse finder using the given needle from the …","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","","","","","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","","When searching with an empty needle, this gets set to <code>None</code> …","Configure the prefilter setting for the finder.","","","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","","","Automatically detect whether a heuristic prefilter should …","","The minimum number of skip attempts to try before …","The minimum amount of bytes that skipping must average.","Never used a prefilter in substring search.","","A combination of prefilter effectiveness state and the …","The implementation of a prefilter.","Prefilter controls whether heuristics are used to …","A union indicating one of several possible prefilters that …","The type of a prefilter function.","PrefilterState tracks state associated with the …","A “meta” substring searcher.","A union indicating one of several possible substring …","The type of a substring search function.","A reverse substring searcher.","The kind of the reverse searcher.","","A two-way substring searcher with a prefilter.","Return a prefilter using a x86_64 AVX2 vector algorithm.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the needle has the right characteristics …","","Return a “fallback” prefilter, but only if it is …","","Searches the given haystack for the given needle. The …","Return a <em>candidate</em> position for a match.","Call this prefilter on the given haystack with the given …","A “simple” prefilter that just looks for the …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if and only if this state indicates that a …","Return true if and only if this prefilter should be used.","Returns true if the prefilter this state represents should …","Returns true when this prefilter is set to the <code>None</code> …","","","","Creates a new “meta” substring searcher that attempts …","Creates a new searcher for finding occurrences of the …","Create a fresh prefilter state.","","Reads from the <code>avx2</code> field of <code>PrefilterKind</code> to execute the …","Reads from the <code>fallback</code> field of <code>PrefilterKind</code> to execute …","Reads from the <code>sse2</code> field of <code>PrefilterKind</code> to execute the …","State that tracks the effectiveness of a prefilter.","","The actual prefilter.","","","","","Searches the given haystack for the last occurrence of the …","Reads from the <code>avx2</code> field of <code>SearcherKind</code> to execute the …","Reads from the <code>empty</code> field of <code>SearcherKind</code> to handle the …","Reads from the <code>one_byte</code> field of <code>SearcherKind</code> to handle …","Reads from the <code>sse2</code> field of <code>SearcherKind</code> to execute the …","Reads from the <code>two_way</code> field of <code>SearcherKind</code> to handle the …","Reads from the <code>two_way_with_prefilter</code> field of <code>SearcherKind</code>…","The total number of bytes that have been skipped.","Returns the total number of times the prefilter has been …","The number of skips that has been executed. This is always …","Return a prefilter using a x86_64 SSE2 vector algorithm.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new searcher that always uses the Two-Way …","","","","","","","","","","","Update this state with the number of bytes skipped on the …","","","The bits that must be zero in order for a <code>*const u8</code> …","The number of bits in the vector.","The number of bytes in the vector. That is, this is the …","The type of the value returned by <code>Vector::movemask</code>.","A trait that abstracts over a vector-to-scalar operation …","This is a “sensible” movemask implementation where …","A trait for describing vector operations used by …","Return a mask that is all zeros except for the least …","","_mm_and_si128 or _mm256_and_si256","Does a bitwise <code>and</code> operation between <code>self</code> and <code>other</code>.","","","","Returns a mask that is equivalent to <code>self</code> but with the …","","","","_mm_cmpeq_epi8 or _mm256_cmpeq_epi8","Returns the number of bits set to 1 in this mask.","","Returns the offset of the first non-zero lane this mask …","","","Returns the argument unchanged.","Get the mask in a form suitable for computing offsets.","Returns true if and only if this mask has a a non-zero bit …","","Calls <code>U::from(self)</code>.","Returns the offset of the last non-zero lane this mask …","","Read a vector-size number of bytes from the given pointer. …","Read a vector-size number of bytes from the given pointer. …","_mm_movemask_epi8 or _mm256_movemask_epi8","Returns true if and only if <code>Self::movemask</code> would return a …","_mm_or or _mm256_or_si256","Does a bitwise <code>or</code> operation between <code>self</code> and <code>other</code>.","","Create a vector with 8-bit lanes with the given byte …","","","","","",""],"i":[0,0,0,0,0,0,7,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,5,6,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,10,11,12,13,14,15,10,11,12,13,14,15,10,11,12,13,14,15,10,11,12,13,14,15,10,12,14,10,11,10,10,12,14,10,12,14,10,11,12,13,14,15,10,11,12,13,14,15,10,12,14,0,10,11,12,13,14,15,11,13,15,11,13,15,10,12,14,10,12,14,11,13,15,11,13,15,10,12,14,10,12,14,10,12,14,12,14,14,11,13,15,11,13,15,0,10,11,12,13,14,15,10,11,12,13,14,15,10,11,12,13,14,15,10,11,12,13,14,15,10,12,14,12,14,14,0,0,0,0,22,20,21,22,20,21,20,20,20,21,20,21,0,20,20,21,22,20,21,21,21,21,21,22,20,21,20,21,20,20,23,22,20,21,22,20,21,22,20,21,22,20,21,21,20,21,0,0,0,0,24,25,26,24,25,26,24,25,26,24,25,26,24,24,24,24,24,25,25,25,26,24,24,25,26,24,25,25,25,26,24,0,0,25,26,24,24,26,26,24,25,26,24,25,26,24,25,26,24,25,26,24,0,27,0,27,27,27,27,27,27,27,27,27,27,27,27,33,0,0,0,31,32,32,33,0,33,31,0,0,0,0,28,29,30,31,36,32,33,34,28,29,30,31,36,32,33,34,30,28,29,30,31,32,33,34,28,29,30,31,32,33,34,32,34,30,28,28,28,28,28,29,30,31,36,32,33,34,31,36,28,29,30,31,36,32,33,34,28,29,30,31,36,32,33,34,28,29,34,36,36,31,36,29,29,29,30,28,29,30,31,32,33,34,28,29,30,31,36,32,33,34,28,29,30,31,36,32,33,34,28,29,30,31,36,32,33,34,83,84,0,0,0,38,39,40,0,0,0,38,39,40,41,38,39,40,41,38,39,40,41,38,39,40,41,41,0,38,41,38,39,40,38,39,40,41,38,39,40,41,0,41,38,39,40,41,38,39,40,39,40,40,38,39,40,41,41,41,41,0,38,39,40,38,39,40,39,40,40,38,39,40,0,41,41,38,39,40,41,38,39,40,41,38,39,40,41,38,39,40,41,38,39,40,39,40,40,0,46,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,47,49,51,47,48,49,50,51,52,47,48,49,50,51,52,47,48,49,50,51,52,47,48,49,50,51,52,47,48,47,47,47,47,49,51,47,49,51,47,49,51,47,49,51,47,48,49,50,51,52,47,48,49,50,51,52,47,48,49,50,51,52,48,50,52,47,49,51,48,50,52,47,49,51,47,49,51,47,49,51,48,50,52,48,50,52,47,49,51,47,49,51,47,49,51,47,49,51,48,50,52,48,50,52,47,49,51,47,48,49,50,51,52,47,48,49,50,51,52,47,48,49,50,51,52,47,48,49,50,51,52,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,54,54,54,56,58,54,56,58,54,56,58,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,55,57,59,54,56,58,55,57,59,54,56,58,54,56,58,54,56,58,55,57,59,55,57,59,54,56,58,54,56,58,54,56,58,55,57,59,55,57,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,62,0,0,62,61,62,61,62,61,62,61,62,61,62,61,61,62,61,62,61,62,61,61,62,61,61,62,61,62,61,62,61,62,0,0,85,85,86,0,0,0,0,0,0,7,5,6,7,5,6,7,5,6,7,5,6,7,0,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,5,6,5,6,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,72,0,0,0,0,0,72,0,67,68,70,71,67,68,69,70,71,67,68,69,69,69,69,67,68,69,67,68,69,69,0,67,0,67,70,71,70,71,67,68,69,70,71,67,68,69,70,71,70,71,67,68,69,70,71,70,71,67,68,67,68,67,68,70,71,67,68,69,70,71,70,71,69,69,70,0,68,0,68,0,67,68,70,67,68,69,70,71,67,68,69,70,71,67,68,69,70,71,67,68,69,72,78,80,80,72,78,0,0,0,0,0,0,0,0,0,0,0,78,0,73,75,79,74,75,76,77,78,72,73,79,80,35,74,75,76,77,78,72,73,79,80,35,74,73,74,75,76,77,78,72,73,79,80,74,75,76,77,78,72,73,79,80,72,0,75,73,79,74,73,35,73,76,74,76,77,78,72,73,80,35,74,75,76,77,78,72,73,79,80,35,74,75,76,77,78,72,73,79,80,35,80,35,80,72,74,77,73,74,77,80,75,0,0,0,35,76,35,74,77,73,73,77,0,0,0,0,0,0,80,80,80,73,75,79,74,75,76,77,78,72,73,79,80,74,75,76,77,78,72,73,79,80,35,74,75,76,77,78,72,73,79,80,35,75,75,74,74,75,76,77,78,72,73,79,80,35,80,87,88,44,44,44,44,0,0,0,89,82,44,89,82,82,82,89,82,82,82,44,89,82,89,82,82,82,82,89,82,82,89,82,44,44,44,44,44,89,82,44,82,82,82,82,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],5],[[1,1,1,[2,[1]]],[[4,[3]]]],[[1,1,1,[2,[1]]],6],[[1,[2,[1]]],7],0,[[1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],[[8,[5]]]],[[1,1,1,[2,[1]]],[[4,[3]]]],[[1,1,1,[2,[1]]],[[8,[6]]]],[[1,[2,[1]]],[[8,[7]]]],0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]],9],[[1,1,3],9],[[[2,[1]],[2,[1]]],9],[[[2,[1]],[2,[1]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[10,1],9],[[12,1],9],[[14,1],9],[[10,[2,[1]]],3],[11,3],[[10,1,1],3],[[10,[2,[1]]],[[4,[3]]]],[[12,[2,[1]]],[[4,[3]]]],[[14,[2,[1]]],[[4,[3]]]],[[10,1,1],[[4,[1]]]],[[12,1,1],[[4,[1]]]],[[14,1,1],[[4,[1]]]],[[10,16],17],[[11,16],17],[[12,16],17],[[13,16],17],[[14,16],17],[[15,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[10,3],9],[[12,3],9],[[14,3],9],[3,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[10,[2,[1]]],11],[[12,[2,[1]]],13],[[14,[2,[1]]],15],[1,10],[[1,1],12],[[1,1,1],14],[11,[[4,[3]]]],[13,[[4,[3]]]],[15,[[4,[3]]]],[11,[[4,[3]]]],[13,[[4,[3]]]],[15,[[4,[3]]]],[[10,[2,[1]]],[[4,[3]]]],[[12,[2,[1]]],[[4,[3]]]],[[14,[2,[1]]],[[4,[3]]]],[[10,1,1],[[4,[1]]]],[[12,1,1],[[4,[1]]]],[[14,1,1],[[4,[1]]]],0,0,0,0,0,0,0,0,0,[11],[13],[15],[1,3],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[20,20],[21,21],[[]],[[]],0,[[20,[2,[1]]],[[4,[3]]]],[[20,16],17],[[21,16],17],[[]],[[]],[[]],[21,1],0,[21,1],0,[[]],[[]],[[]],[[[2,[1]]],[[4,[20]]]],[[[2,[1]]],[[4,[21]]]],[20,21],0,[1,1],[[22,1],1],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[[2,[1]],1,1],[[4,[21]]]],[[[2,[1]],21],[[4,[20]]]],[[[2,[1]],23],[[4,[21]]]],0,0,0,0,[[24,1]],[[]],[[]],[[]],[[]],[[]],[[]],[25,25],[26,26],[24,24],[[]],[[]],[[]],[[],24],[[24,25,1]],[[24,24],9],[[],9],[[25,[2,[1]],[2,[1]]],[[4,[3]]]],[[25,1,1,1,1],[[4,[1]]]],[[25,16],17],[[26,16],17],[[24,16],17],[[1,1],24],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[1,1,3],9],[[[2,[1]],[2,[1]]],9],[[[2,[1]]],25],[[[2,[1]]],26],[[],24],[[1,1],24],[[26,[2,[1]],[2,[1]]],[[4,[3]]]],[[26,1,1,1,1],[[4,[1]]]],[[24,25,1,1]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],0,0,0,[[]],[[]],[[27,[2,[1]]],[[4,[3]]]],[[27,16],17],[[]],[[]],0,0,[[[2,[1]]],[[4,[27]]]],[[],18],[[],18],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,1,1],33],[[34,1],9],0,[[28,[2,[1]],[2,[1]]],[[4,[3]]]],[[28,[4,[35]],[2,[1]],[2,[1]],3],[[4,[3]]]],[[28,[4,[35]],[2,[1]],[2,[1]],3],[[4,[3]]]],[[28,[4,[35]],[2,[1]],[2,[1]]],[[4,[3]]]],[[28,16],17],[[29,16],17],[[30,16],17],[[31,16],17],[[36,16],17],[[32,16],17],[[33,16],17],[[34,16],17],[[[2,[1]],3,3],31],[[[2,[1]],32],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],28],[[[2,[1]]],29],[[[2,[1]]],34],0,0,[[[2,[1]],3,3],31],[[[2,[1]],32],36],[[29,[2,[1]],[2,[1]]],[[4,[3]]]],[[29,[2,[1]],[2,[1]],3],[[4,[3]]]],[[29,[2,[1]],[2,[1]],3],[[4,[3]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[37]]],[[38,[37]]]],[[[39,[37]]],[[39,[37]]]],[[[40,[37]]],[[40,[37]]]],[41,41],[[]],[[]],[[]],[[]],[[41,42],3],[[1,1,43],3],[[[38,[44]],1,1],3],0,[[[38,[44]],1,1],[[4,[1]]]],[[[39,[44]],1,1],[[4,[1]]]],[[[40,[44]],1,1],[[4,[1]]]],[[[38,[45]],16],17],[[[39,[45]],16],17],[[[40,[45]],16],17],[[41,16],17],[[]],[[]],[[]],[[]],[[1,1,43],[[4,[1]]]],0,[[]],[[]],[[]],[[]],[[[38,[44]]],1],[[[39,[44]]],1],[[[40,[44]]],1],[[[39,[44]]],1],[[[40,[44]]],1],[[[40,[44]]],1],[1,[[38,[44]]]],[[1,1],[[39,[44]]]],[[1,1,1],[[40,[44]]]],[[[2,[1]]],41],[[41,42],[[4,[3]]]],[[41,42],[[4,[3]]]],0,[[1,1,43],[[4,[1]]]],[[[38,[44]],1,1],[[4,[1]]]],[[[39,[44]],1,1],[[4,[1]]]],[[[40,[44]],1,1],[[4,[1]]]],0,0,0,0,0,0,[[[38,[44]],1,43],[[4,[1]]]],[[[39,[44]],1,43],[[4,[1]]]],[[[40,[44]],1,43],[[4,[1]]]],[[[2,[1]],42],[[4,[3]]]],[41],0,[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,[[]],[[]],[[[46,[37]]],[[46,[37]]]],[[]],[[[46,[44]],[2,[1]],[2,[1]]],[[4,[3]]]],[[[46,[44]],[2,[1]],1,1],[[4,[3]]]],[[[46,[44]],[2,[1]]],[[4,[3]]]],[[[46,[44]],1],[[4,[3]]]],[[[46,[45]],16],17],[[]],[[]],[[1,1,3],3],[[[46,[44]]],3],0,[[[2,[1]],21],[[46,[44]]]],[[[46,[44]]],21],0,[[]],[[],18],[[],18],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[]],[[]],[[]],[[]],[[]],[[]],[[47,[2,[1]]],3],[48,3],[[47,1,1],3],[[47,1,1],3],[[47,1,1],3],[[47,[2,[1]]],[[4,[3]]]],[[49,[2,[1]]],[[4,[3]]]],[[51,[2,[1]]],[[4,[3]]]],[[47,1,1],[[4,[1]]]],[[49,1,1],[[4,[1]]]],[[51,1,1],[[4,[1]]]],[[47,1,1],[[4,[1]]]],[[49,1,1],[[4,[1]]]],[[51,1,1],[[4,[1]]]],[[47,1,1],[[4,[1]]]],[[49,1,1],[[4,[1]]]],[[51,1,1],[[4,[1]]]],[[47,16],17],[[48,16],17],[[49,16],17],[[50,16],17],[[51,16],17],[[52,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],0,0,0,[[47,[2,[1]]],48],[[49,[2,[1]]],50],[[51,[2,[1]]],52],[1,[[4,[47]]]],[[1,1],[[4,[49]]]],[[1,1,1],[[4,[51]]]],[1,47],[[1,1],49],[[1,1,1],51],[48,[[4,[3]]]],[50,[[4,[3]]]],[52,[[4,[3]]]],[48,[[4,[3]]]],[50,[[4,[3]]]],[52,[[4,[3]]]],[[47,[2,[1]]],[[4,[3]]]],[[49,[2,[1]]],[[4,[3]]]],[[51,[2,[1]]],[[4,[3]]]],[[47,1,1],[[4,[1]]]],[[49,1,1],[[4,[1]]]],[[51,1,1],[[4,[1]]]],[[47,1,1],[[4,[1]]]],[[49,1,1],[[4,[1]]]],[[51,1,1],[[4,[1]]]],[[47,1,1],[[4,[1]]]],[[49,1,1],[[4,[1]]]],[[51,1,1],[[4,[1]]]],0,0,0,[48],[50],[52],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,[[]],[[]],[53,53],[[]],[[53,[2,[1]],[2,[1]]],[[4,[3]]]],[[53,[2,[1]],[2,[1]]],[[4,[3]]]],[[53,[2,[1]]],[[4,[3]]]],[[53,[2,[1]]],[[4,[3]]]],[[53,16],17],[[]],[[]],[[],9],[53,3],[[[2,[1]]],[[4,[53]]]],[53,21],0,[[]],[[],18],[[],18],[[],19],[[[2,[1]],21],[[4,[53]]]],[[[2,[1]],21],53],[[1,1,1],3],[[1,1,1,1],[[4,[1]]]],[[1,1,1,1,1],[[4,[1]]]],[[1,1,1],[[4,[1]]]],[[1,1,1,1],[[4,[1]]]],[[1,1,1,1,1],[[4,[1]]]],[[1,1,1],[[4,[1]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[[]],[[]],[[]],[[]],[[]],[[]],[[54,[2,[1]]],3],[55,3],[[54,1,1],3],[[54,1,1],3],[[54,[2,[1]]],[[4,[3]]]],[[56,[2,[1]]],[[4,[3]]]],[[58,[2,[1]]],[[4,[3]]]],[[54,1,1],[[4,[1]]]],[[56,1,1],[[4,[1]]]],[[58,1,1],[[4,[1]]]],[[54,1,1],[[4,[1]]]],[[56,1,1],[[4,[1]]]],[[58,1,1],[[4,[1]]]],[[54,16],17],[[55,16],17],[[56,16],17],[[57,16],17],[[58,16],17],[[59,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],0,0,0,[[54,[2,[1]]],55],[[56,[2,[1]]],57],[[58,[2,[1]]],59],[1,[[4,[54]]]],[[1,1],[[4,[56]]]],[[1,1,1],[[4,[58]]]],[1,54],[[1,1],56],[[1,1,1],58],[55,[[4,[3]]]],[57,[[4,[3]]]],[59,[[4,[3]]]],[55,[[4,[3]]]],[57,[[4,[3]]]],[59,[[4,[3]]]],[[54,[2,[1]]],[[4,[3]]]],[[56,[2,[1]]],[[4,[3]]]],[[58,[2,[1]]],[[4,[3]]]],[[54,1,1],[[4,[1]]]],[[56,1,1],[[4,[1]]]],[[58,1,1],[[4,[1]]]],[[54,1,1],[[4,[1]]]],[[56,1,1],[[4,[1]]]],[[58,1,1],[[4,[1]]]],0,0,0,[55],[57],[59],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[]],[[]],[60,60],[[]],[[60,[2,[1]],[2,[1]]],[[4,[3]]]],[[60,[2,[1]],[2,[1]]],[[4,[3]]]],[[60,[2,[1]]],[[4,[3]]]],[[60,[2,[1]]],[[4,[3]]]],[[60,16],17],[[]],[[]],[[],9],[60,3],[[[2,[1]]],[[4,[60]]]],[60,21],[[]],[[],18],[[],18],[[],19],[[[2,[1]],21],[[4,[60]]]],[[[2,[1]],21],60],0,0,0,0,[61,[[2,[1]]]],[62,[[2,[1]]]],[[]],[[]],[[]],[[]],[61,61],[62,62],[[]],[[]],[61,[[2,[1]]]],[[61,16],17],[[62,16],17],[[]],[[]],[[]],[[]],[61,61],[[[0,[63,[64,[[2,[1]]]]]]],61],[[[2,[1]]],62],[[[65,[[2,[1]]]]],61],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],0,0,[[],3],[[],3],[[],66],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[5,5],[6,6],[[]],[[]],[[]],[7,3],[[1,1,1],3],[[7,16],17],[[5,16],17],[[6,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],5],[[1,1,1,1],[[4,[1]]]],[[1,1,1,[2,[1]]],[[4,[3]]]],[[1,1,1,[2,[1]]],6],[[1,1,1,1,1],[[4,[1]]]],[[1,[2,[1]]],7],[[1,1,1],[[4,[1]]]],[[1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],[[4,[3]]]],[[1,1,[2,[1]]],[[8,[5]]]],[[1,1,1,1],[[4,[1]]]],[[1,1,1,[2,[1]]],[[4,[3]]]],[[1,1,1,[2,[1]]],[[8,[6]]]],[[1,1,1,1,1],[[4,[1]]]],[[1,[2,[1]]],[[8,[7]]]],[[1,1,1],[[4,[1]]]],0,0,0,0,0,0,[[1,[2,[1]]],7],[[1,1,[2,[1]]],5],[[1,1,1,[2,[1]]],6],[7,[[4,[3]]]],[5,[[4,[3]]]],[6,[[4,[3]]]],[7,[[4,[3]]]],[5,[[4,[3]]]],[6,[[4,[3]]]],[7],[5],[6],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,[67,67],[68,68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[69,[0,[63,[64,[[2,[1]]]]]]],67],[[69,23,[0,[63,[64,[[2,[1]]]]]]],67],[[69,[0,[63,[64,[[2,[1]]]]]]],68],[67,67],[68,68],[69,69],[[]],[[]],[[]],[[],69],[[[2,[1]],[2,[1]]],[[4,[3]]]],[[67,[2,[1]]],[[4,[3]]]],[[[2,[1]],[0,[63,[64,[[2,[1]]]]]]],70],[[67,[2,[1]]],70],0,0,[[70,16],17],[[71,16],17],[[67,16],17],[[68,16],17],[[69,16],17],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[71,71],[67,67],[68,68],[67,[[2,[1]]]],[68,[[2,[1]]]],0,0,[[[2,[1]],67],70],[[[2,[1]],68],71],[[[0,[63,[64,[[2,[1]]]]]]],67],[[[0,[63,[64,[[2,[1]]]]]]],68],[[],69],[70,[[4,[3]]]],[71,[[4,[3]]]],0,0,[[69,72],69],0,0,[[[2,[1]],[2,[1]]],[[4,[3]]]],[[68,[64,[[2,[1]]]]],[[4,[3]]]],[[[2,[1]],[0,[63,[64,[[2,[1]]]]]]],71],[[68,[2,[1]]],71],0,0,0,[70],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[53,[2,[1]]],73],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[74,74],[75,75],[76,76],[77,77],[78,78],[72,72],[73,73],[79,79],[80,80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],72],[[[2,[1]]],9],0,[[23,21,[2,[1]]],[[4,[73]]]],0,[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],[[73,[2,[1]]],[[4,[3]]]],[[35,[2,[1]]],[[4,[3]]]],[[73,[2,[1]]],[[4,[3]]]],0,[[74,16],17],[[76,16],17],[[77,16],17],[[78,16],17],[[72,16],17],[[73,16],17],[[80,16],17],[[35,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80,9],[35,9],[80,9],[72,9],0,0,0,[[72,23,[2,[1]]],74],[[[2,[1]]],77],[[],80],0,[[73,[2,[1]]],[[4,[3]]]],[[73,[2,[1]]],[[4,[3]]]],[[73,[2,[1]]],[[4,[3]]]],0,0,0,0,0,0,0,[[77,[2,[1]],[2,[1]]],[[4,[3]]]],[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],[[74,80,[2,[1]],[2,[1]]],[[4,[3]]]],0,[80,81],0,[[60,[2,[1]]],73],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,[[[2,[1]],25,[4,[73]]],74],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[80,3]],0,0,0,0,0,0,0,0,0,[3],[3,82],[[]],[[]],[[82,82],82],[[]],[[]],[[]],[82,82],[82,82],[[]],[[]],[[],3],[82,3],[[],3],[82,3],[[82,16],17],[[]],[82,81],[[],9],[82,9],[[]],[[],3],[82,3],[1],[1],[[]],[[],9],[[]],[[]],[[82,82],82],[1],[[]],[[],18],[[],18],[[],19],0,0],"c":[],"p":[[15,"u8"],[15,"slice"],[15,"usize"],[4,"Option"],[3,"Memchr2"],[3,"Memchr3"],[3,"Memchr"],[3,"Rev"],[15,"bool"],[3,"One"],[3,"OneIter"],[3,"Two"],[3,"TwoIter"],[3,"Three"],[3,"ThreeIter"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Finder"],[3,"Pair"],[3,"DefaultFrequencyRank"],[8,"HeuristicFrequencyRank"],[3,"Hash"],[3,"Finder"],[3,"FinderRev"],[3,"Finder"],[3,"Finder"],[3,"FinderRev"],[3,"TwoWay"],[4,"Shift"],[4,"SuffixKind"],[4,"SuffixOrdering"],[3,"ApproximateByteSet"],[3,"Pre"],[3,"Suffix"],[8,"Clone"],[3,"One"],[3,"Two"],[3,"Three"],[3,"Iter"],[8,"FnMut"],[8,"Fn"],[8,"Vector"],[8,"Debug"],[3,"Finder"],[3,"One"],[3,"OneIter"],[3,"Two"],[3,"TwoIter"],[3,"Three"],[3,"ThreeIter"],[3,"Finder"],[3,"One"],[3,"OneIter"],[3,"Two"],[3,"TwoIter"],[3,"Three"],[3,"ThreeIter"],[3,"Finder"],[3,"CowBytes"],[4,"Imp"],[8,"Sized"],[8,"AsRef"],[3,"Box"],[15,"char"],[3,"Finder"],[3,"FinderRev"],[3,"FinderBuilder"],[3,"FindIter"],[3,"FindRevIter"],[4,"PrefilterConfig"],[3,"Prefilter"],[3,"Searcher"],[19,"SearcherKind"],[3,"TwoWayWithPrefilter"],[3,"SearcherRev"],[4,"SearcherRevKind"],[19,"PrefilterKind"],[3,"PrefilterState"],[15,"u32"],[3,"SensibleMoveMask"],[13,"Small"],[13,"Large"],[8,"Pointer"],[8,"Byte"],[13,"TwoWay"],[13,"OneByte"],[8,"MoveMask"]]},\
"once_cell":{"doc":"Overview","t":"AAAARRDRRDRRDLLLLLLLLLLLLLLFLLLLLLMMMMMAMLLLLLLLLLMFLLFFFDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLALLLLLLLLLLLLLDFLLLLLLLLLMMLLLLLLDDFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLDDLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLL","n":["imp","race","sync","unsync","COMPLETE","COMPLETE_PTR","Guard","INCOMPLETE","INCOMPLETE_PTR","OnceCell","RUNNING","STATE_MASK","Waiter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","fmt","from","from","from","get_mut","get_unchecked","initialize","initialize_or_wait","into","into","into","into_inner","is_initialized","new","new_queue","next","queue","queue","signaled","strict","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","wait","wait","with_value","addr","map_addr","with_addr","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","_dummy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","fmt","fmt","fmt","from","from","from","from_usize","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","ghost","ghost","inner","inner","inner","inner","into","into","into","new","new","new","once_box","set","set","set","to_usize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","OnceBox","_dummy","borrow","borrow_mut","default","drop","fmt","from","get","get_or_init","get_or_try_init","ghost","inner","into","new","set","try_from","try_into","type_id","Lazy","OnceCell","_dummy","borrow","borrow","borrow_mut","borrow_mut","cell","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","cell","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","init","inner","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[4,"once_cell::imp"],[54,"once_cell::imp::strict"],[57,"once_cell::race"],[113,"once_cell::race::once_box"],[132,"once_cell::sync"],[183,"once_cell::unsync"]],"d":["","Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","","","Drains and notifies the queue of waiters on drop.","","","","","","Representation of a node in the linked list of waiters in …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the mutable reference to the underlying value. …","Get the reference to the underlying value, without …","Safety: synchronizes with store to value via SeqCst read …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>OnceCell</code>, returning the wrapped value. …","Safety: synchronizes with store to value via …","","","","","","","","","","","","","","","","","","","","","","","","","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","A thread-safe cell which can be written to only once.","","","","","","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,9,1,3,9,1,3,1,3,9,1,3,3,3,3,0,9,1,3,3,3,3,1,9,1,3,9,0,9,9,1,3,9,1,3,9,1,3,3,0,3,3,0,0,0,0,0,0,0,15,15,16,17,15,16,17,15,16,17,15,16,17,15,16,17,17,15,16,17,15,16,17,15,16,17,15,19,15,19,16,17,15,16,17,15,16,17,0,15,16,17,17,15,16,17,15,16,17,15,16,17,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,22,24,22,24,24,22,22,22,22,24,24,24,22,22,22,24,24,24,22,22,22,24,22,24,22,24,22,22,22,24,22,24,22,24,22,24,22,22,22,22,24,22,22,24,22,24,22,22,0,0,27,28,27,28,28,27,27,27,27,28,28,28,27,27,27,28,28,28,27,27,27,28,27,28,27,28,27,27,28,27,27,28,27,28,27,28,27,27,27,27,28,27,27,28,27,28,27],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1],[[[3,[2]],4],5],[[]],[[]],[[]],[3,6],[3],[[3,7],8],[[[10,[9]],[6,[11]]]],[[]],[[]],[[]],[3,6],[3,12],[[],3],0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],0,[[[10,[9]],9]],[3],[[],3],[[],14],[7],[14],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],16],[[],17],[[15,4],5],[[16,4],5],[[17,4],5],[[]],[[]],[[]],[18,12],[15,6],[16,[[6,[18]]]],[17,[[6,[12]]]],[[15,7]],[[16,7],18],[[17,7],12],[[15,7],8],[[16,7],[[8,[18]]]],[[17,7],[[8,[12]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[],15],[[],16],[[],17],0,[15,8],[[16,18],8],[[17,12],8],[12,18],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[[],19],[19],[[19,4],5],[[]],[19,6],[[19,7]],[[19,7],8],0,0,[[]],[[],19],[[19,20],[[8,[20]]]],[[],8],[[],8],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],0,[[[22,[21]]],[[22,[21]]]],[[[22,[21]],[22,[21]]]],[[]],[[],22],[[],[[24,[23]]]],[[[24,[7]]]],[[[24,[7]]]],[[[22,[25]],[22,[25]]],12],[[],12],[[[22,[2]],4],5],[[[24,[2]],4],5],[[[24,[7]]]],[[[24,[7]]]],[[],22],[[]],[26],[[]],[22,6],[[[24,[7]]],6],[22,6],[[[24,[7]]],6],[[22,7]],[[22,7],8],[22],0,[[]],[[]],[22,6],[24,8],[[],22],[[],24],[22,8],[22,6],[[]],[[],8],[[],8],[22,8],[[],8],[[],8],[[],13],[[],13],[22],[[],22],0,0,[[]],[[]],[[]],[[]],0,[[[27,[21]]],[[27,[21]]]],[[[27,[21]],[27,[21]]]],[[]],[[],27],[[],[[28,[23]]]],[[[28,[7]]]],[[[28,[7]]]],[[[27,[25]],[27,[25]]],12],[[],12],[[[27,[2]],4],5],[[[28,[2]],4],5],[[[28,[7]]]],[[[28,[7]]]],[[],27],[26],[[]],[[]],[27,6],[[[28,[7]]],6],[27,6],[[[28,[7]]],6],[[27,7]],[[27,7],8],0,0,[[]],[[]],[27,6],[28,8],[[],27],[[],28],[27,8],[27,6],[[]],[[],8],[[],8],[27,8],[[],8],[[],8],[[],13],[[],13],[[],27]],"c":[],"p":[[3,"Guard"],[8,"Debug"],[3,"OnceCell"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"FnOnce"],[4,"Result"],[3,"Waiter"],[3,"AtomicPtr"],[8,"FnMut"],[15,"bool"],[3,"TypeId"],[15,"usize"],[3,"OnceRef"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"NonZeroUsize"],[3,"OnceBox"],[3,"Box"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"PartialEq"],[15,"never"],[3,"OnceCell"],[3,"Lazy"]]},\
"pest":{"doc":"pest. The Elegant Parser","t":"NENNNDDEENNNGIDDNIDDNENMMMMMAOMMMAMMAFMKAAOMMMMAMAAMFAMAMMFAMMMMNDEEENNNNNLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMFLMMMDDDDMMMAMMMMAMMMAAMMMMMAMMMMADLLLLMLLMLLLLMFLLLLMLMLLLLLDLLLLLLLMLLLLLDLLLLLLLLLLLLLLLMLLLLMFLLMMLLLLLLDLLLLLLMLLLLLLLLLLMLLLMFLLLLMLLMLLMLLLLLLNENLLLLLLLLMMMMMMDLLLLLMLLMLLLFLLMLMLLLLIKNENHDNEENNNGDNNLLMMLLLLLLLLLLLMLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLFLMLMMLLLLLLFLLMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLEENGNDRNGDDGNGNMLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLLLLLLLLLLMLLMLMLMMMLMMMLLLLLLLLLLLLLLLLENDDNMLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLDDDLLLLLLLLLLMLLLLLLLLLLMMLLLLLLLFLLLLMMLLMLLLLLLLLLLLDLLMLLLLLLLLMLLLMLLLLLLNNELLLLLLLLLLLLLLMMMM","n":["Atomic","Atomicity","BottomToTop","CompoundAtomic","End","Lines","LinesSpan","Lookahead","MatchDir","Negative","NonAtomic","None","ParseResult","Parser","ParserState","Position","Positive","RuleType","Span","Stack","Start","Token","TopToBottom","atomicity","attempt_pos","cache","call_tracker","end","error","fails_with","inner","input","input","iterators","lengths","lookahead","macros","merge_spans","neg_attempts","parse","parser","parser_state","parses_to","popped","pos","pos","pos_attempts","position","position","pratt_parser","prec_climber","queue","set_call_limit","span","span","stack","stack","start","state","token","pos","pos","rule","rule","CustomError","Error","ErrorVariant","InputLocation","LineColLocation","ParsingError","Pos","Pos","Span","Span","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","continued_line","enumerate","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","line","line","line_col","location","message","message","new_from_pos","new_from_span","parsing_error_message","path","path","provide","provide","renamed_rules","spacing","start","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","variant","visualize_whitespace","with_path","message","negatives","positives","FlatPairs","Pair","Pairs","Tokens","end","end","end","flat_pairs","input","input","input","input","line_index","line_index","line_index","line_index","pair","pairs","pairs_count","queue","queue","queue","queue","queueable_token","start","start","start","start","tokens","FlatPairs","borrow","borrow_mut","clone","clone_into","end","fmt","from","input","into","into_iter","is_start","len","line_index","new","next","next_back","next_start","next_start_from_end","queue","size_hint","start","to_owned","tokens","try_from","try_into","type_id","LineIndex","borrow","borrow_mut","clone","clone_into","from","into","line_col","line_offsets","new","to_owned","try_from","try_into","type_id","Pair","as_node_tag","as_rule","as_span","as_str","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","get_input","hash","input","into","into_inner","into_span","line_col","line_index","new","pair","pos","queue","start","to_owned","to_string","tokens","try_from","try_into","type_id","Pairs","as_str","borrow","borrow_mut","clone","clone_into","concat","end","eq","equivalent","find_first_tagged","find_tagged","flatten","fmt","fmt","from","get_input","hash","input","into","into_iter","len","line_index","new","next","next_back","pair","pair_from_end","pairs_count","peek","pos","queue","single","size_hint","start","to_owned","to_string","tokens","try_from","try_into","type_id","End","QueueableToken","Start","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","end_token_index","input_pos","input_pos","rule","start_token_index","tag","Tokens","borrow","borrow_mut","clone","clone_into","create_token","end","fmt","from","input","into","into_iter","len","new","next","next_back","queue","size_hint","start","to_owned","try_from","try_into","type_id","Parser","parse","Atomic","Atomicity","BottomToTop","CALL_LIMIT","CallLimitTracker","CompoundAtomic","Lookahead","MatchDir","Negative","NonAtomic","None","ParseResult","ParserState","Positive","TopToBottom","atomic","atomicity","atomicity","attempt_pos","attempts_at","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_tracker","checkpoint","checkpoint_ok","clone","clone","clone","clone_into","clone_into","clone_into","constrain_idxs","current_call_limit","default","end_of_input","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","inc_call_check_limit","increment_depth","into","into","into","into","into","limit_reached","lookahead","lookahead","match_char_by","match_insensitive","match_range","match_string","neg_attempts","new","normalize_index","optional","pos_attempts","position","position","queue","reached_call_limit","repeat","restore","restore_on_err","rule","sequence","set_call_limit","skip","skip_until","stack","stack_drop","stack_match_peek","stack_match_peek_slice","stack_match_pop","stack_peek","stack_pop","stack_push","start_of_input","state","tag_node","to_owned","to_owned","to_owned","track","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Position","at_end","at_start","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","find_line_end","find_line_start","fmt","from","from_start","hash","input","into","line_col","line_of","match_char","match_char_by","match_insensitive","match_range","match_string","new","new_unchecked","partial_cmp","pos","pos","skip","skip_back","skip_until","skip_until_basic","span","to_owned","try_from","try_into","type_id","Affix","Assoc","Infix","InfixFn","Left","Op","PREC_STEP","Postfix","PostfixFn","PrattParser","PrattParserMap","Prec","Prefix","PrefixFn","Right","affix","bitor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","equivalent","expr","fmt","from","from","from","from","from","has_infix","has_postfix","has_prefix","infix","infix","into","into","into","into","into","lbp","led","map_infix","map_postfix","map_prefix","map_primary","new","next","nud","op","ops","parse","phantom","postfix","postfix","pratt","prec","prefix","prefix","primary","rule","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Assoc","Left","Operator","PrecClimber","Right","assoc","bitor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","climb","climb_rec","clone","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from","get","into","into","into","new","new","next","ops","rule","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lines","LinesSpan","Span","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","end","end","end_pos","eq","equivalent","fmt","from","from","from","get","get_input","hash","inner","input","into","into","into","into_iter","into_iter","lines","lines_span","merge_spans","new","new_unchecked","next","next","pos","span","split","start","start","start_pos","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Stack","borrow","borrow_mut","cache","clear_snapshot","default","fmt","from","index","into","is_empty","len","lengths","new","peek","pop","popped","push","restore","snapshot","try_from","try_into","type_id","End","Start","Token","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","to_owned","try_from","try_into","type_id","pos","pos","rule","rule"],"q":[[0,"pest"],[60,"pest::Token"],[64,"pest::error"],[159,"pest::error::ErrorVariant"],[162,"pest::iterators"],[191,"pest::iterators::flat_pairs"],[218,"pest::iterators::line_index"],[232,"pest::iterators::pair"],[265,"pest::iterators::pairs"],[306,"pest::iterators::queueable_token"],[317,"pest::iterators::queueable_token::QueueableToken"],[323,"pest::iterators::tokens"],[346,"pest::parser"],[348,"pest::parser_state"],[468,"pest::position"],[507,"pest::pratt_parser"],[593,"pest::prec_climber"],[637,"pest::span"],[691,"pest::stack"],[714,"pest::token"],[731,"pest::token::Token"]],"d":["prevents implicit whitespace: inside an atomic rule, the …","The current atomicity of a <code>ParserState</code>.","from the bottom to the top of the stack","The same as atomic, but inner tokens are produced as …","The ending <code>Position</code> of a matched <code>Rule</code>","Line iterator for Spans, created by <code>Span::lines()</code>.","Line iterator for Spans, created by <code>Span::lines_span()</code>.","The current lookahead status of a <code>ParserState</code>.","Match direction for the stack. Used in <code>PEEK[a..b]</code>/…","The negative predicate, written as an exclamation mark !, …","implicit whitespace is enabled","No lookahead (i.e. it will consume input).","Type alias to simplify specifying the return value of …","A trait with a single method that parses strings.","The complete state of a <code>Parser</code>.","A cursor position in a <code>&amp;str</code> which provides useful methods …","The positive predicate, written as an ampersand &amp;, …","A trait which parser rules must implement.","A span over a <code>&amp;str</code>. It is created from either two <code>Position</code>s…","Implementation of a <code>Stack</code> which maintains popped elements …","The starting <code>Position</code> of a matched <code>Rule</code>","A token generated by a <code>Parser</code>.","from the top to the bottom of the stack","","","All elements in the stack.","","Safety","Types for different kinds of parsing failures.","Testing tool that compares produced errors.","","","","Types and iterators for parser output.","Every element corresponds to a snapshot, and each element …","","","Merges two spans into one.","","Parses a <code>&amp;str</code> starting from <code>rule</code>.","","","Testing tool that compares produced tokens.","All elements that are in previous snapshots but may not be …","","Safety:","","","","Constructs useful in prefix, postfix, and infix operator …","Constructs useful in infix operator parsing with the …","","Sets the maximum call limit for the parser state to …","","","","","Safety","Creates a <code>ParserState</code> from a <code>&amp;str</code>, supplying it to a …","","starting position","ending position","matched rule","matched rule","Custom error with a message","Parse-related error type.","Different kinds of parsing errors.","Where an <code>Error</code> has occurred.","Line/column where an <code>Error</code> has occurred.","Generated parsing error with expected and unexpected <code>Rule</code>s","<code>Error</code> was created by <code>Error::new_from_pos</code>","Line/column pair if <code>Error</code> was created by …","<code>Error</code> was created by <code>Error::new_from_span</code>","Line/column pairs if <code>Error</code> was created by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the line that the error is on.","","Line/column within the input string","Location within the input string","","Returns the error message for <code>ErrorVariant</code>","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Position</code>.","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Span</code>.","","Returns the path set using <code>Error::with_path()</code>.","","","","Renames all <code>Rule</code>s if this is a <code>ParsingError</code>. It does …","","","","","","","","","","","","","","","","","","","","","","Variant of the error","","Returns <code>Error</code> variant with <code>path</code> which is shown when …","Short explanation","Negative attempts","Positive attempts","An iterator over <code>Pair</code>s. It is created by <code>Pairs::flatten</code>.","A matching pair of <code>Token</code>s and everything between them.","An iterator over <code>Pair</code>s. It is created by <code>pest::state</code> and …","An iterator over <code>Token</code>s. It is created by <code>Pair::tokens</code> and …","","","","","","","","","<code>LineIndex</code> to make a line_offsets, each item is an byte …","","","","","","","Safety","Safety","","Safety:","","","Token index into <code>queue</code>.","","","","An iterator over <code>Pair</code>s. It is created by <code>Pairs::flatten</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Safety","","","","","Safety","","","","Returns the <code>Tokens</code> for these pairs.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns (line, col) of pos.","Offset (bytes) the the beginning of each line, zero-based","","","","","","A matching pair of <code>Token</code>s and everything between them.","Get current node tag","Returns the <code>Rule</code> of the <code>Pair</code>.","Returns the <code>Span</code> defined by the <code>Pair</code>, <strong>without</strong> consuming it.","Captures a slice from the <code>&amp;str</code> defined by the token <code>Pair</code>.","","","","","","","","","Returns the argument unchanged.","Returns the input string of the <code>Pair</code>.","","","Calls <code>U::from(self)</code>.","Returns the inner <code>Pairs</code> between the <code>Pair</code>, consuming it.","Returns the <code>Span</code> defined by the <code>Pair</code>, consuming it.","Returns the <code>line</code>, <code>col</code> of this pair start.","","Safety","","","Safety","Token index into <code>queue</code>.","","","Returns the <code>Tokens</code> for the <code>Pair</code>.","","","","An iterator over <code>Pair</code>s. It is created by <code>pest::state</code> and …","Captures a slice from the <code>&amp;str</code> defined by the starting …","","","","","Captures inner token <code>Pair</code>s and concatenates resulting <code>&amp;str</code>…","","","","Finds the first pair that has its node or branch tagged …","Returns the iterator over pairs that have their node or …","Flattens the <code>Pairs</code>.","","","Returns the argument unchanged.","Returns the input string of <code>Pairs</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Peek at the first inner <code>Pair</code> without changing the position …","","","Create a new <code>Pairs</code> iterator containing just the single <code>Pair</code>…","","","","","Returns the <code>Tokens</code> for the <code>Pairs</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","An iterator over <code>Token</code>s. It is created by <code>Pair::tokens</code> and …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Safety:","","","","","","","A trait with a single method that parses strings.","Parses a <code>&amp;str</code> starting from <code>rule</code>.","prevents implicit whitespace: inside an atomic rule, the …","The current atomicity of a <code>ParserState</code>.","from the bottom to the top of the stack","","","The same as atomic, but inner tokens are produced as …","The current lookahead status of a <code>ParserState</code>.","Match direction for the stack. Used in <code>PEEK[a..b]</code>/…","The negative predicate, written as an exclamation mark !, …","implicit whitespace is enabled","No lookahead (i.e. it will consume input).","Type alias to simplify specifying the return value of …","The complete state of a <code>Parser</code>.","The positive predicate, written as an ampersand &amp;, …","from the top to the bottom of the stack","Transformation which stops <code>Token</code>s from being generated …","Returns the current atomicity of the <code>ParserState</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to match the end of the input. Returns <code>Ok</code> with …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Starts a lookahead transformation provided by <code>f</code> from the …","","Attempts to match a single character based on a filter …","Attempts to case-insensitively match the given string. …","Attempts to match a single character from the given range. …","Attempts to match the given string. Returns <code>Ok</code> with the …","","Allocates a fresh <code>ParserState</code> object to the heap and …","Normalizes the index using its sequence’s length. …","Optionally applies the transformation provided by <code>f</code> from …","","Returns a reference to the current <code>Position</code> of the …","","","","Repeatedly applies the transformation provided by <code>f</code> from …","","Restores the original state of the <code>ParserState</code> when <code>f</code> …","Wrapper needed to generate tokens. This will associate the …","Starts a sequence of transformations provided by <code>f</code> from …","Sets the maximum call limit for the parser state to …","Attempts to skip <code>n</code> characters forward. Returns <code>Ok</code> with the …","Attempts to skip forward until one of the given strings is …","","Drops the top of the stack. Returns <code>Ok(Box&lt;ParserState&gt;)</code> …","Matches the full state of the stack.","Matches part of the state of the stack.","Matches the full state of the stack. This method will …","Peeks the top of the stack and attempts to match the …","Pops the top of the stack and attempts to match the …","Evaluates the result of closure <code>f</code> and pushes the span of …","Attempts to match the start of the input. Returns <code>Ok</code> with …","Creates a <code>ParserState</code> from a <code>&amp;str</code>, supplying it to a …","Tag current node","","","","","","","","","","","","","","","","","","","","A cursor position in a <code>&amp;str</code> which provides useful methods …","Returns <code>true</code> when the <code>Position</code> points to the end of the …","Returns <code>true</code> when the <code>Position</code> points to the start of the …","","","","","","","","","","","Returns the argument unchanged.","Creates a <code>Position</code> at the start of a <code>&amp;str</code>.","","","Calls <code>U::from(self)</code>.","Returns the line and column number of this <code>Position</code>.","Returns the entire line of the input that contains this …","Matches the char at the <code>Position</code> against a specified …","Matches the char at the <code>Position</code> against a filter function …","Case-insensitively matches <code>string</code> from the <code>Position</code> and …","Matches <code>char</code> <code>range</code> from the <code>Position</code> and returns <code>true</code> if a …","Matches <code>string</code> from the <code>Position</code> and returns <code>true</code> if a …","Attempts to create a new <code>Position</code> at the given position. …","Create a new <code>Position</code> without checking invariants. …","","Returns the byte position of this <code>Position</code> as a <code>usize</code>.","Safety:","Skips <code>n</code> <code>char</code>s from the <code>Position</code> and returns <code>true</code> if the …","Goes back <code>n</code> <code>char</code>s from the <code>Position</code> and returns <code>true</code> if …","Skips until one of the given <code>strings</code> is found. If none of …","","Creates a <code>Span</code> from two <code>Position</code>s.","","","","","","Associativity of an infix binary operator, used by …","","","Left operator associativity. Evaluate expressions from …","An operator that corresponds to a rule.","","","","Struct containing operators and precedences, which can …","Product of calling <code>map_primary</code> on <code>PrattParser</code>, defines how …","","","","Right operator associativity. Evaluate expressions from …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Defines <code>rule</code> as an infix binary operator with …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Left-Binding-Power","Left-Denotation","Maps infix operators with a closure <code>infix</code>.","Maps postfix operators with closure <code>postfix</code>.","Maps prefix operators with closure <code>prefix</code>.","Maps primary expressions with a closure <code>primary</code>.","Instantiate a new <code>PrattParser</code>.","","Null-Denotation","Add <code>op</code> to <code>PrattParser</code>.","","The last method to call on the provided pairs to execute …","","Defines <code>rule</code> as a postfix unary operator.","","","","Defines <code>rule</code> as a prefix unary operator.","","","","","","","","","","","","","","","","","","","","Associativity of an <code>Operator</code>.","Left <code>Operator</code> associativity","Infix operator used in <code>PrecClimber</code>.","List of operators and precedences, which can perform …","Right <code>Operator</code> associativity","","","","","","","","","Performs the precedence climbing algorithm on the <code>pairs</code> in …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Operator</code> from a <code>Rule</code> and <code>Assoc</code>.","Creates a new <code>PrecClimber</code> from the <code>Operator</code>s contained in …","","","","","","","","","","","","","","Line iterator for Spans, created by <code>Span::lines()</code>.","Line iterator for Spans, created by <code>Span::lines_span()</code>.","A span over a <code>&amp;str</code>. It is created from either two <code>Position</code>s…","Captures a slice from the <code>&amp;str</code> defined by the <code>Span</code>.","","","","","","","","","Returns the <code>Span</code>’s end byte position as a <code>usize</code>.","Safety","Returns the <code>Span</code>’s end <code>Position</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to create a new span based on a sub-range.","Returns the input string of the <code>Span</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iterates over all lines (partially) covered by this span. …","Iterates over all lines (partially) covered by this span. …","Merges two spans into one.","Attempts to create a new span. Will return <code>None</code> if …","Create a new <code>Span</code> without checking invariants. (Checked …","","","","","Splits the <code>Span</code> into a pair of <code>Position</code>s.","Returns the <code>Span</code>’s start byte position as a <code>usize</code>.","Safety","Returns the <code>Span</code>’s start <code>Position</code>.","","","","","","","","","","","Implementation of a <code>Stack</code> which maintains popped elements …","","","All elements in the stack.","The parsing after the last snapshot was successful so …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the stack is currently empty.","Returns the size of the stack","Every element corresponds to a snapshot, and each element …","Creates a new <code>Stack</code>.","Returns the top-most <code>&amp;T</code> in the <code>Stack</code>.","Pops the top-most <code>T</code> from the <code>Stack</code>.","All elements that are in previous snapshots but may not be …","Pushes a <code>T</code> onto the <code>Stack</code>.","Rewinds the <code>Stack</code> to the most recent <code>snapshot()</code>. If no …","Takes a snapshot of the current <code>Stack</code>.","","","","The ending <code>Position</code> of a matched <code>Rule</code>","The starting <code>Position</code> of a matched <code>Rule</code>","A token generated by a <code>Parser</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","starting position","ending position","matched rule","matched rule"],"i":[40,0,43,40,37,0,0,0,0,42,40,42,0,0,0,0,42,0,0,0,37,0,43,38,38,62,38,1,0,0,60,22,1,0,62,38,0,0,38,63,0,0,0,62,61,22,38,0,38,0,0,38,0,0,61,0,38,1,0,0,64,65,64,65,11,0,0,0,0,11,12,13,12,13,5,11,12,13,5,11,12,13,5,11,12,13,5,11,12,13,5,5,5,11,12,13,5,11,12,13,5,5,11,11,12,13,5,5,11,12,13,13,13,5,11,12,13,5,11,12,13,5,5,5,5,5,11,5,5,5,5,5,5,11,5,5,5,5,11,12,13,5,11,5,11,12,13,5,11,12,13,5,11,12,13,5,5,0,5,66,67,67,0,0,0,0,28,4,33,0,28,35,4,33,0,28,35,4,0,0,4,28,35,4,33,0,28,35,4,33,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,0,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,30,0,30,30,30,30,30,30,30,30,30,68,68,69,69,69,69,0,33,33,33,33,33,33,33,33,33,33,33,33,0,33,33,33,33,33,33,33,33,33,0,63,40,0,43,0,0,40,0,0,42,40,42,0,0,42,43,38,38,38,38,38,42,40,43,46,38,42,40,43,46,38,38,38,38,42,40,43,42,40,43,0,46,46,38,42,40,43,42,40,43,42,40,43,46,38,42,40,43,46,38,38,46,42,40,43,46,38,46,38,38,38,38,38,38,38,38,0,38,38,38,38,38,38,38,38,38,38,38,0,38,38,38,38,38,38,38,38,38,38,38,0,38,42,40,43,38,42,40,43,46,38,42,40,43,46,38,42,40,43,46,38,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,70,0,50,0,0,70,0,0,0,0,70,0,50,49,49,49,70,51,52,50,49,70,51,52,50,50,50,51,50,50,52,50,49,70,51,52,50,51,51,51,49,52,49,70,51,52,50,52,52,52,52,52,51,51,49,52,51,51,52,52,49,52,52,51,49,52,52,49,50,49,70,51,52,50,49,70,51,52,50,49,70,51,52,50,0,58,0,0,58,56,56,58,56,57,58,56,57,57,57,58,58,58,58,58,56,57,58,56,57,57,58,56,57,56,57,56,57,56,58,58,56,57,58,56,57,58,56,57,0,0,0,1,61,60,1,61,60,1,1,1,1,1,1,1,1,1,61,60,1,1,1,1,60,1,61,60,1,61,60,1,1,0,1,1,61,60,61,61,1,1,1,1,1,61,60,1,61,60,1,61,60,1,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,64,65,64,65],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],[[2,[1]]]],0,[3,[[6,[4,5]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[7]]]],0,0,0,0,0,[[3,8],[[6,[[4,[9]],[5,[9]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[10]]],[[5,[10]]]],[[[11,[10]]],[[11,[10]]]],[12,12],[13,13],[[]],[[]],[[]],[[]],0,[[[14,[9]],15],16],[[[5,[17]],[5,[17]]],18],[[[11,[17]],[11,[17]]],18],[[12,12],18],[[13,13],18],[[],18],[[],18],[[],18],[[],18],[[[5,[19]],20],21],[[[5,[9]],20],21],[[[11,[19]],20],21],[[[11,[9]],20],21],[[12,20],21],[[13,20],21],[[[5,[9]]],16],[[]],[[]],[[]],[[]],[22,13],[1,13],[[[5,[23]],24]],[[[11,[23]],24]],[[12,24]],[[13,24]],[[]],[[]],[[]],[[]],[[[5,[9]]],3],0,0,0,[[[5,[9]]],16],[[[11,[9]]],[[25,[3]]]],[[[11,[9]],22],[[5,[9]]]],[[[11,[9]],1],[[5,[9]]]],[[[14,[9]],[14,[9]],15],16],[[[5,[9]]],[[2,[3]]]],0,[26],[26],[[[5,[9]],15],[[5,[9]]]],[[[5,[9]]],16],[[[5,[9]]]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[[5,[9]]],16],0,[3,16],[[[5,[9]],3],[[5,[9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[28,[10]]],[[28,[10]]]],[[]],0,[[[28,[9]],20],21],[[]],0,[[]],[[]],[[[28,[9]],29],18],[[[28,[9]]],29],0,[[[32,[[31,[[30,[9]]]]]],3,29,29],[[28,[9]]]],[[[28,[9]]],2],[[[28,[9]]],2],[[[28,[9]]]],[[[28,[9]]]],0,[[[28,[9]]]],0,[[]],[[[28,[9]]],[[33,[9]]]],[[],6],[[],6],[[],27],0,[[]],[[]],[34,34],[[]],[[]],[[]],[[34,3,29]],0,[3,34],[[]],[[],6],[[],6],[[],27],0,[[[35,[9]]],[[2,[3]]]],[[[35,[9]]],9],[[[35,[9]]],1],[[[35,[9]]],3],[[]],[[]],[[[35,[10]]],[[35,[10]]]],[[]],[[[35,[17]],[35,[17]]],18],[[],18],[[[35,[9]],20],21],[[[35,[9]],20],21],[[]],[[[35,[9]]],3],[[[35,[23]],24]],0,[[]],[[[35,[9]]],[[4,[9]]]],[[[35,[9]]],1],[[[35,[9]]]],0,[[[32,[[31,[[30,[9]]]]]],3,[32,[34]],29],[[35,[9]]]],[[[35,[9]]],29],[[[35,[9]],29],29],0,0,[[]],[[],16],[[[35,[9]]],[[33,[9]]]],[[],6],[[],6],[[],27],0,[[[4,[9]]],3],[[]],[[]],[[[4,[10]]],[[4,[10]]]],[[]],[[[4,[9]]],16],0,[[[4,[17]],[4,[17]]],18],[[],18],[[[4,[9]],3],[[2,[[35,[9]]]]]],[[[4,[9]],3],[[36,[[28,[9]],15]]]],[[[4,[9]]],[[28,[9]]]],[[[4,[9]],20],21],[[[4,[9]],20],21],[[]],[[[4,[9]]],3],[[[4,[23]],24]],0,[[]],[[]],[[[4,[9]]],29],0,[[[32,[[31,[[30,[9]]]]]],3,[2,[[32,[34]]]],29,29],[[4,[9]]]],[[[4,[9]]],2],[[[4,[9]]],2],[[[4,[9]]],29],[[[4,[9]]],29],0,[[[4,[9]]],[[2,[[35,[9]]]]]],[[[4,[9]],29],29],0,[[[35,[9]]],[[4,[9]]]],[[[4,[9]]]],0,[[]],[[],16],[[[4,[9]]],[[33,[9]]]],[[],6],[[],6],[[],27],0,0,0,[[]],[[]],[[[30,[19]],20],21],[[]],[[]],[[],6],[[],6],[[],27],0,0,0,0,0,0,0,[[]],[[]],[[[33,[10]]],[[33,[10]]]],[[]],[[[33,[9]],29],[[37,[9]]]],0,[[[33,[9]],20],21],[[]],0,[[]],[[]],[[[33,[9]]],29],[[[32,[[31,[[30,[9]]]]]],3,29,29],[[33,[9]]]],[[[33,[9]]],2],[[[33,[9]]],2],0,[[[33,[9]]]],0,[[]],[[],6],[[],6],[[],27],0,[3,[[6,[4,5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[39,[[38,[9]]]],40,8],[[41,[[39,[[38,[9]]]]]]]],[[[38,[9]]],40],0,0,[[[38,[9]],29],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[39,[[38,[9]]]]],[[39,[[38,[9]]]]]],[[[39,[[38,[9]]]]],[[39,[[38,[9]]]]]],[42,42],[40,40],[43,43],[[]],[[]],[[]],[[44,[2,[44]],29],[[2,[[45,[29]]]]]],0,[[],46],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[42,42],18],[[40,40],18],[[43,43],18],[[],18],[[],18],[[],18],[[42,20],21],[[40,20],21],[[43,20],21],[[46,20],21],[[[38,[[0,[19,9]]]],20],21],[[]],[[]],[[]],[[]],[[]],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[46],[[]],[[]],[[]],[[]],[[]],[46,18],[[[39,[[38,[9]]]],18,8],[[41,[[39,[[38,[9]]]]]]]],0,[[[39,[[38,[9]]]],8],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],3],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],[45,[47]]],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],3],[[41,[[39,[[38,[9]]]]]]]],0,[3,[[39,[[38,[9]]]]]],[[44,29],[[2,[29]]]],[[[39,[[38,[9]]]],8],[[41,[[39,[[38,[9]]]]]]]],0,[[[38,[9]]],22],0,0,[[[38,[9]]],18],[[[39,[[38,[9]]]],15],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]]],[[39,[[38,[9]]]]]],[[[39,[[38,[9]]]],8],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],9,8],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],8],[[41,[[39,[[38,[9]]]]]]]],[[[2,[7]]]],[[[39,[[38,[9]]]],29],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],[14,[3]]],[[41,[[39,[[38,[9]]]]]]]],0,[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],44,[2,[44]],43],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]],8],[[41,[[39,[[38,[9]]]]]]]],[[[39,[[38,[9]]]]],[[41,[[39,[[38,[9]]]]]]]],[[3,8],[[6,[[4,[9]],[5,[9]]]]]],[[[39,[[38,[9]]]],[25,[3]]],[[41,[[39,[[38,[9]]]]]]]],[[]],[[]],[[]],[[[38,[9]],9,29,29,29,29]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],0,[22,18],[22,18],[[]],[[]],[22,22],[[]],[[22,22],48],[[22,22],18],[[],18],[22,29],[22,29],[[22,20],21],[[]],[3,22],[[22,24]],0,[[]],[22],[22,3],[[22,47],18],[[22,8],18],[[22,3],18],[[22,[45,[47]]],18],[[22,3],18],[[3,29],[[2,[22]]]],[[3,29],22],[[22,22],[[2,[48]]]],[22,29],0,[[22,29],18],[[22,29],18],[[22,[14,[3]]],18],[[22,[14,[3]]],18],[[22,22],1],[[]],[[],6],[[],6],[[],27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[49,[9]],[49,[9]]],[[49,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[[]],[[],[[51,[9]]]],[[50,50],18],[[],18],[[[52,[9,15]],[54,[53]],55]],[[50,20],21],[[]],[[]],[[]],[[]],[[]],0,0,0,[[9,50],[[49,[9]]]],0,[[]],[[]],[[]],[[]],[[]],[[[52,[9,15]],[54,[53]]],55],[[[52,[9,15]],[54,[53]]]],[[[52,[9,15]],15],[[52,[9,15]]]],[[[52,[9,15]],15],[[52,[9,15]]]],[[[52,[9,15]],15],[[52,[9,15]]]],[[[51,[9]],15],[[52,[9,15]]]],[[],[[51,[9]]]],0,[[[52,[9,15]],[54,[53]]]],[[[51,[9]],[49,[9]]],[[51,[9]]]],0,[[[52,[9,15]],53]],0,[9,[[49,[9]]]],0,0,0,[9,[[49,[9]]]],0,0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],0,0,0,0,0,0,[[[56,[9]],[56,[9]]],[[56,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[9]],53,15,15]],[[[57,[9]],55,[54,[53]],15,15]],[58,58],[[]],[[58,58],18],[[],18],[[58,20],21],[[[56,[[0,[19,9]]]],20],21],[[[57,[[0,[19,10]]]],20],21],[[]],[[]],[[]],[[[57,[9]],9],2],[[]],[[]],[[]],[[9,58],[[56,[9]]]],[[[31,[[56,[9]]]]],[[57,[9]]]],0,0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],0,0,0,[1,3],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[1,29],0,[1,22],[[1,1],18],[[],18],[[1,20],21],[[]],[[]],[[]],[[1,[59,[29]]],[[2,[1]]]],[1,3],[[1,24]],0,0,[[]],[[]],[[]],[[]],[[]],[1,60],[1,61],[[1,1],[[2,[1]]]],[[3,29,29],[[2,[1]]]],[[3,29,29],1],[61,2],[60,2],0,0,[1],[1,29],0,[1,22],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],0,[[]],[[]],0,[[[62,[10]]]],[[],[[62,[10]]]],[[[62,[[0,[19,10]]]],20],21],[[]],[[[62,[10]],[45,[29]]],[[14,[10]]]],[[]],[[[62,[10]]],18],[[[62,[10]]],29],0,[[],[[62,[10]]]],[[[62,[10]]],[[2,[10]]]],[[[62,[10]]],[[2,[10]]]],0,[[[62,[10]],10]],[[[62,[10]]]],[[[62,[10]]]],[[],6],[[],6],[[],27],0,0,0,[[]],[[]],[[[37,[10]]],[[37,[10]]]],[[]],[[[37,[17]],[37,[17]]],18],[[],18],[[[37,[19]],20],21],[[]],[[[37,[23]],24]],[[]],[[]],[[],6],[[],6],[[],27],0,0,0,0],"c":[50,251,593,594,595,596,597,598,599,606,607,608,610,612,613,614,618,622,623,624,625,626],"p":[[3,"Span"],[4,"Option"],[15,"str"],[3,"Pairs"],[3,"Error"],[4,"Result"],[3,"NonZeroUsize"],[8,"FnOnce"],[8,"RuleType"],[8,"Clone"],[4,"ErrorVariant"],[4,"InputLocation"],[4,"LineColLocation"],[15,"slice"],[8,"FnMut"],[3,"String"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Position"],[8,"Hash"],[8,"Hasher"],[4,"Cow"],[3,"Demand"],[3,"TypeId"],[3,"FlatPairs"],[15,"usize"],[4,"QueueableToken"],[3,"Vec"],[3,"Rc"],[3,"Tokens"],[3,"LineIndex"],[3,"Pair"],[3,"Filter"],[4,"Token"],[3,"ParserState"],[3,"Box"],[4,"Atomicity"],[6,"ParseResult"],[4,"Lookahead"],[4,"MatchDir"],[15,"i32"],[3,"Range"],[3,"CallLimitTracker"],[15,"char"],[4,"Ordering"],[3,"Op"],[4,"Assoc"],[3,"PrattParser"],[3,"PrattParserMap"],[8,"Iterator"],[3,"Peekable"],[15,"u32"],[3,"Operator"],[3,"PrecClimber"],[4,"Assoc"],[8,"RangeBounds"],[3,"Lines"],[3,"LinesSpan"],[3,"Stack"],[8,"Parser"],[13,"Start"],[13,"End"],[13,"CustomError"],[13,"ParsingError"],[13,"Start"],[13,"End"],[4,"Affix"]]},\
"pest_derive":{"doc":"pest. The Elegant Parser","t":"Y","n":["Parser"],"q":[[0,"pest_derive"]],"d":["The main method that’s called by the proc macro (a …"],"i":[0],"f":[0],"c":[],"p":[]},\
"pest_generator":{"doc":"pest generator","t":"NENDLLLLFALLLLAMFLLAMMFFLLLLLLDLLFLLMLMLLLDLLFLFFFFFFFFFLFFLLLLLOO","n":["File","GrammarSource","Inline","ParsedDerive","borrow","borrow","borrow_mut","borrow_mut","derive_parser","docs","eq","fmt","from","from","generator","generics","get_attribute","into","into","macros","name","non_exhaustive","parse_derive","read_file","try_from","try_from","try_into","try_into","type_id","type_id","DocComment","borrow","borrow_mut","consume","fmt","from","grammar_doc","into","line_docs","try_from","try_into","type_id","QuoteOption","borrow","borrow_mut","box_type","from","generate","generate_builtin_rules","generate_enum","generate_expr","generate_expr_atomic","generate_include","generate_patterns","generate_rule","generate_skip","into","option_type","result_type","span","to_tokens","try_from","try_into","type_id","generate_rule","insert_builtin"],"q":[[0,"pest_generator"],[30,"pest_generator::docs"],[42,"pest_generator::generator"],[64,"pest_generator::macros"]],"d":["","","","","","","","","Processes the derive/proc macro input and generates the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Consume pairs to matches <code>Rule::grammar_doc</code>, <code>Rule::line_doc</code> …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","HashMap for store all doc_comments for rules. key is rule …","","","","","","","","Returns the argument unchanged.","","","","","","Generate Rust <code>include_str!</code> for grammar files, then Cargo …","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[3,0,3,0,17,3,17,3,0,0,3,3,17,3,0,17,0,17,3,0,17,17,0,0,17,3,17,3,17,3,0,16,16,0,16,16,16,16,16,16,16,16,0,27,27,0,27,0,0,0,0,0,0,0,0,0,27,0,0,27,27,27,27,27,0,0],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],1],0,[[3,3],2],[[3,4],5],[[]],[[]],0,0,[6,3],[[]],[[]],0,0,0,[7],[[[9,[8]]],[[11,[10]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[[[15,[14]]],16],[[16,4],5],[[]],0,[[]],0,[[],12],[[],12],[[],13],0,[[]],[[]],[[],1],[[]],[[17,[19,[18]],[19,[20]],[19,[21]],16,2],1],[[],19],[[[22,[20]],16,2,2],1],[23,1],[23,1],[[24,[19,[18]]],1],[[[22,[20]],2],1],[20,1],[[[22,[20]]],1],[[]],[[],1],[[],1],[[],25],[[[27,[26]],1]],[[],12],[[],12],[[],13],0,0],"c":[],"p":[[3,"TokenStream"],[15,"bool"],[4,"GrammarSource"],[3,"Formatter"],[6,"Result"],[3,"Attribute"],[3,"DeriveInput"],[3,"Path"],[8,"AsRef"],[3,"String"],[6,"Result"],[4,"Result"],[3,"TypeId"],[4,"Rule"],[3,"Pairs"],[3,"DocComment"],[3,"ParsedDerive"],[3,"PathBuf"],[3,"Vec"],[3,"OptimizedRule"],[15,"str"],[15,"slice"],[4,"OptimizedExpr"],[3,"Ident"],[3,"Span"],[8,"ToTokens"],[3,"QuoteOption"]]},\
"pest_meta":{"doc":"pest meta","t":"GAAFAFANNNEDNNNNNNNNNNNNNNNNDENNNNLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLMLLLLNNNNNEDDNNNNNNNNNLLLLLLLLLLAMLLLLMALLLLLLLLLLLLALLMLLMFAMAFAFLLLLLLLLLMLLLAFFFFFFFFFNNNNNNNEDDNDNNNNNNNNNENNNNNNNNNLLLLLLNNLLLLLLNNNNNNFFFFFLLLLLLNMNLLLLLLLFANNNNNNNNNNNLLLNNNMNNMNNNNNNNNFNNNNNNNFNNNNNNNNNNMMNNNNLLLLLLLLLMLLLFNNNDENNNNNNNLLLLNNLLNNNLNNNLLNNLLLNNNLNNNNNNNNLLNNNNNNNNNNNNNLLNNNNNNNNNNNNNNNNNNNNNLLLLLLLNHHHFFFFFFFFFFFFFF","n":["UsedBuiltinAndOptimized","ast","optimizer","parse_and_optimize","parser","unwrap_or_report","validator","Atomic","Choice","CompoundAtomic","Expr","ExprTopDownIterator","Ident","Insens","NegPred","NonAtomic","Normal","Opt","PeekSlice","PosPred","Push","Range","Rep","RepExact","RepMax","RepMin","RepMinMax","RepOnce","Rule","RuleType","Seq","Silent","Skip","Str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","eq","eq","eq","equivalent","equivalent","equivalent","expr","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","iter_top_down","iterate_expr","map_bottom_up","map_top_down","name","new","next","next","right_branches","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","Choice","Ident","Insens","NegPred","Opt","OptimizedExpr","OptimizedExprTopDownIterator","OptimizedRule","PeekSlice","PosPred","Push","Range","Rep","RestoreOnErr","Seq","Skip","Str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","concatenator","current","eq","eq","equivalent","equivalent","expr","factorizer","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","iter_top_down","iterate_expr","lister","map_bottom_up","map_top_down","name","new","next","next","optimize","restorer","right_branches","rotater","rule_to_optimized_rule","skipper","to_hash_map","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","unroller","concatenate","factor","list","child_modifies_state","restore_on_err","wrap_branching_exprs","rotate","skip","unroll","COMMENT","Choice","EOI","Ident","Insens","NegPred","Opt","ParserExpr","ParserNode","ParserRule","PeekSlice","PestParser","PosPred","Push","Range","Rep","RepExact","RepMax","RepMin","RepMinMax","RepOnce","Rule","Seq","Str","WHITESPACE","_push","alpha","alpha_num","assignment_operator","atomic_modifier","block_comment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","character","choice_operator","clone","clone","clone","clone_into","clone_into","clone_into","closing_brace","closing_brack","closing_paren","code","comma","compound_atomic_modifier","consume_expr","consume_rules","consume_rules_with_spans","convert_node","convert_rule","eq","eq","eq","equivalent","equivalent","equivalent","escape","expr","expression","filter_map_top_down","fmt","fmt","fmt","from","from","from","get_node_tag","grammar","grammar_doc","grammar_rule","grammar_rules","hex_digit","identifier","infix_operator","inner_chr","inner_doc","inner_str","insensitive_string","integer","into","into","into","line_comment","line_doc","modifier","name","negative_predicate_operator","newline","node","node","node_tag","non_atomic_modifier","number","opening_brace","opening_brack","opening_paren","optional_operator","parse","peek_slice","positive_predicate_operator","postfix_operator","prefix_operator","quote","range","range_operator","rename_meta_rule","repeat_exact","repeat_max","repeat_min","repeat_min_max","repeat_once_operator","repeat_operator","sequence_operator","silent_modifier","single_quote","space","span","span","string","tag_id","term","terminal","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","unescape","unicode","COMMENT","EOI","PestParser","Rule","WHITESPACE","_push","alpha","alpha_num","assignment_operator","atomic_modifier","block_comment","borrow","borrow","borrow_mut","borrow_mut","character","choice_operator","clone","clone_into","closing_brace","closing_brack","closing_paren","cmp","code","comma","compound_atomic_modifier","eq","equivalent","escape","expression","fmt","from","from","grammar_doc","grammar_rule","grammar_rules","hash","hex_digit","identifier","infix_operator","inner_chr","inner_doc","inner_str","insensitive_string","integer","into","into","line_comment","line_doc","modifier","negative_predicate_operator","newline","node","node_tag","non_atomic_modifier","number","opening_brace","opening_brack","opening_paren","optional_operator","parse","partial_cmp","peek_slice","positive_predicate_operator","postfix_operator","prefix_operator","quote","range","range_operator","repeat_exact","repeat_max","repeat_min","repeat_min_max","repeat_once_operator","repeat_operator","sequence_operator","silent_modifier","single_quote","space","string","tag_id","term","terminal","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unicode","BUILTINS","PEST_KEYWORDS","RUST_KEYWORDS","is_non_failing","is_non_progressing","left_recursion","to_hash_map","validate_already_defined","validate_ast","validate_choices","validate_left_recursion","validate_pairs","validate_pest_keywords","validate_repetition","validate_rust_keywords","validate_undefined","validate_whitespace_comment"],"q":[[0,"pest_meta"],[7,"pest_meta::ast"],[95,"pest_meta::optimizer"],[170,"pest_meta::optimizer::concatenator"],[171,"pest_meta::optimizer::factorizer"],[172,"pest_meta::optimizer::lister"],[173,"pest_meta::optimizer::restorer"],[176,"pest_meta::optimizer::rotater"],[177,"pest_meta::optimizer::skipper"],[178,"pest_meta::optimizer::unroller"],[179,"pest_meta::parser"],[322,"pest_meta::parser::grammar"],[413,"pest_meta::validator"]],"d":["A tuple returned by the validation and processing of the …","Types for the pest’s abstract syntax tree.","Different optimizations for pest’s ASTs.","Parses, validates, processes and optimizes the provided …","Types and helpers for the pest’s own grammar parser.","A helper that will unwrap the result or panic with the …","Helpers for validating pest grammars that could help with …","atomic rule prevent implicit whitespace: inside an atomic …","Matches either of two expressions, e.g. <code>e1 | e2</code>","Compound atomic rules are similar to atomic rules, but …","All possible rule expressions","The top down iterator for an expression.","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t match, …","Non-atomic rules cancel the effect of atomic rules. (their …","The normal rule type","Optionally matches an expression, e.g. <code>e?</code>","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>&#39;a&#39;..&#39;z&#39;</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Matches an expression an exact number of times, e.g. <code>e{n}</code>","Matches an expression at most a number of times, e.g. <code>e{,n}</code>","Matches an expression at least a number of times, e.g. …","Matches an expression a number of times within a range, …","Matches an expression one or more times, e.g. <code>e+</code>","A grammar rule","All possible rule types","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Silent rules are just like normal rules — when run, they …","Continues to match expressions until one of the strings in …","Matches an exact string, e.g. <code>&quot;a&quot;</code>","","","","","","","","","","","","","","","","","","","","","","The rule’s expression","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the iterator that steps the expression from top to …","","Applies <code>f</code> to the expression and all its children (bottom …","Applies <code>f</code> to the expression and all its children (top to …","The name of the rule","Constructs a top-down iterator from the expression.","","","","","","","","","","","","","","","","The rule’s type (silent, atomic, …)","","","","","Matches either of two expressions, e.g. <code>e1 | e2</code>","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t match, …","Optionally matches an expression, e.g. <code>e?</code>","The optimized version of the pest AST’s <code>Expr</code>.","A top-down iterator over an <code>OptimizedExpr</code>.","The optimized version of the pest AST’s <code>Rule</code>.","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>&#39;a&#39;..&#39;z&#39;</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Restores an expression’s checkpoint","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Continues to match expressions until one of the strings in …","Matches an exact string, e.g. <code>&quot;a&quot;</code>","","","","","","","","","","","","","","","","","The optimized expression of the rule.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a top-down iterator over the <code>OptimizedExpr</code>.","","","Applies <code>f</code> to the <code>OptimizedExpr</code> bottom-up.","Applies <code>f</code> to the <code>OptimizedExpr</code> top-down.","The name of the rule.","Creates a new top down iterator from an <code>OptimizedExpr</code>.","","","Takes pest’s ASTs and optimizes them","","","","","","","","","","","","","","","","The type of the rule.","","","","","","","","","","","","","","A grammar comment.","Matches either of two expressions, e.g. <code>e1 | e2</code>","","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t match, …","Optionally matches an expression, e.g. <code>e?</code>","All possible parser expressions","The pest grammar node","The pest grammar rule","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>&#39;a&#39;..&#39;z&#39;</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Matches an expression an exact number of times, e.g. <code>e{n}</code>","Matches an expression at most a number of times, e.g. <code>e{,n}</code>","Matches an expression at least a number of times, e.g. …","Matches an expression a number of times within a range, …","Matches an expression one or more times, e.g. <code>e+</code>","Pest meta-grammar","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Matches an exact string, e.g. <code>&quot;a&quot;</code>","A whitespace character.","A PUSH expression.","An alpha character.","An alphanumeric character.","Assignment operator.","Atomic rule prefix.","A multi-line comment.","","","","","","","A single quoted character","A choice operator.","","","","","","","Closing brace for a rule.","Closing bracket for PEEK (slice inside).","Closing parenthesis for a branch, PUSH, etc.","A hexadecimal code.","A comma terminal.","Compound atomic rule prefix.","","Converts a parser’s result (<code>Pairs</code>) to an AST","","","","","","","","","","An escape sequence.","The node’s expression","A rule expression.","will remove nodes that do not match <code>f</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A top-level comment.","A rule of a grammar.","The top-level rule of a grammar.","A hexadecimal digit.","An identifier.","Branches or sequences.","An escaped or any character.","A comment content.","A quoted string.","An insensitive string.","An integer number (positive or negative).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A single line comment.","A rule comment.","A rule modifier.","The rule’s name","A negative predicate.","A newline character.","The rule’s parser node","A rule node (inside terms).","For assigning labels to nodes.","Non-atomic rule prefix.","A number.","Opening brace for a rule.","Opening bracket for PEEK (slice inside).","Opening parenthesis for a branch, PUSH, etc.","An optional operator.","A helper that will parse using the pest grammar","A PEEK expression.","A positive predicate.","Possible modifiers for a rule.","Possible predicates for a rule.","A double quote.","A character range.","A range operator.","A helper function to rename verbose rules for the sake of …","A repeat exact times.","A repeat at most times.","A repeat at least times.","A repeat in a range.","A repeat at least once operator.","A repeat operator.","A sequence operator.","Silent rule prefix.","A single quote.","A space character.","The rule’s span","The node’s span","A string.","A tag label.","A rule term.","A terminal expression.","","","","","","","","","","The rule’s type","","","","","A unicode code.","A grammar comment.","","","Pest meta-grammar","A whitespace character.","A PUSH expression.","An alpha character.","An alphanumeric character.","Assignment operator.","Atomic rule prefix.","A multi-line comment.","","","","","A single quoted character","A choice operator.","","","Closing brace for a rule.","Closing bracket for PEEK (slice inside).","Closing parenthesis for a branch, PUSH, etc.","","A hexadecimal code.","A comma terminal.","Compound atomic rule prefix.","","","An escape sequence.","A rule expression.","","Returns the argument unchanged.","Returns the argument unchanged.","A top-level comment.","A rule of a grammar.","The top-level rule of a grammar.","","A hexadecimal digit.","An identifier.","Branches or sequences.","An escaped or any character.","A comment content.","A quoted string.","An insensitive string.","An integer number (positive or negative).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A single line comment.","A rule comment.","A rule modifier.","A negative predicate.","A newline character.","A rule node (inside terms).","For assigning labels to nodes.","Non-atomic rule prefix.","A number.","Opening brace for a rule.","Opening bracket for PEEK (slice inside).","Opening parenthesis for a branch, PUSH, etc.","An optional operator.","","","A PEEK expression.","A positive predicate.","Possible modifiers for a rule.","Possible predicates for a rule.","A double quote.","A character range.","A range operator.","A repeat exact times.","A repeat at most times.","A repeat at least times.","A repeat in a range.","A repeat at least once operator.","A repeat operator.","A sequence operator.","Silent rule prefix.","A single quote.","A space character.","A string.","A tag label.","A rule term.","A terminal expression.","","","","","","","","A unicode code.","","","","Checks if <code>expr</code> is non-failing, that is it matches any …","Checks if <code>expr</code> is non-progressing, that is the expression …","","","Validates that the given <code>definitions</code> do not contain any …","Validates the abstract syntax tree for common mistakes:","","","It checks the parsed grammar for common mistakes:","Validates that the given <code>definitions</code> do not contain any …","","Validates that the given <code>definitions</code> do not contain any …","Validates that the given <code>definitions</code> do not contain any …",""],"i":[0,0,0,0,0,0,0,8,9,8,0,0,9,9,9,8,8,9,9,9,9,9,9,9,9,9,9,9,0,0,9,8,9,9,13,7,8,9,13,7,8,9,7,8,9,7,8,9,13,7,8,9,7,8,9,7,7,8,9,9,13,7,8,9,13,7,8,9,13,9,13,9,9,7,13,13,13,13,7,8,9,9,13,7,8,9,13,7,8,9,7,13,7,8,9,19,19,19,19,19,0,0,0,19,19,19,19,19,19,19,19,19,20,18,19,20,18,19,18,19,18,19,0,20,18,19,18,19,18,0,18,19,19,20,18,19,20,18,19,20,19,20,0,19,19,18,20,20,20,0,0,20,0,0,0,0,18,19,19,20,18,19,20,18,19,18,20,18,19,0,0,0,0,0,0,0,0,0,0,2,25,2,25,25,25,25,0,0,0,25,0,25,25,25,25,25,25,25,25,25,0,25,25,2,2,2,2,2,2,2,23,24,25,23,24,25,2,2,23,24,25,23,24,25,2,2,2,2,2,2,0,0,0,0,0,23,24,25,23,24,25,2,24,2,24,23,24,25,23,24,25,0,0,2,2,2,2,2,2,2,2,2,2,2,23,24,25,2,2,2,23,2,2,23,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,23,24,2,2,2,2,23,24,25,23,24,25,23,24,25,23,23,24,25,0,2,2,2,0,0,2,2,2,2,2,2,2,32,2,32,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,32,2,2,2,2,2,2,2,2,2,2,2,2,2,32,2,2,2,2,2,2,2,2,2,2,2,2,2,2,32,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,32,2,32,2,32,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[1,[[5,[[4,[[3,[2]]]]]]]],0,[[[5,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[9,9],[[]],[[]],[[]],0,[[7,7],10],[[8,8],10],[[9,9],10],[[],10],[[],10],[[],10],0,[[7,11],12],[[8,11],12],[[9,11],12],[[9,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,13],[[13,9]],[[9,14],9],[[9,14],9],0,[9,13],[13,15],0,0,[[]],[[]],[[]],[[],16],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],17],[[],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[18,18],[19,19],[[]],[[]],0,0,[[18,18],10],[[19,19],10],[[],10],[[],10],0,0,[[18,11],12],[[19,11],12],[[19,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,20],[[20,19]],0,[[19,14],19],[[19,14],19],0,[19,20],[20,15],0,[[[4,[7]]],[[4,[18]]]],0,0,0,[7,18],0,[[[21,[18]]],[[22,[16,19]]]],[[]],[[]],[[],16],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],17],[[],17],[[],17],0,[7,7],[7,7],[7,7],[[19,[22,[16,19]],[22,[16,[15,[10]]]]],10],[[18,[22,[16,19]]],18],[[19,[22,[16,19]]],19],[7,7],[7,7],[7,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[23,23],[24,24],[25,25],[[]],[[]],[[]],0,0,0,0,0,0,[[[27,[[26,[2]]]],[28,[2]]],[[5,[24,[4,[[3,[2]]]]]]]],[[[26,[2]]],[[5,[[4,[7]],[4,[[3,[2]]]]]]]],[[[26,[2]]],[[5,[[4,[23]],[4,[[3,[2]]]]]]]],[24,9],[23,7],[[23,23],10],[[24,24],10],[[25,25],10],[[],10],[[],10],[[],10],0,0,0,[[24,14],4],[[23,11],12],[[24,11],12],[[25,11],12],[[]],[[]],[[]],[[[27,[[26,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,1],[[5,[[26,[2]],[3,[2]]]]]],0,0,0,0,0,0,0,[2,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],17],[[],17],[[],17],[1,[[15,[16]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[2,2],[[]],0,0,0,[[2,2],29],0,0,0,[[2,2],10],[[],10],0,0,[[2,11],12],[[]],[[]],0,0,0,[[2,30]],0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,1],[[5,[[26,[2]],[3,[2]]]]]],[[2,2],[[15,[29]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],5],[[],5],[[],5],[[],5],[[],17],[[],17],0,0,0,0,[[25,[22,[16,24]],[4,[16]]],10],[[25,[22,[16,24]],[4,[16]]],10],[[[22,[16,24]]],[[4,[[3,[2]]]]]],[[[21,[23]]],[[22,[16,24]]]],[[[4,[31]]],[[4,[[3,[2]]]]]],[[[4,[23]]],[[4,[[3,[2]]]]]],[[[21,[23]]],[[4,[[3,[2]]]]]],[[[21,[23]]],[[4,[[3,[2]]]]]],[[[26,[2]]],[[5,[[4,[1]],[4,[[3,[2]]]]]]]],[[[4,[31]]],[[4,[[3,[2]]]]]],[[[21,[23]]],[[4,[[3,[2]]]]]],[[[4,[31]]],[[4,[[3,[2]]]]]],[[[4,[31]],[4,[31]]],[[4,[[3,[2]]]]]],[[[21,[23]]],[[4,[[3,[2]]]]]]],"c":[427],"p":[[15,"str"],[4,"Rule"],[3,"Error"],[3,"Vec"],[4,"Result"],[8,"IntoIterator"],[3,"Rule"],[4,"RuleType"],[4,"Expr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ExprTopDownIterator"],[8,"FnMut"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"OptimizedRule"],[4,"OptimizedExpr"],[3,"OptimizedExprTopDownIterator"],[15,"slice"],[3,"HashMap"],[3,"ParserRule"],[3,"ParserNode"],[4,"ParserExpr"],[3,"Pairs"],[3,"Peekable"],[3,"PrattParser"],[4,"Ordering"],[8,"Hasher"],[3,"Span"],[3,"PestParser"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDEMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMMMMMLLLLLLLLLLLLLLLLALLLLLLALLALLLLLLLLMLLLLLLMLLLLLOLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLHHFFFFNDENMLLLLLLLLLLLLMLLLLLLLLLLLLLMMMNNNNNNNDNNNNNNNEEEEEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLFLLLLLLLFLLLLLLLLLLLLLMLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLGDLLLLLLLADLLLLLLLLLLLLLLLLLDRGDLLFFFFFLLLLFFLFLFLLLFFFFFFFLLFFLLFFFFLLLFFLFFFFOLFFFFFMFLLLFFLFFLLLLLLFDDDDLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDCMLLLLLLMLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","_marker","_marker","_marker","_marker","_marker","_new","_new","_new","_new","_new","_new_fallback","_new_fallback","_new_fallback","_new_fallback","_new_raw","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","ch","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","detection","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","imp","inner","inner","inner","inner","inner","inner","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","marker","mixed_site","new","new","new","new","new_raw","parse","partial_cmp","provide","rcvec","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","spacing","span","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","suffixed_int_literals","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unsuffixed_int_literals","unwrap","usize_suffixed","usize_unsuffixed","INIT","WORKS","force_fallback","initialize","inside_proc_macro","unforce_fallback","Compiler","DelimSpan","DelimSpanEnum","Fallback","_marker","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close","fmt","from","from","inner","into","into","join","new","open","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","close","join","open","Compiler","Compiler","Compiler","Compiler","Compiler","Compiler","Compiler","DeferredTokenStream","Fallback","Fallback","Fallback","Fallback","Fallback","Fallback","Fallback","Group","Ident","LexError","Literal","Span","TokenStream","TokenTreeIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","debug_span_field_if_nontrivial","delimiter","eq","eq","evaluate_now","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","from_str_unchecked","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into_compiler_token","into_iter","into_iter","into_token_stream","is_empty","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mismatch","mixed_site","new","new","new","new","new_raw","next","proc_macro_parse","resolved_at","set_span","set_span","set_span","size_hint","source_text","span","span","span","span","span_close","span_open","stream","stream","string","subspan","suffixed_numbers","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unsuffixed_integers","unwrap","unwrap_nightly","unwrap_nightly","unwrap_nightly","unwrap_nightly","unwrap_nightly","unwrap_stable","usize_suffixed","usize_unsuffixed","Marker","ProcMacroAutoTraits","borrow","borrow_mut","from","into","try_from","try_into","type_id","value","Marker","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","Cursor","ERROR","PResult","Reject","advance","as_bytes","backslash_u","backslash_x_byte","backslash_x_char","backslash_x_nonzero","block_comment","borrow","borrow","borrow_mut","borrow_mut","byte","byte_string","bytes","c_string","char_indices","character","chars","clone","clone_into","cooked_byte_string","cooked_c_string","cooked_string","delimiter_of_raw_string","digits","doc_comment","doc_comment_contents","eq","equivalent","float","float_digits","from","from","ident","ident_any","ident_not_raw","int","into","into","is_empty","is_whitespace","leaf_token","len","lex_error","literal","literal_nocapture","literal_suffix","next_ch","parse","punct","punct_char","raw_byte_string","raw_c_string","raw_string","rest","skip_whitespace","starts_with","starts_with_char","starts_with_fn","string","take_until_newline_or_eof","to_owned","token_stream","trailing_backslash","try_from","try_from","try_into","try_into","type_id","type_id","word_break","RcVec","RcVecBuilder","RcVecIntoIter","RcVecMut","as_mut","as_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","extend","extend","from","from","from","from","get_mut","inner","inner","inner","inner","into","into","into","into","into_iter","into_iter","is_empty","iter","len","make_mut","make_owned","new","next","pop","push","push","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","IntoIter","TokenStream","_marker","borrow","borrow_mut","clone","clone_into","fmt","from","inner","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[263,"proc_macro2::detection"],[269,"proc_macro2::extra"],[300,"proc_macro2::extra::DelimSpanEnum"],[303,"proc_macro2::imp"],[508,"proc_macro2::marker"],[518,"proc_macro2::marker::value"],[536,"proc_macro2::parse"],[611,"proc_macro2::rcvec"],[673,"proc_macro2::token_stream"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","","","","","","","","","","","","","","","","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","","","","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","","","","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","","Returns a span for the opening punctuation of the group …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Zero-sized type used to mark things that “act like” …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[18,17,17,0,0,16,0,16,18,0,0,16,17,17,0,16,0,0,0,0,27,2,4,8,10,2,4,6,8,10,2,4,6,10,8,12,27,2,4,16,6,17,12,18,8,10,27,2,4,16,6,17,12,18,8,10,10,4,12,10,2,4,16,6,17,12,18,8,10,2,4,16,6,17,12,18,8,10,8,2,6,6,0,17,18,8,8,17,18,8,2,2,0,10,10,10,10,27,27,2,2,4,16,16,6,6,17,12,12,18,8,8,10,10,27,2,2,2,4,4,16,16,16,16,16,6,17,12,18,8,10,2,2,2,10,8,10,10,10,10,10,10,10,10,10,10,0,27,2,4,6,8,10,27,2,4,16,6,17,12,18,8,10,2,2,10,10,4,4,0,4,2,6,12,8,8,0,8,27,0,4,16,6,12,8,10,4,12,12,27,16,6,12,8,10,12,6,6,6,10,10,0,2,4,16,6,17,12,18,8,10,27,2,16,6,12,8,10,0,27,2,4,16,6,17,12,18,8,10,27,2,4,16,6,17,12,18,8,10,27,2,4,16,6,17,12,18,8,10,10,10,10,10,10,10,10,10,10,10,0,4,10,10,0,0,0,0,0,0,51,0,0,51,20,20,51,20,51,20,51,20,51,20,20,20,51,20,20,51,20,20,20,20,51,20,51,20,51,20,51,77,77,77,52,1,54,3,5,7,9,0,52,1,54,3,5,7,9,0,0,0,0,0,0,0,52,1,53,54,3,5,7,9,52,1,53,54,3,5,7,9,9,52,3,9,1,53,54,3,5,7,9,1,53,54,3,5,7,9,0,5,7,7,53,1,1,53,9,9,9,9,52,52,1,1,3,5,5,7,7,9,9,52,52,1,1,1,53,54,3,5,7,9,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,52,1,53,54,3,5,7,9,0,1,54,53,1,53,9,9,3,3,0,3,1,53,5,7,7,54,0,3,5,7,9,54,3,52,5,7,9,5,5,5,53,9,9,0,1,53,54,3,5,7,9,52,1,5,7,9,52,1,53,54,3,5,7,9,52,1,53,54,3,5,7,9,52,1,53,54,3,5,7,9,9,9,9,9,9,9,9,9,9,9,0,3,1,3,5,7,9,1,9,9,0,0,78,78,78,78,78,78,78,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,64,64,0,0,0,0,0,66,64,66,64,0,0,64,0,64,0,64,64,64,0,0,0,0,0,0,0,64,64,0,0,66,64,0,0,0,0,66,64,64,0,0,64,0,0,0,0,0,64,0,0,0,0,0,64,0,64,64,64,0,0,64,0,0,66,64,66,64,66,64,0,0,0,0,0,71,72,73,71,72,75,73,71,72,75,71,73,75,73,75,71,72,73,71,72,75,73,73,71,72,75,73,71,72,75,71,75,73,73,73,73,73,71,75,72,71,72,75,73,75,73,71,72,75,73,71,72,75,73,71,72,75,71,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[5,6],[7,8],[9,10],0,0,0,0,[[11,4],8],[12,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[14]]],10],[[],4],0,[13,10],[2,2],[4,4],[16,16],[6,6],[17,17],[12,12],[18,18],[8,8],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,8],19],[[],2],[6,20],[6,17],0,[[17,17],21],[[18,18],21],[[8,[0,[22,[23,[11]]]]],21],[[8,8],21],[[],21],[[],21],[[],21],[[2,24]],[[2,24]],0,[25,10],[25,10],[26,10],[26,10],[[27,28],29],[[27,28],29],[[2,28],29],[[2,28],29],[[4,28],29],[[16,28],29],[[16,28],29],[[6,28],29],[[6,28],29],[[17,28],29],[[12,28],29],[[12,28],29],[[18,28],29],[[8,28],29],[[8,28],29],[[10,28],29],[[10,28],29],[[]],[30,2],[[]],[16,2],[[]],[31,4],[8,16],[12,16],[6,16],[10,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,2],[24,2],[11,[[32,[2,27]]]],[11,[[32,[10,27]]]],[[8,33]],[34,10],[34,10],[35,10],[35,10],[36,10],[36,10],[37,10],[37,10],[38,10],[38,10],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,39],[2,21],[40,10],[40,10],[[4,4],[[41,[4]]]],[[4,4],4],0,[[],4],[[],2],[[17,2],6],[[13,18],12],[[11,4],8],[[11,4],8],0,[[8,8],[[41,[19]]]],[42],0,[[4,4],4],[[16,4]],[[6,4]],[[12,4]],[[8,4]],[[10,4]],[4,[[41,[43]]]],[12,18],0,[27,4],[16,4],[6,4],[12,4],[8,4],[10,4],0,[6,4],[6,4],[6,2],[11,10],[[10,[45,[44]]],[[41,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],0,[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[47,10],[47,10],[48,10],[48,10],[49,10],[49,10],[50,10],[50,10],[14,10],[14,10],0,[4,31],[44,10],[44,10],0,0,[[]],[[]],[[],21],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[20,20],[51,51],[[]],[[]],[20,4],[[20,28],29],[[]],[[]],0,[[]],[[]],[20,4],[5,20],[20,4],[[]],[[]],[[],32],[[],32],[[],32],[[],32],[[],46],[[],46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[14]]],9],[[],52],[[],3],[13,9],[1,1],[53,53],[54,54],[3,3],[5,5],[7,7],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[55,3]],[5,17],[[7,7],21],[[7,[0,[22,[23,[11]]]]],21],[53],[[1,24]],[[1,24]],0,[25,9],[25,9],[26,9],[26,9],[[52,28],29],[[52,28],29],[[1,28],29],[[1,28],29],[[3,28],29],[[5,28],29],[[5,28],29],[[7,28],29],[[7,28],29],[[9,28],29],[[9,28],29],[[]],[56,52],[30,1],[16,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,1],[24,1],[11,[[32,[1,52]]]],[11,[[32,[9]]]],[11,9],[34,9],[34,9],[35,9],[35,9],[36,9],[36,9],[37,9],[37,9],[38,9],[38,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,57],[1,54],[[]],[53,30],[1,21],[53,21],[40,9],[40,9],[[3,3],[[41,[3]]]],[[3,3],3],[[],58],[[],3],[[],1],[30,53],[[17,1],5],[[11,3],7],[[11,3],7],[54,[[41,[16]]]],[11,[[32,[30,52]]]],[[3,3],3],[[5,3]],[[7,3]],[[9,3]],[54],[3,[[41,[43]]]],[52,3],[5,3],[7,3],[9,3],[5,3],[5,3],[5,1],0,[11,9],[[9,[45,[44]]],[[41,[3]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[47,9],[47,9],[48,9],[48,9],[49,9],[49,9],[50,9],[50,9],[14,9],[14,9],0,[3,31],[1,30],[3,31],[5,59],[7,60],[9,61],0,[44,9],[44,9],0,0,[[]],[[]],[[]],[[]],[[],32],[[],32],[[],46],0,0,[[]],[[]],[[[62,[22]]],[[62,[22]]]],[[]],[[[62,[22]],[62,[22]]],19],[[],[[62,[22]]]],[[[62,[22]],[62,[22]]],21],[[],21],[[[62,[22]],28],[[32,[63]]]],[[]],[[[62,[22]],33]],[[]],[[[62,[22]],[62,[22]]],[[41,[19]]]],[[]],[[],32],[[],32],[[],46],0,0,0,0,[[64,44],64],[64,[[15,[14]]]],[65,[[32,[13,66]]]],[65,[[32,[66]]]],[65,[[32,[66]]]],[65,[[32,[66]]]],[64,[[32,[66]]]],[[]],[[]],[[]],[[]],[64,[[32,[64,66]]]],[64,[[32,[64,66]]]],[64,67],[64,[[32,[64,66]]]],[64,68],[64,[[32,[64,66]]]],[64,69],[64,64],[[]],[64,[[32,[64,66]]]],[64,[[32,[64,66]]]],[64,[[32,[64,66]]]],[64,[[32,[66]]]],[64,[[32,[64,66]]]],0,[64,[[32,[66]]]],[[64,64],21],[[],21],[64,[[32,[64,66]]]],[64,[[32,[64,66]]]],[[]],[[]],[64,[[32,[66]]]],[64,[[32,[66]]]],[64,[[32,[66]]]],[64,[[32,[64,66]]]],[[]],[[]],[64,21],[13,21],[64,[[32,[66]]]],[64,44],0,[64,[[32,[66]]]],[64,[[32,[64,66]]]],[64,64],0,[[64,11],[[32,[64,66]]]],[64,[[32,[66]]]],[64,[[32,[66]]]],[64,[[32,[64,66]]]],[64,[[32,[64,66]]]],[64,[[32,[64,66]]]],0,[64,64],[[64,11],21],[[64,13],21],[[64,70],21],[64,[[32,[64,66]]]],[64],[[]],[64,[[32,[0,0]]]],[[64,14],[[32,[66]]]],[[],32],[[],32],[[],32],[[],32],[[],46],[[],46],[64,[[32,[64,66]]]],0,0,0,0,[71,72],[72,72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,73],[73,73],[[[75,[74]]],[[75,[74]]]],[[]],[[]],[[71,24]],[[72,24]],[[]],[[]],[[]],[[]],[73,[[41,[72]]]],0,0,0,0,[[]],[[]],[[]],[[]],[71],[[]],[73,21],[73,76],[73,44],[[[73,[74]]],[[72,[74]]]],[[[73,[74]]],[[71,[74]]]],[[],71],[75,41],[72,41],[71],[72],[75],[[]],[[]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],46],[[],46],[[],46],[[],46],[44,71],0,0,0,[[]],[[]],[39,39],[[]],[[39,28],29],[[]],0,[[]],[[]],[39,[[41,[16]]]],[39],[[]],[[],32],[[],32],[[],46]],"c":[],"p":[[4,"TokenStream"],[3,"TokenStream"],[4,"Span"],[3,"Span"],[4,"Group"],[3,"Group"],[4,"Ident"],[3,"Ident"],[4,"Literal"],[3,"Literal"],[15,"str"],[3,"Punct"],[15,"char"],[15,"u8"],[15,"slice"],[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"Sized"],[8,"AsRef"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Result"],[8,"Hasher"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[4,"DelimSpanEnum"],[4,"LexError"],[3,"DeferredTokenStream"],[4,"TokenTreeIter"],[3,"DebugStruct"],[3,"LexError"],[4,"TokenTree"],[15,"never"],[3,"Group"],[3,"Ident"],[3,"Literal"],[3,"Marker"],[3,"Error"],[3,"Cursor"],[8,"Iterator"],[3,"Reject"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[8,"FnMut"],[3,"RcVecBuilder"],[3,"RcVecMut"],[3,"RcVec"],[8,"Clone"],[3,"RcVecIntoIter"],[3,"Iter"],[13,"Compiler"],[3,"ProcMacroAutoTraits"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKAKAOAOOAKIKKKKAIIKOLLILLOLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","ext","fmt","format","format_ident","ident_fragment","quote","quote_spanned","to_tokens","to_tokens","TokenStreamExt","append","append_all","append_separated","append_terminated","private","Sealed","IdentFragment","fmt","ident_fragment_display","span","span","ToTokens","into_token_stream","into_token_stream","primitive","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[16,"quote::ext"],[22,"quote::ext::private"],[23,"quote::ident_fragment"],[28,"quote::to_tokens"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","","Format this value as an identifier fragment.","","Formatting macro for constructing <code>Ident</code>s.","","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","","Write <code>self</code> to the given <code>TokenStream</code>.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","","","Specialized formatting trait used by <code>format_ident!</code>.","Format this value as an identifier fragment.","","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,11,11,11,11,0,12,0,0,0,0,0,0,4,0,11,11,11,11,0,0,0,12,0,12,12,0,4,4,0,4,4,4],"f":[0,0,0,[[[2,[1]]]],[3],[[3,4]],[[3,4]],0,[5,6],0,0,0,0,0,0,[7],0,[[[2,[1]]]],[3],[[3,4]],[[3,4]],0,0,0,[5,6],0,[[],[[9,[8]]]],[[],[[9,[8]]]],0,[10,7],[10,7],0,[[],7],[[],7],[7]],"c":[],"p":[[4,"TokenTree"],[8,"Into"],[8,"IntoIterator"],[8,"ToTokens"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"Sized"],[8,"TokenStreamExt"],[8,"IdentFragment"]]},\
"rustix":{"doc":"<code>rustix</code> provides efficient memory-safe and I/O-safe …","t":"AAAOAAAAAAAAAAAARAAAAAAAAAAOOOFFFFFFFFFFFFFFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLLGGGGGGGGGGGGGELLLLLLLLLLLLGLLLMMDGGGDLLLLLLLLMMLLLGFFFFFAFFFFFFFFFFFFFFFFFFFFFFFFFFIIDIIDGMKKMMKKRAAAAADDLLLLLMMMMLLLLLLLLLLMLMMLLLLLLLLLLLLLSSSSSSSSDSSSSSSSSSSSSSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFSSSSSDEDSSSSNSSSSSSNSSSSGNNSSSSSSSSDNEEGSSSSSSSSSSSSSSSSSSSNNSSSSDDSSSSSSSSSSSSSSSSNNNNNDSSSSSSSSSSSSSSSSNGNDDSSSSSSSSSSSSSDNNGGDDGDGNSSSSSNNSSSSSSSNSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLFFFFFFFLLLFFFFFFFFFFFFFFFFFFFSSSSDDSSDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFFSSSSSDSSDDDSSSSSSSSSSSSSSSSSSSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDIDIDDIDDIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLFMAMMFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAFFFFOOIIDIIDGMKLLKLLLLLLLLLLMMLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDEEDDNNRNNNNGGDDINNNNNDDCNNIEEIEEGGDNNNNNDDIDDRNNNNNNNNNNGDDIRSSNNDDGGNNDDDDGENNNNNGGGGDDDDGGDDGGNNGDRRDNNNNNNDAFFLLAKKKKLLLLMMFFFFLLLLAAFKKKAFMMKALLLLFMMMMMMMMMMMMMMMMMMMMMMAFFFFAFCFCFFCFAMMFFMAMFFLLFLLLLFFFFFFFFKLLAMKKMALLAFFFKKKFLLKMMFFFFFFFFFAFAFFFFFKKAKKMMMKMFFAFMAKKLLFFFFFFFFAAFFKFFFFAFFFAFFFLLLLLLLLKFFFLKLAFFFFFFFFFFFFFFFFCCRRFFFFFFFFFFFFFFFCCCCCCCCCFRFCCCFCFCFCFFCFCCCRRCCCCDFLLLLFFFFFLLFFFFFFLFMMFFFLLLLCCCDDFFFDLLLFLLFFFLLLLFFFCFFDDLLLLMMLMLMLLLMLMLLLLLLMMLLLLLLNNNNENLLLLLLLLLLLLLFCCCAFHFFFFFSSDLLLLLLLLLLLLLLLLLLLLFFLLLLLFLLLLLLLFFLLLLLLLLLLFFFFFLLFLFLLLLLLLLLDDDDDDGLLLLLLLLLLAFLLLAFFFAAFFFLLLLLLAFFLLFFFFFFFAFFLLLLLLLFFFCFFFCGFCFFFFFDDCFFFFFFFFFFDIEDSIGDNDSSDQGNDNDDNDGFFMMMKLLLLLLLLLLLLLLLLLLLLLMLLFALLMKLLALMLLLLLLLLLLLRRRRRRRRRRFARRRRRDIDDDSDDDDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLAADDAIIDIIDGMKKMMKKAAFFFFFFFIRAKKKKKIKKKKKFFGGGDGGDFFFFFOFFRRDMMLLFLLLLAMLOLLLOOORF","n":["backend","bitcast","cstr","cstr","fd","ffi","fs","io","ioctl","maybe_polyfill","mount","path","timespec","ugid","utils","weak","MAX_IOV","arch","c","conv","fd","fs","io","mount","reg","ugid","asm","syscall","syscall_always_asm","syscall_readonly","syscall0_readonly","syscall1","syscall1_noreturn","syscall1_readonly","syscall2","syscall2_readonly","syscall3","syscall3_readonly","syscall4","syscall4_readonly","syscall5","syscall5_readonly","syscall6","syscall6_readonly","AT_FDCWD","BLKPBSZGET","BLKSSZGET","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_COARSE","CLOCK_THREAD_CPUTIME_ID","EINVAL","FICLONE","FIONBIO","FIONREAD","NFS_SUPER_MAGIC","O_CLOEXEC","O_LARGEFILE","O_NOCTTY","O_NONBLOCK","O_RDWR","PIPE_BUF","PROC_SUPER_MAGIC","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","UTIME_NOW","UTIME_OMIT","XATTR_CREATE","XATTR_REPLACE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c_char","c_double","c_float","c_int","c_long","c_longlong","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from","gid_t","into","into","into","iov_base","iov_len","iovec","pid_t","size_t","time_t","timespec","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tv_nsec","tv_sec","type_id","type_id","type_id","uid_t","by_mut","by_ref","c_int","c_uint","dev_t","fs","loff_t","loff_t_from_u64","no_fd","opt_mut","pass_usize","raw_fd","ret","ret_c_int","ret_c_int_infallible","ret_c_uint","ret_c_uint_infallible","ret_discarded_fd","ret_infallible","ret_owned_fd","ret_u64","ret_usize","ret_usize_infallible","ret_void_star","size_of","slice","slice_just_addr","slice_just_addr_mut","slice_mut","zero","oflags_bits","oflags_for_open_how","AsFd","AsRawFd","BorrowedFd","FromRawFd","IntoRawFd","OwnedFd","RawFd","_phantom","as_fd","as_raw_fd","fd","fd","from_raw_fd","into_raw_fd","EXT4_IOC_RESIZE_FS","dir","inotify","makedev","syscalls","types","Dir","DirEntry","_read_from","borrow","borrow","borrow_mut","borrow_mut","buf","d_ino","d_type","fd","file_name","file_type","fmt","fmt","from","from","ino","into","into","into_iter","name","next","next","pos","read","read_from","read_more","rewind","stat","statfs","statvfs","try_from","try_from","try_into","try_into","type_id","type_id","ACCESS","ALL_EVENTS","ATTRIB","CLOEXEC","CLOSE","CLOSE_NOWRITE","CLOSE_WRITE","CREATE","CreateFlags","DELETE","DELETE_SELF","DONT_FOLLOW","EXCL_UNLINK","MASK_ADD","MASK_CREATE","MODIFY","MOVE","MOVED_FROM","MOVED_TO","MOVE_SELF","NONBLOCK","ONESHOT","ONLYDIR","OPEN","WatchFlags","all","all","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complement","complement","complement","complement","contains","contains","contains","contains","default","difference","difference","difference","difference","empty","empty","empty","empty","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_name","from_name","hash","hash","inotify_add_watch","inotify_init","inotify_remove_watch","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","into","into","into_iter","into_iter","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter_names","iter_names","iter_names","iter_names","not","not","remove","remove","remove","remove","set","set","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union","union","union","major","makedev","minor","_seek","_utimensat","access","accessat","accessat_noflags","chmod","chmodat","chown","chownat","copy_file_range","fadvise","fallocate","fchmod","fchown","fcntl_add_seals","fcntl_get_seals","fcntl_getfl","fcntl_lock","fcntl_setfl","fdatasync","fgetxattr","flistxattr","flock","fremovexattr","fsetxattr","fstat","fstatfs","fstatvfs","fsync","ftruncate","futimens","getdents","getdents_uninit","getxattr","inotify_add_watch","inotify_init1","inotify_rm_watch","is_statx_available","lgetxattr","link","linkat","listxattr","llistxattr","lremovexattr","lsetxattr","lstat","memfd_create","mkdir","mkdirat","mknodat","open","openat","openat2","readlink","readlinkat","removexattr","rename","renameat","renameat2","rmdir","seek","sendfile","setxattr","stat","statat","statfs","statfs_to_statvfs","statvfs","statx","symlink","symlinkat","sync","syncfs","tell","unlink","unlinkat","utimensat","ACCMODE","ALL","ALLOW_SEALING","APPEND","ATIME","Access","Advice","AtFlags","BASIC_STATS","BENEATH","BLOCKS","BTIME","BlockDevice","CACHED","CLOEXEC","CLOEXEC","COLLAPSE_RANGE","CREATE","CTIME","CharacterDevice","DIOALIGN","DIRECT","DIRECTORY","DSYNC","Dev","Directory","DontNeed","EACCESS","EMPTY_PATH","EXCHANGE","EXCL","EXEC_OK","EXISTS","FSYNC","FUTURE_WRITE","FallocateFlags","Fifo","FileType","FlockOperation","FsWord","GID","GROW","HUGETLB","HUGE_16GB","HUGE_16MB","HUGE_1GB","HUGE_1MB","HUGE_256MB","HUGE_2GB","HUGE_2MB","HUGE_32MB","HUGE_512KB","HUGE_512MB","HUGE_64KB","HUGE_8MB","INO","INSERT_RANGE","IN_ROOT","KEEP_SIZE","LockExclusive","LockShared","MANDLOCK","MNT_ID","MODE","MTIME","MemfdFlags","Mode","NLINK","NOATIME","NOATIME","NOCTTY","NODEV","NODIRATIME","NOEXEC","NOFOLLOW","NONBLOCK","NOREPLACE","NOSUID","NO_AUTOMOUNT","NO_HIDE_STALE","NO_MAGICLINKS","NO_SYMLINKS","NO_XDEV","NoReuse","NonBlockingLockExclusive","NonBlockingLockShared","NonBlockingUnlock","Normal","OFlags","PATH","PUNCH_HOLE","RDONLY","RDONLY","RDWR","READ_OK","RELATIME","REMOVEDIR","RGRP","ROTH","RSYNC","RUSR","RWMODE","RWXG","RWXO","RWXU","Random","RawMode","RegularFile","RenameFlags","ResolveFlags","SEAL","SGID","SHRINK","SIZE","STATX_DONT_SYNC","STATX_FORCE_SYNC","STATX_SYNC_AS_STAT","SUID","SVTX","SYMLINK_FOLLOW","SYMLINK_NOFOLLOW","SYNC","SYNCHRONOUS","SealFlags","Sequential","Socket","Stat","StatFs","StatVfs","StatVfsMountFlags","Statx","StatxFlags","StatxTimestamp","Symlink","TMPFILE","TRUNC","TYPE","UID","UNSHARE_RANGE","Unknown","Unlock","WGRP","WHITEOUT","WOTH","WRITE","WRITE_OK","WRONLY","WUSR","WillNeed","XGRP","XOTH","XUSR","ZERO_RANGE","all","all","all","all","all","all","all","all","all","all","all","as_raw_mode","as_raw_mode","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complement","complement","complement","complement","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","default","difference","difference","difference","difference","difference","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","f_bavail","f_bfree","f_blocks","f_bsize","f_favail","f_ffree","f_files","f_flag","f_frsize","f_fsid","f_namemax","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_dirent_d_type","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_name","from_raw_mode","from_raw_mode","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","iter_names","not","not","not","not","not","not","not","not","not","not","not","remove","remove","remove","remove","remove","remove","remove","remove","remove","remove","remove","set","set","set","set","set","set","set","set","set","set","set","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","union","union","union","union","union","errno","syscalls","types","ACCESS","ADDRINUSE","ADDRNOTAVAIL","ADV","AFNOSUPPORT","AGAIN","ALREADY","BADE","BADF","BADFD","BADMSG","BADR","BADRQC","BADSLT","BFONT","BUSY","CANCELED","CHILD","CHRNG","COMM","CONNABORTED","CONNREFUSED","CONNRESET","DEADLK","DEADLOCK","DESTADDRREQ","DOM","DOTDOT","DQUOT","EXIST","Errno","FAULT","FBIG","HOSTDOWN","HOSTUNREACH","HWPOISON","IDRM","ILSEQ","INPROGRESS","INTR","INVAL","IO","ISCONN","ISDIR","ISNAM","KEYEXPIRED","KEYREJECTED","KEYREVOKED","L2HLT","L2NSYNC","L3HLT","L3RST","LIBACC","LIBBAD","LIBEXEC","LIBMAX","LIBSCN","LNRNG","LOOP","MEDIUMTYPE","MFILE","MLINK","MSGSIZE","MULTIHOP","NAMETOOLONG","NAVAIL","NETDOWN","NETRESET","NETUNREACH","NFILE","NOANO","NOBUFS","NOCSI","NODATA","NODEV","NOENT","NOEXEC","NOKEY","NOLCK","NOLINK","NOMEDIUM","NOMEM","NOMSG","NONET","NOPKG","NOPROTOOPT","NOSPC","NOSR","NOSTR","NOSYS","NOTBLK","NOTCONN","NOTDIR","NOTEMPTY","NOTNAM","NOTRECOVERABLE","NOTSOCK","NOTSUP","NOTTY","NOTUNIQ","NXIO","OPNOTSUPP","OVERFLOW","OWNERDEAD","PERM","PFNOSUPPORT","PIPE","PROTO","PROTONOSUPPORT","PROTOTYPE","RANGE","REMCHG","REMOTE","REMOTEIO","RESTART","RFKILL","ROFS","SHUTDOWN","SOCKTNOSUPPORT","SPIPE","SRCH","SRMNT","STALE","STRPIPE","TIME","TIMEDOUT","TOOBIG","TOOMANYREFS","TXTBSY","UCLEAN","UNATCH","USERS","WOULDBLOCK","XDEV","XFULL","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from_errno","from_io_error","from_raw_os_error","hash","into","kind","provide","raw_os_error","to_owned","to_string","try_decode_c_int","try_decode_c_uint","try_decode_raw_fd","try_decode_u64","try_decode_usize","try_decode_void","try_decode_void_star","try_from","try_into","type_id","close","dup","dup2","dup3","fcntl_dupfd_cloexec","fcntl_getfd","fcntl_setfd","ioctl","ioctl_readonly","pread","preadv","preadv2","pwrite","pwritev","pwritev2","read","readv","write","writev","APPEND","CLOEXEC","CLOEXEC","DSYNC","DupFlags","FdFlags","HIPRI","NOWAIT","ReadWriteFlags","SYNC","all","all","all","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","complement","complement","complement","contains","contains","contains","difference","difference","difference","empty","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_iter","from_name","from_name","from_name","hash","hash","hash","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter","iter_names","iter_names","iter_names","not","not","not","remove","remove","remove","set","set","set","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","union","syscalls","types","mount","unmount","BIND","DETACH","DIRSYNC","EXPIRE","FORCE","InternalMountFlags","LAZYTIME","MOVE","MountFlags","MountFlagsArg","MountPropagationFlags","NOATIME","NODEV","NODIRATIME","NOEXEC","NOFOLLOW","NOSUID","NOSYMFOLLOW","PERMIT_MANDATORY_FILE_LOCKING","PRIVATE","RDONLY","REC","REC","RELATIME","REMOUNT","SHARED","SILENT","SILENT","SLAVE","STRICTATIME","SYNCHRONOUS","UNBINDABLE","UnmountFlags","all","all","all","all","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","complement","complement","complement","complement","contains","contains","contains","contains","difference","difference","difference","difference","empty","empty","empty","empty","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_iter","from_iter","from_name","from_name","from_name","from_name","hash","hash","hash","hash","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter_names","iter_names","iter_names","iter_names","not","not","not","not","remove","remove","remove","remove","set","set","set","set","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","union","union","A0","A1","A2","A3","A4","A5","ArgNumber","ArgReg","FromAsm","Opaque","R0","RetNumber","RetReg","SyscallNumber","ToAsm","_phantom","_phantom","_phantom","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decode_c_int","decode_c_uint","decode_error_code","decode_raw_fd","decode_u64","decode_usize","decode_void","decode_void_star","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_asm","from_asm","into","into","into","into","into","into","into","into","into","into","into","is_in_range","is_negative","is_nonzero","nr","nr","private","raw","raw","raw_arg","to_asm","to_asm","to_asm","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Sealed","syscalls","getegid","geteuid","getgid","getuid","bitcast","bitflags_bits","AsFd","AsRawFd","BorrowedFd","FromRawFd","IntoRawFd","OwnedFd","RawFd","_phantom","as_fd","as_fd","as_fd","as_raw_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow_mut","borrow_mut","borrow_raw","clone","clone_into","drop","fd","fd","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_fd","from_raw_fd","into","into","into_raw_fd","into_raw_fd","is_terminal","is_terminal","to_owned","try_clone","try_clone_to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CStr","CString","FromBytesWithNulError","NulError","as_bytes","as_bytes_with_nul","as_c_str","as_cow_c_str","as_cow_c_str","as_cow_c_str","as_ptr","as_ref","as_ref","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","deref","description","description","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_until_nul","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","from_raw","from_vec_unchecked","from_vec_with_nul","from_vec_with_nul_unchecked","hash","hash","index","index","inner","inner","into","into","into","into_boxed_c_str","into_bytes","into_bytes_with_nul","into_c_str","into_c_str","into_c_str","into_c_string","into_raw","into_string","into_vec","into_with_c_str","into_with_c_str","into_with_c_str","is_empty","kind","new","nul_position","partial_cmp","partial_cmp","provide","provide","to_bytes","to_bytes_with_nul","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string_lossy","to_string_lossy","to_string_lossy","to_string_lossy","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Access","Access","Advice","Advice","AtFlags","AtFlags","BlockDevice","BlockDevice","CWD","CharacterDevice","CharacterDevice","Current","Data","Dev","Dev","Dir","DirEntry","DirEntryExt","Directory","Directory","DontNeed","DontNeed","End","FallocateFlags","FallocateFlags","FdFlags","Fifo","Fifo","FileExt","FileType","FileType","FileTypeExt","FlockOperation","FlockOperation","FsWord","FsWord","Gid","Hole","LockExclusive","LockExclusive","LockShared","LockShared","MemfdFlags","MemfdFlags","MetadataExt","Mode","Mode","NFS_SUPER_MAGIC","NoReuse","NoReuse","NonBlockingLockExclusive","NonBlockingLockExclusive","NonBlockingLockShared","NonBlockingLockShared","NonBlockingUnlock","NonBlockingUnlock","Normal","Normal","Nsecs","OFlags","OFlags","OpenOptionsExt","PROC_SUPER_MAGIC","ROOT","ROOT","Random","Random","RawDir","RawDirEntry","RawMode","RawMode","RegularFile","RegularFile","RenameFlags","ResolveFlags","SealFlags","SealFlags","Secs","SeekFrom","Sequential","Sequential","Socket","Socket","Start","Stat","Stat","StatFs","StatFs","StatVfs","StatVfs","StatVfsMountFlags","StatVfsMountFlags","Statx","Statx","StatxFlags","StatxFlags","StatxTimestamp","StatxTimestamp","Symlink","Symlink","Timespec","Timestamps","UTIME_NOW","UTIME_OMIT","Uid","Unknown","Unknown","Unlock","Unlock","WillNeed","WillNeed","XattrFlags","abs","access","accessat","as_raw","as_raw","at","atime","atime_nsec","blksize","blocks","borrow","borrow","borrow_mut","borrow_mut","buf","buf","chmod","chmodat","chown","chownat","clone","clone","clone_into","clone_into","constants","copy_file_range","copy_file_range","ctime","ctime_nsec","custom_flags","cwd","cwd","d_ino","d_type","dev","dir","eq","eq","equivalent","equivalent","ext4_ioc_resize_fs","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flag","f_frsize","f_frsize","f_fsid","f_fsid","f_namemax","f_namemax","fadvise","fadvise","fallocate","fchmod","fchown","fcntl","fcntl_add_seals","fcntl_dupfd_cloexec","fcntl_get_seals","fcntl_getfd","fcntl_getfl","fcntl_lock","fcntl_setfd","fcntl_setfl","fd","fd","fd","fdatasync","fgetxattr","file_name","file_type","file_type","flistxattr","flock","fmt","fmt","fremovexattr","from","from","from_raw","from_raw","fsetxattr","fstat","fstatfs","fstatvfs","fsync","ftruncate","futimens","getxattr","gid","hash","hash","id","initialized","ino","ino","inode_number","inotify","into","into","ioctl","ioctl_blkpbszget","ioctl_blksszget","ioctl_ficlone","is_block_device","is_char_device","is_fifo","is_file_read_write","is_root","is_root","is_socket","last_access","last_modification","lgetxattr","link","linkat","listxattr","llistxattr","lremovexattr","lsetxattr","lstat","major","makedev","makedev","memfd_create","memfd_create","minor","mkdir","mkdirat","mknodat","mode","mode","mount","mtime","mtime_nsec","name","next","next_entry_cookie","nlink","offset","open","openat","openat2","openat2","pos","raw_dir","rdev","read_at","read_exact_at","read_vectored_at","readlink","readlinkat","removexattr","rename","renameat","renameat_with","rmdir","seek","seek_from","sendfile","sendfile","setxattr","size","stat","statat","statfs","statvfs","statx","statx","symlink","symlinkat","sync","sync","syncfs","tell","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uid","unlink","unlinkat","utimensat","write_all_at","write_at","write_vectored_at","xattr","_readlink","access","chmod","chown","link","lstat","mkdir","open","readlink","rename","rmdir","stat","statfs","statvfs","symlink","unlink","Dev","RawMode","UTIME_NOW","UTIME_OMIT","_readlinkat","accessat","chmodat","chownat","linkat","mkdirat","mknodat","openat","readlinkat","renameat","renameat_with","statat","symlinkat","unlinkat","utimensat","Access","AtFlags","Dev","FdFlags","Mode","Nsecs","OFlags","Secs","Timespec","copy_file_range","CWD","cwd","Dir","DirEntry","Advice","fadvise","SealFlags","fcntl_add_seals","fcntl_dupfd_cloexec","fcntl_get_seals","fcntl_getfd","fcntl_getfl","fcntl_lock","fcntl_setfd","fcntl_setfl","FallocateFlags","FlockOperation","FsWord","NFS_SUPER_MAGIC","PROC_SUPER_MAGIC","Stat","StatFs","StatVfs","StatVfsMountFlags","Timestamps","_is_file_read_write","borrow","borrow_mut","clone","clone_into","fallocate","fchmod","fchown","fdatasync","flock","fmt","from","fstat","fstatfs","fstatvfs","fsync","ftruncate","futimens","into","is_file_read_write","last_access","last_modification","seek","syncfs","tell","to_owned","try_from","try_into","type_id","FileType","Gid","Uid","CreateFlags","WatchFlags","inotify_add_watch","inotify_init","inotify_remove_watch","Ficlone","as_ptr","borrow","borrow_mut","ext4_ioc_resize_fs","from","into","ioctl_blkpbszget","ioctl_blksszget","ioctl_ficlone","output_from_ptr","try_from","try_into","type_id","major","makedev","minor","MemfdFlags","memfd_create","openat2","RawDir","RawDirEntry","borrow","borrow","borrow_mut","borrow_mut","buf","fd","file_name","file_name","file_type","file_type","fmt","from","from","initialized","ino","inode_number","into","into","is_buffer_empty","new","next","next_entry_cookie","next_entry_cookie","offset","try_from","try_from","try_into","try_into","type_id","type_id","Current","Data","End","Hole","SeekFrom","Start","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","to_owned","try_from","try_into","type_id","sendfile","Statx","StatxFlags","StatxTimestamp","compat","statx","STATX_STATE","statx","statx_error_nosys","statx_error_perm","statx_init","sync","CREATE","REPLACE","XattrFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","complement","contains","difference","empty","eq","equivalent","extend","fgetxattr","flistxattr","fmt","fmt","fmt","fmt","fmt","fremovexattr","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","fsetxattr","getxattr","hash","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","lgetxattr","listxattr","llistxattr","lremovexattr","lsetxattr","not","remove","removexattr","set","setxattr","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","DupFlags","Errno","FdFlags","IoSlice","IoSliceMut","ReadWriteFlags","Result","advance","advance","advance_slices","advance_slices","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","close","deref","deref","deref_mut","dup","dup","dup2","dup3","errno","fcntl","fcntl_dupfd_cloexec","fcntl_getfd","fcntl_setfd","fmt","fmt","from","from","into","into","ioctl","ioctl_fionbio","ioctl_fionread","new","new","pread","preadv","preadv2","pwrite","pwritev","pwritev2","read","read_write","readv","retry_on_intr","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","writev","close","DupFlags","dup","dup2","dup3","Errno","Result","retry_on_intr","FdFlags","fcntl_dupfd_cloexec","fcntl_getfd","fcntl_setfd","ioctl_fionbio","ioctl_fionread","IoSlice","IoSliceMut","ReadWriteFlags","pread","preadv","preadv2","pwrite","pwritev","pwritev2","read","readv","write","writev","BadOpcode","CompileTimeOpcode","Direction","Getter","IS_MUTATING","Ioctl","IoctlOutput","NoArg","None","NoneOpcode","OPCODE","OPCODE","Opcode","Output","RawOpcode","Read","ReadOpcode","ReadWrite","ReadWriteOpcode","Setter","Write","WriteOpcode","_RawOpcode","_ioctl","_ioctl_readonly","_opcode","_opcode","_opcode","as_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_components","hash","hash","input","into","into","ioctl","linux","none","old","output","output_from_ptr","partial_cmp","partial_cmp","patterns","raw","raw","read","read_write","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","DIR_MASK","DIR_SHIFT","GROUP_BITS","GROUP_MASK","GROUP_SHIFT","NUM_BITS","NUM_MASK","NUM_SHIFT","SIZE_MASK","SIZE_SHIFT","compose_opcode","consts","DIR_BITS","NONE","READ","SIZE_BITS","WRITE","BadOpcode","CompileTimeOpcode","Getter","NoArg","NoneOpcode","OPCODE","ReadOpcode","ReadWriteOpcode","Setter","WriteOpcode","_opcode","_opcode","_opcode","as_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","from","from","from","from","from","input","into","into","into","into","into","into","into","into","new","new","new","output","output_from_ptr","output_from_ptr","output_from_ptr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","io","os","IoSlice","IoSliceMut","fd","AsFd","AsRawFd","BorrowedFd","FromRawFd","IntoRawFd","OwnedFd","RawFd","_phantom","as_fd","as_raw_fd","fd","fd","from_raw_fd","into_raw_fd","mount_unmount","types","mount","mount_bind","mount_change","mount_move","mount_recursive_bind","mount_remount","unmount","Arg","SMALL_PATH_BUFFER_SIZE","arg","as_cow_c_str","as_str","into_c_str","into_with_c_str","to_string_lossy","Arg","as_cow_c_str","as_str","into_c_str","into_with_c_str","to_string_lossy","with_c_str","with_c_str_slow_path","Nsecs","Secs","Timespec","Gid","RawGid","RawUid","Uid","translate_fchown_args","as_mut_ptr","as_ptr","check_raw_pointer","default_array","default_union","option_as_mut_ptr","option_as_ptr","INVALID","NULL","Weak","_marker","addr","borrow","borrow_mut","fetch","from","get","initialize","into","libc","name","new","syscall","try_from","try_into","type_id","weak","weak_or_syscall","weakcall","RTLD_DEFAULT","dlsym"],"q":[[0,"rustix"],[16,"rustix::backend"],[26,"rustix::backend::arch"],[30,"rustix::backend::arch::asm"],[44,"rustix::backend::c"],[158,"rustix::backend::conv"],[188,"rustix::backend::conv::fs"],[190,"rustix::backend::fd"],[204,"rustix::backend::fs"],[210,"rustix::backend::fs::dir"],[248,"rustix::backend::fs::inotify"],[429,"rustix::backend::fs::makedev"],[432,"rustix::backend::fs::syscalls"],[509,"rustix::backend::fs::types"],[1321,"rustix::backend::io"],[1324,"rustix::backend::io::errno"],[1488,"rustix::backend::io::syscalls"],[1507,"rustix::backend::io::types"],[1679,"rustix::backend::mount"],[1681,"rustix::backend::mount::syscalls"],[1683,"rustix::backend::mount::types"],[1939,"rustix::backend::reg"],[2082,"rustix::backend::reg::private"],[2083,"rustix::backend::ugid"],[2084,"rustix::backend::ugid::syscalls"],[2088,"rustix::bitcast"],[2090,"rustix::fd"],[2146,"rustix::ffi"],[2269,"rustix::fs"],[2585,"rustix::fs::abs"],[2601,"rustix::fs::at"],[2620,"rustix::fs::constants"],[2629,"rustix::fs::copy_file_range"],[2630,"rustix::fs::cwd"],[2632,"rustix::fs::dir"],[2634,"rustix::fs::fadvise"],[2636,"rustix::fs::fcntl"],[2645,"rustix::fs::fd"],[2684,"rustix::fs::file_type"],[2685,"rustix::fs::id"],[2687,"rustix::fs::inotify"],[2692,"rustix::fs::ioctl"],[2706,"rustix::fs::makedev"],[2709,"rustix::fs::memfd_create"],[2711,"rustix::fs::openat2"],[2712,"rustix::fs::raw_dir"],[2744,"rustix::fs::seek_from"],[2763,"rustix::fs::sendfile"],[2764,"rustix::fs::statx"],[2769,"rustix::fs::statx::compat"],[2774,"rustix::fs::sync"],[2775,"rustix::fs::xattr"],[2844,"rustix::io"],[2905,"rustix::io::close"],[2906,"rustix::io::dup"],[2910,"rustix::io::errno"],[2913,"rustix::io::fcntl"],[2917,"rustix::io::ioctl"],[2919,"rustix::io::read_write"],[2932,"rustix::ioctl"],[3007,"rustix::ioctl::linux"],[3019,"rustix::ioctl::linux::consts"],[3024,"rustix::ioctl::patterns"],[3107,"rustix::maybe_polyfill"],[3109,"rustix::maybe_polyfill::io"],[3111,"rustix::maybe_polyfill::os"],[3112,"rustix::maybe_polyfill::os::fd"],[3126,"rustix::mount"],[3128,"rustix::mount::mount_unmount"],[3135,"rustix::path"],[3143,"rustix::path::arg"],[3151,"rustix::timespec"],[3154,"rustix::ugid"],[3159,"rustix::utils"],[3166,"rustix::weak"],[3188,"rustix::weak::libc"]],"d":["The linux_raw backend.","","","A macro for <code>CStr</code> literals.","Export the <code>*Fd</code> types and traits that are used in rustix’…","Utilities related to FFI bindings.","Filesystem operations.","I/O operations.","Unsafe <code>ioctl</code> API.","Imports from <code>std</code> that would be polyfilled for <code>no_std</code> …","Linux <code>mount</code> API.","Filesystem path operations.","<code>Timespec</code> and related types, which are used by multiple …","User and Group ID types.","Miscellaneous minor utilities.","Support for “weak linkage” to symbols on Unix","The maximum number of buffers that can be passed into a …","Architecture-specific syscall code.","Adapt the Linux API to resemble a POSIX-style libc API.","Convert values to <code>ArgReg</code> and from <code>RetReg</code>.","","","","","Encapsulation for system call arguments and return values.","","x86-64 Linux system calls.","","","Like <code>syscall</code>, but adds the <code>readonly</code> attribute to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to C’s <code>void</code> type when used as a pointer.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Convert a <code>c_int</code> into an <code>ArgReg</code>.","Convert a <code>c_uint</code> into an <code>ArgReg</code>.","","","","","Deliberately pass <code>-1</code> to a file-descriptor argument, for …","Convert an optional mutable reference into a <code>usize</code> for …","Pass an arbitrary <code>usize</code> value.","Pass a raw file-descriptor argument. Most users should use …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>c_int</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>c_uint</code> returned from a syscall that effectively …","Convert the return value of <code>dup2</code> and <code>dup3</code>.","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Convert a <code>usize</code> returned from a syscall that effectively …","Pass the <code>mem::size_of</code> of a type.","","","","","Pass a zero, or null, argument.","","Convert an <code>OFlags</code> into a <code>u64</code> for use in the <code>open_how</code> …","A trait to borrow the file descriptor from an underlying …","A trait to extract the raw file descriptor from an …","A borrowed file descriptor.","A trait to express the ability to construct an object from …","A trait to express the ability to consume an object and …","An owned file descriptor.","Raw file descriptors.","","Borrows the file descriptor.","Extracts the raw file descriptor.","","","Constructs a new instance of <code>Self</code> from the given raw file …","Consumes this object, returning the raw underlying file …","","","inotify support for working with inotifies","","linux_raw syscalls supporting <code>rustix::fs</code>.","","<code>DIR*</code>","<code>struct dirent</code>","","","","","","","","","The <code>OwnedFd</code> that we read directory entries from.","Returns the file name of this directory entry.","Returns the type of this directory entry.","","","Returns the argument unchanged.","Returns the argument unchanged.","Return the inode number of this directory entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","<code>readdir(self)</code>, where <code>None</code> means the end of the directory.","Construct a <code>Dir</code> that reads entries from the given directory","","<code>rewinddir(self)</code>","<code>fstat(self)</code>","<code>fstatfs(self)</code>","<code>fstatvfs(self)</code>","","","","","","","<code>IN_ACCESS</code>","<code>IN_ALL_EVENTS</code>","<code>IN_ATTRIB</code>","<code>IN_CLOEXEC</code>","<code>IN_CLOSE</code>","<code>IN_CLOSE_NOWRITE</code>","<code>IN_CLOSE_WRITE</code>","<code>IN_CREATE </code>","<code>IN_*</code> for use with <code>inotify_init</code>.","<code>IN_DELETE</code>","<code>IN_DELETE_SELF</code>","<code>IN_DONT_FOLLOW</code>","<code>IN_EXCL_UNLINK</code>","<code>IN_MASK_ADD</code>","<code>IN_MASK_CREATE</code>","<code>IN_MODIFY</code>","<code>IN_MOVE</code>","<code>IN_MOVED_FROM</code>","<code>IN_MOVED_TO</code>","<code>IN_MOVE_SELF</code>","<code>IN_NONBLOCK</code>","<code>IN_ONESHOT</code>","<code>IN_ONLYDIR</code>","<code>IN_OPEN</code>","<code>IN*</code> for use with <code>inotify_add_watch</code>.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","<code>inotify_add_watch(self, path, flags)</code>—Adds a watch to …","<code>inotify_init1(flags)</code>—Creates a new inotify object.","<code>inotify_rm_watch(self, wd)</code>—Removes a watch from this …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>O_ACCMODE</code>","<code>STATX_ALL</code>","<code>MFD_ALLOW_SEALING</code>","<code>O_APPEND</code>","<code>STATX_ATIME</code>","<code>*_OK</code> constants for use with <code>accessat</code>.","<code>POSIX_FADV_*</code> constants for use with <code>fadvise</code>.","<code>AT_*</code> constants for use with <code>openat</code>, <code>statat</code>, and other <code>*at</code> …","<code>STATX_BASIC_STATS</code>","<code>RESOLVE_BENEATH</code>","<code>STATX_BLOCKS</code>","<code>STATX_BTIME</code>","<code>S_IFBLK</code>","<code>RESOLVE_CACHED</code> (since Linux 5.12)","<code>O_CLOEXEC</code>","<code>MFD_CLOEXEC</code>","<code>FALLOC_FL_COLLAPSE_RANGE</code>","<code>O_CREAT</code>","<code>STATX_CTIME</code>","<code>S_IFCHR</code>","<code>STATX_DIOALIGN</code> (since Linux 6.1)","<code>O_DIRECT</code>","<code>O_DIRECTORY</code>","<code>O_DSYNC</code>. Linux 2.6.32 only supports <code>O_SYNC</code>.","<code>dev_t</code>","<code>S_IFDIR</code>","<code>POSIX_FADV_DONTNEED</code>","<code>AT_EACCESS</code>","<code>AT_EMPTY_PATH</code>","<code>RENAME_EXCHANGE</code>","<code>O_EXCL</code>","<code>X_OK</code>","<code>F_OK</code>","<code>O_FSYNC</code>. Linux 2.6.32 only supports <code>O_SYNC</code>.","<code>F_SEAL_FUTURE_WRITE</code> (since Linux 5.1)","<code>FALLOC_FL_*</code> constants for use with <code>fallocate</code>.","<code>S_IFIFO</code>","<code>S_IF*</code> constants for use with <code>mknodat</code> and <code>Stat</code>’s <code>st_mode</code> …","<code>LOCK_*</code> constants for use with <code>flock</code> and <code>fcntl_lock</code>.","<code>__fsword_t</code>","<code>STATX_GID</code>","<code>F_SEAL_GROW</code>.","<code>MFD_HUGETLB</code> (since Linux 4.14)","<code>MFD_HUGE_16GB</code>","<code>MFD_HUGE_16MB</code>","<code>MFD_HUGE_1GB</code>","<code>MFD_HUGE_1MB</code>","<code>MFD_HUGE_256MB</code>","<code>MFD_HUGE_2GB</code>","<code>MFD_HUGE_2MB</code>","<code>MFD_HUGE_32MB</code>","<code>MFD_HUGE_512JB</code>","<code>MFD_HUGE_512MB</code>","<code>MFD_HUGE_64KB</code>","<code>MFD_HUGE_8MB</code>","<code>STATX_INO</code>","<code>FALLOC_FL_INSERT_RANGE</code>","<code>RESOLVE_IN_ROOT</code>","<code>FALLOC_FL_KEEP_SIZE</code>","<code>LOCK_EX</code>","<code>LOCK_SH</code>","<code>ST_MANDLOCK</code>","<code>STATX_MNT_ID</code> (since Linux 5.8)","<code>STATX_MODE</code>","<code>STATX_MTIME</code>","<code>MFD_*</code> constants for use with <code>memfd_create</code>.","<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.","<code>STATX_NLINK</code>","<code>O_NOATIME</code>","<code>ST_NOATIME</code>","<code>O_NOCTTY</code>","<code>ST_NODEV</code>","<code>ST_NODIRATIME</code>","<code>ST_NOEXEC</code>","<code>O_NOFOLLOW</code>","<code>O_NONBLOCK</code>","<code>RENAME_NOREPLACE</code>","<code>ST_NOSUID</code>","<code>AT_NO_AUTOMOUNT</code>","<code>FALLOC_FL_NO_HIDE_STALE</code>","<code>RESOLVE_NO_MAGICLINKS</code>","<code>RESOLVE_NO_SYMLINKS</code>","<code>RESOLVE_NO_XDEV</code>","<code>POSIX_FADV_NOREUSE</code>","<code>LOCK_EX | LOCK_NB</code>","<code>LOCK_SH | LOCK_NB</code>","<code>LOCK_UN | LOCK_NB</code>","<code>POSIX_FADV_NORMAL</code>","<code>O_*</code> constants for use with <code>openat</code>.","<code>O_PATH</code>","<code>FALLOC_FL_PUNCH_HOLE</code>","<code>O_RDONLY</code>","<code>ST_RDONLY</code>","<code>O_RDWR</code>","<code>R_OK</code>","<code>ST_RELATIME</code>","<code>AT_REMOVEDIR</code>","<code>S_IRGRP</code>","<code>S_IROTH</code>","<code>O_RSYNC</code>. Linux 2.6.32 only supports <code>O_SYNC</code>.","<code>S_IRUSR</code>","Similar to <code>ACCMODE</code>, but just includes the read/write …","<code>S_IRWXG</code>","<code>S_IRWXO</code>","<code>S_IRWXU</code>","<code>POSIX_FADV_RANDOM</code>","<code>mode_t</code>","<code>S_IFREG</code>","<code>RENAME_*</code> constants for use with <code>renameat_with</code>.","<code>RESOLVE_*</code> constants for use with <code>openat2</code>.","<code>F_SEAL_SEAL</code>.","<code>S_ISGID</code>","<code>F_SEAL_SHRINK</code>.","<code>STATX_SIZE</code>","<code>AT_STATX_DONT_SYNC</code>","<code>AT_STATX_FORCE_SYNC</code>","<code>AT_STATX_SYNC_AS_STAT</code>","<code>S_ISUID</code>","<code>S_ISVTX</code>","<code>AT_SYMLINK_FOLLOW</code>","<code>AT_SYMLINK_NOFOLLOW</code>","<code>O_SYNC</code>","<code>ST_SYNCHRONOUS</code>","<code>F_SEAL_*</code> constants for use with <code>fcntl_add_seals</code> and …","<code>POSIX_FADV_SEQUENTIAL</code>","<code>S_IFSOCK</code>","<code>struct stat</code> for use with <code>statat</code> and <code>fstat</code>.","<code>struct statfs</code> for use with <code>statfs</code> and <code>fstatfs</code>.","<code>struct statvfs</code> for use with <code>statvfs</code> and <code>fstatvfs</code>.","<code>ST_*</code> constants for use with <code>StatVfs</code>.","<code>struct statx</code> for use with <code>statx</code>.","<code>STATX_*</code> constants for use with <code>statx</code>.","<code>struct statx_timestamp</code> for use with <code>Statx</code>.","<code>S_IFLNK</code>","<code>O_TMPFILE</code>","<code>O_TRUNC</code>","<code>STATX_TYPE</code>","<code>STATX_UID</code>","<code>FALLOC_FL_UNSHARE_RANGE</code>","An unknown filesystem object.","<code>LOCK_UN</code>","<code>S_IWGRP</code>","<code>RENAME_WHITEOUT</code>","<code>S_IWOTH</code>","<code>F_SEAL_WRITE</code>.","<code>W_OK</code>","<code>O_WRONLY</code>","<code>S_IWUSR</code>","<code>POSIX_FADV_WILLNEED</code>","<code>S_IXGRP</code>","<code>S_IXOTH</code>","<code>S_IXUSR</code>","<code>FALLOC_FL_ZERO_RANGE</code>","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Construct an <code>st_mode</code> value from <code>Stat</code>.","Construct an <code>st_mode</code> value from <code>Stat</code>.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","","","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","","Get the underlying bits value.","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Support conversions from <code>Mode</code> to raw mode values.","Returns the argument unchanged.","Returns the argument unchanged.","Support conversions from raw mode values to <code>Mode</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Construct a <code>FileType</code> from the <code>d_type</code> field of a <code>c::dirent</code>.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Construct a <code>Mode</code> from the mode bits of the <code>st_mode</code> field …","Construct a <code>FileType</code> from the <code>S_IFMT</code> bits of the <code>st_mode</code> …","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The <code>rustix</code> <code>Errno</code> type.","linux_raw syscalls supporting <code>rustix::io</code>.","","<code>EACCES</code>","<code>EADDRINUSE</code>","<code>EADDRNOTAVAIL</code>","<code>EADV</code>","<code>EAFNOSUPPORT</code>","<code>EAGAIN</code>","<code>EALREADY</code>","<code>EBADE</code>","<code>EBADF</code>","<code>EBADFD</code>","<code>EBADMSG</code>","<code>EBADR</code>","<code>EBADRQC</code>","<code>EBADSLT</code>","<code>EBFONT</code>","<code>EBUSY</code>","<code>ECANCELED</code>","<code>ECHILD</code>","<code>ECHRNG</code>","<code>ECOMM</code>","<code>ECONNABORTED</code>","<code>ECONNREFUSED</code>","<code>ECONNRESET</code>","<code>EDEADLK</code>","<code>EDEADLOCK</code>","<code>EDESTADDRREQ</code>","<code>EDOM</code>","<code>EDOTDOT</code>","<code>EDQUOT</code>","<code>EEXIST</code>","<code>errno</code>—An error code.","<code>EFAULT</code>","<code>EFBIG</code>","<code>EHOSTDOWN</code>","<code>EHOSTUNREACH</code>","<code>EHWPOISON</code>","<code>EIDRM</code>","<code>EILSEQ</code>","<code>EINPROGRESS</code>","<code>EINTR</code>.","<code>EINVAL</code>","<code>EIO</code>","<code>EISCONN</code>","<code>EISDIR</code>","<code>EISNAM</code>","<code>EKEYEXPIRED</code>","<code>EKEYREJECTED</code>","<code>EKEYREVOKED</code>","<code>EL2HLT</code>","<code>EL2NSYNC</code>","<code>EL3HLT</code>","<code>EL3RST</code>","<code>ELIBACC</code>","<code>ELIBBAD</code>","<code>ELIBEXEC</code>","<code>ELIBMAX</code>","<code>ELIBSCN</code>","<code>ELNRNG</code>","<code>ELOOP</code>","<code>EMEDIUMTYPE</code>","<code>EMFILE</code>","<code>EMLINK</code>","<code>EMSGSIZE</code>","<code>EMULTIHOP</code>","<code>ENAMETOOLONG</code>","<code>ENAVAIL</code>","<code>ENETDOWN</code>","<code>ENETRESET</code>","<code>ENETUNREACH</code>","<code>ENFILE</code>","<code>ENOANO</code>","<code>ENOBUFS</code>","<code>ENOCSI</code>","<code>ENODATA</code>","<code>ENODEV</code>","<code>ENOENT</code>","<code>ENOEXEC</code>","<code>ENOKEY</code>","<code>ENOLCK</code>","<code>ENOLINK</code>","<code>ENOMEDIUM</code>","<code>ENOMEM</code>","<code>ENOMSG</code>","<code>ENONET</code>","<code>ENOPKG</code>","<code>ENOPROTOOPT</code>","<code>ENOSPC</code>","<code>ENOSR</code>","<code>ENOSTR</code>","<code>ENOSYS</code>","<code>ENOTBLK</code>","<code>ENOTCONN</code>","<code>ENOTDIR</code>","<code>ENOTEMPTY</code>","<code>ENOTNAM</code>","<code>ENOTRECOVERABLE</code>","<code>ENOTSOCK</code>","<code>ENOTSUP</code>","<code>ENOTTY</code>","<code>ENOTUNIQ</code>","<code>ENXIO</code>","<code>EOPNOTSUPP</code>","<code>EOVERFLOW</code>","<code>EOWNERDEAD</code>","<code>EPERM</code>","<code>EPFNOSUPPORT</code>","<code>EPIPE</code>","<code>EPROTO</code>","<code>EPROTONOSUPPORT</code>","<code>EPROTOTYPE</code>","<code>ERANGE</code>","<code>EREMCHG</code>","<code>EREMOTE</code>","<code>EREMOTEIO</code>","<code>ERESTART</code>","<code>ERFKILL</code>","<code>EROFS</code>","<code>ESHUTDOWN</code>","<code>ESOCKTNOSUPPORT</code>","<code>ESPIPE</code>","<code>ESRCH</code>","<code>ESRMNT</code>","<code>ESTALE</code>","<code>ESTRPIPE</code>","<code>ETIME</code>","<code>ETIMEDOUT</code>","<code>E2BIG</code>","<code>ETOOMANYREFS</code>","<code>ETXTBSY</code>","<code>EUCLEAN</code>","<code>EUNATCH</code>","<code>EUSERS</code>","<code>EWOULDBLOCK</code>","<code>EXDEV</code>","<code>EXFULL</code>","","","","","","","","","Returns the argument unchanged.","Convert from a C <code>errno</code> value (which is positive) to an …","Extract an <code>Errno</code> value from a <code>std::io::Error</code>.","Construct an <code>Errno</code> from a raw OS error number.","","Calls <code>U::from(self)</code>.","Shorthand for <code>std::io::Error::from(self).kind()</code>.","","Extract the raw OS error number from this error.","","","Check for an error from the result of a syscall which …","Check for an error from the result of a syscall which …","Check for an error from the result of a syscall which …","Check for an error from the result of a syscall which …","Check for an error from the result of a syscall which …","Check for an error from the result of a syscall which …","Check for an error from the result of a syscall which …","","","","","","","","","","","","","","","","","","","","","","","<code>RWF_APPEND</code> (since Linux 4.16)","<code>FD_CLOEXEC</code>","<code>O_CLOEXEC</code>","<code>RWF_DSYNC</code> (since Linux 4.7)","<code>O_*</code> constants for use with <code>dup2</code>.","<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.","<code>RWF_HIPRI</code> (since Linux 4.6)","<code>RWF_NOWAIT</code> (since Linux 4.14)","<code>RWF_*</code> constants for use with <code>preadv2</code> and <code>pwritev2</code>.","<code>RWF_SYNC</code> (since Linux 4.7)","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","linux_raw syscalls supporting <code>rustix::mount</code>.","","","","<code>MS_BIND</code>","<code>MNT_DETACH</code>","<code>MS_DIRSYNC</code>","<code>MNT_EXPIRE</code>","<code>MNT_FORCE</code>","","<code>MS_LAZYTIME</code>","","<code>MS_*</code> constants for use with <code>mount</code>.","","<code>MS_*</code> constants for use with <code>change_mount</code>.","<code>MS_NOATIME</code>","<code>MS_NODEV</code>","<code>MS_NODIRATIME</code>","<code>MS_NOEXEC</code>","<code>UMOUNT_NOFOLLOW</code>","<code>MS_NOSUID</code>","<code>MS_NOSYMFOLLOW</code>","<code>MS_MANDLOCK</code>","<code>MS_PRIVATE</code>","<code>MS_RDONLY</code>","<code>MS_REC</code>","<code>MS_REC</code>","<code>MS_RELATIME</code>","","<code>MS_SHARED</code>","<code>MS_SILENT</code>","<code>MS_SILENT</code>","<code>MS_SLAVE</code>","<code>MS_STRICTATIME</code>","<code>MS_SYNCHRONOUS</code>","<code>MS_UNBINDABLE</code>","<code>MNT_*</code> constants for use with <code>unmount</code>.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","Get the underlying bits value.","","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","Syscall arguments use register-sized types. We use a …","","To preserve provenance, syscall arguments and return …","","","Syscall return values use register-sized types. We use a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert <code>raw</code> from a value produced by a syscall machine …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Encode a system call number (a <code>__NR_*</code> constant) as a …","","Seal our various traits using the technique documented here…","","","Encode a system call argument as an <code>ArgReg</code>.","Convert <code>self</code> to a <code>usize</code> ready to be passed to a syscall …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linux_raw syscalls for UIDs and GIDs","","","","","","Return a <code>bitcast</code> of the value of <code>$x.bits()</code>, where <code>$x</code> is a …","A trait to borrow the file descriptor from an underlying …","A trait to extract the raw file descriptor from an …","A borrowed file descriptor.","A trait to express the ability to construct an object from …","A trait to express the ability to consume an object and …","An owned file descriptor.","Raw file descriptors.","","Borrows the file descriptor.","","","Extracts the raw file descriptor.","","","","","","","Return a <code>BorrowedFd</code> holding the given raw file descriptor.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Constructs a new instance of <code>Self</code> from the given raw file …","Constructs a new instance of <code>Self</code> from the given raw file …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this object, returning the raw underlying file …","","","","","Creates a new <code>OwnedFd</code> instance that shares the same …","Creates a new <code>OwnedFd</code> instance that shares the same …","","","","","","","Representation of a borrowed C string.","A type representing an owned, C-compatible, nul-terminated …","An error indicating that a nul byte was not in the …","An error indicating that an interior nul byte was found.","Returns the contents of this <code>CString</code> as a slice of bytes.","Equivalent to <code>CString::as_bytes()</code> except that the returned …","Extracts a <code>CStr</code> slice containing the entire string.","","","","Returns the inner pointer to this C string.","","","","","","","","","","","","","","","Equivalent to C’s <code>char</code> type.","","","","","","","","","","Creates an empty <code>CString</code>.","","","","","","","","","","","","","","","","","","","","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","","Converts a Vec&lt;NonZeroU8&gt; into a <code>CString</code> without copying …","Returns the argument unchanged.","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …","Returns the argument unchanged.","Returns the argument unchanged.","Creates a C string wrapper from a byte slice.","Creates a C string wrapper from a byte slice.","Unsafely creates a C string wrapper from a byte slice.","Wraps a raw C string with a safe C string wrapper.","Retakes ownership of a <code>CString</code> that was transferred to C …","Creates a C-compatible string by consuming a byte vector, …","Attempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.","Converts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>CString</code> into a boxed <code>CStr</code>.","Consumes the <code>CString</code> and returns the underlying byte …","Equivalent to <code>CString::into_bytes()</code> except that the …","","","","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","Consumes the <code>CString</code> and transfers ownership of the string …","Converts the <code>CString</code> into a <code>String</code> if it contains valid …","Consumes this error, returning the underlying vector of …","","","","Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.","","Creates a new C-compatible string from a container of …","Returns the position of the nul byte in the slice that …","","","","","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","","","","","Yields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.","","","","","Converts a <code>CStr</code> into a Cow&lt;str&gt;.","","","","","","","","","","","","<code>*_OK</code> constants for use with <code>accessat</code>.","<code>*_OK</code> constants for use with <code>accessat</code>.","<code>POSIX_FADV_*</code> constants for use with <code>fadvise</code>.","<code>POSIX_FADV_*</code> constants for use with <code>fadvise</code>.","<code>AT_*</code> constants for use with <code>openat</code>, <code>statat</code>, and other <code>*at</code> …","<code>AT_*</code> constants for use with <code>openat</code>, <code>statat</code>, and other <code>*at</code> …","<code>S_IFBLK</code>","<code>S_IFBLK</code>","<code>AT_FDCWD</code>—A handle representing the current working …","<code>S_IFCHR</code>","<code>S_IFCHR</code>","Sets the offset to the current position plus the specified …","Sets the offset to the current position plus the specified …","<code>dev_t</code>","<code>dev_t</code>","<code>DIR*</code>","<code>struct dirent</code>","Re-export types common to POSIX-ish platforms. …","<code>S_IFDIR</code>","<code>S_IFDIR</code>","<code>POSIX_FADV_DONTNEED</code>","<code>POSIX_FADV_DONTNEED</code>","Sets the offset to the size of this object plus the …","<code>FALLOC_FL_*</code> constants for use with <code>fallocate</code>.","<code>FALLOC_FL_*</code> constants for use with <code>fallocate</code>.","","<code>S_IFIFO</code>","<code>S_IFIFO</code>","Re-export types common to POSIX-ish platforms. …","<code>S_IF*</code> constants for use with <code>mknodat</code> and <code>Stat</code>’s <code>st_mode</code> …","<code>S_IF*</code> constants. <code>S_IF*</code> constants for use with <code>mknodat</code> and …","Re-export types common to POSIX-ish platforms. …","<code>LOCK_*</code> constants for use with <code>flock</code> and <code>fcntl_lock</code>.","<code>LOCK_*</code> constants for use with <code>flock</code> and <code>fcntl_lock</code>.","<code>__fsword_t</code>","<code>__fsword_t</code>","<code>gid_t</code>—A Unix group ID.","Sets the offset to the current position plus the specified …","<code>LOCK_EX</code>","<code>LOCK_EX</code>","<code>LOCK_SH</code>","<code>LOCK_SH</code>","<code>MFD_*</code> constants for use with <code>memfd_create</code>.","<code>MFD_*</code> constants for use with <code>memfd_create</code>.","Re-export types common to POSIX-ish platforms. …","<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.","<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.","The filesystem magic number for NFS.","<code>POSIX_FADV_NOREUSE</code>","<code>POSIX_FADV_NOREUSE</code>","<code>LOCK_EX | LOCK_NB</code>","<code>LOCK_EX | LOCK_NB</code>","<code>LOCK_SH | LOCK_NB</code>","<code>LOCK_SH | LOCK_NB</code>","<code>LOCK_UN | LOCK_NB</code>","<code>LOCK_UN | LOCK_NB</code>","<code>POSIX_FADV_NORMAL</code>","<code>POSIX_FADV_NORMAL</code>","A type for the <code>tv_nsec</code> field of <code>Timespec</code>.","<code>O_*</code> constants for use with <code>openat</code>.","<code>O_*</code> constants for use with <code>openat</code>.","Re-export types common to POSIX-ish platforms. …","The filesystem magic number for procfs.","A <code>Uid</code> corresponding to the root user (uid 0).","A <code>Gid</code> corresponding to the root group (gid 0).","<code>POSIX_FADV_RANDOM</code>","<code>POSIX_FADV_RANDOM</code>","A directory iterator implemented with getdents.","A raw directory entry, similar to <code>std::fs::DirEntry</code>.","<code>mode_t</code>","<code>mode_t</code>","<code>S_IFREG</code>","<code>S_IFREG</code>","<code>RENAME_*</code> constants for use with <code>renameat_with</code>.","<code>RESOLVE_*</code> constants for use with <code>openat2</code>.","<code>F_SEAL_*</code> constants for use with <code>fcntl_add_seals</code> and …","<code>F_SEAL_*</code> constants for use with <code>fcntl_add_seals</code> and …","A type for the <code>tv_sec</code> field of <code>Timespec</code>.","Enumeration of possible methods to seek within an I/O …","<code>POSIX_FADV_SEQUENTIAL</code>","<code>POSIX_FADV_SEQUENTIAL</code>","<code>S_IFSOCK</code>","<code>S_IFSOCK</code>","Sets the offset to the provided number of bytes.","<code>struct stat</code> for use with <code>statat</code> and <code>fstat</code>.","<code>struct stat</code> for use with <code>statat</code> and <code>fstat</code>.","<code>struct statfs</code> for use with <code>statfs</code> and <code>fstatfs</code>.","<code>struct statfs</code> for use with <code>statfs</code> and <code>fstatfs</code>.","<code>struct statvfs</code> for use with <code>statvfs</code> and <code>fstatvfs</code>.","<code>struct statvfs</code> for use with <code>statvfs</code> and <code>fstatvfs</code>.","<code>ST_*</code> constants for use with <code>StatVfs</code>.","<code>ST_*</code> constants for use with <code>StatVfs</code>.","<code>struct statx</code> for use with <code>statx</code>.","<code>struct statx</code> for use with <code>statx</code>.","<code>STATX_*</code> constants for use with <code>statx</code>.","<code>STATX_*</code> constants for use with <code>statx</code>.","<code>struct statx_timestamp</code> for use with <code>Statx</code>.","<code>struct statx_timestamp</code> for use with <code>Statx</code>.","<code>S_IFLNK</code>","<code>S_IFLNK</code>","<code>struct timespec</code>","Timestamps used by <code>utimensat</code> and <code>futimens</code>.","<code>UTIME_NOW</code> for use with <code>utimensat</code>.","<code>UTIME_OMIT</code> for use with <code>utimensat</code>.","<code>uid_t</code>—A Unix user ID.","An unknown filesystem object.","An unknown filesystem object.","<code>LOCK_UN</code>","<code>LOCK_UN</code>","<code>POSIX_FADV_WILLNEED</code>","<code>POSIX_FADV_WILLNEED</code>","<code>XATTR_*</code> constants for use with <code>setxattr</code>, and other …","POSIX-style filesystem functions which operate on bare …","<code>access(path, access)</code>—Tests permissions for a file or …","<code>faccessat(dirfd, path, access, flags)</code>—Tests permissions …","Converts a <code>Uid</code> into a <code>RawUid</code>.","Converts a <code>Gid</code> into a <code>RawGid</code>.","POSIX-style <code>*at</code> functions.","Returns the last access time of the file, in seconds since …","Returns the last access time of the file, in nanoseconds …","Returns the block size for filesystem I/O.","Returns the number of blocks allocated to the file, in …","","","","","","","<code>chmod(path, mode)</code>—Sets file or directory permissions.","<code>fchmodat(dirfd, path, mode, flags)</code>—Sets file or …","<code>chown(path, owner, group)</code>—Sets open file or directory …","<code>fchownat(dirfd, path, owner, group, flags)</code>—Sets file or …","","","","","Filesystem API constants, translated into <code>bitflags</code> …","","<code>copy_file_range(fd_in, off_in, fd_out, off_out, len, 0)</code>…","Returns the last status change time of the file, in …","Returns the last status change time of the file, in …","Pass custom flags to the <code>flags</code> argument of <code>open</code>.","The <code>cwd</code> function, representing the current working …","Return the value of <code>CWD</code>.","","","Returns the ID of the device containing the file.","<code>Dir</code> and <code>DirEntry</code>.","","","","","<code>ioctl(fd, EXT4_IOC_RESIZE_FS, blocks)</code>—Resize ext4 …","","","","","","","","","","","","","","","","","","","","","","","","<code>posix_fadvise(fd, offset, len, advice)</code>—Declares an …","<code>fallocate(fd, mode, offset, len)</code>—Adjusts file allocation.","<code>fchmod(fd, mode)</code>—Sets open file or directory permissions.","<code>fchown(fd, owner, group)</code>—Sets open file or directory …","The Unix <code>fcntl</code> function is effectively lots of different …","<code>fcntl(fd, F_ADD_SEALS)</code>","","<code>fcntl(fd, F_GET_SEALS)</code>","","<code>fcntl(fd, F_GETFL)</code>—Returns a file descriptor’s access …","<code>fcntl(fd, F_SETLK)</code>—Acquire or release an <code>fcntl</code>-style …","","<code>fcntl(fd, F_SETFL, flags)</code>—Sets a file descriptor’s …","Functions which operate on file descriptors.","The <code>OwnedFd</code> that we read directory entries from.","","<code>fdatasync(fd)</code>—Ensures that file data is written to the …","<code>fgetxattr(fd, name, value.as_ptr(), value.len())</code>—Get …","","","","<code>flistxattr(fd, list.as_ptr(), list.len())</code>—List extended …","<code>flock(fd, operation)</code>—Acquire or release an advisory lock …","","","<code>fremovexattr(fd, name)</code>—Remove an extended filesystem …","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>RawUid</code> into a <code>Uid</code>.","Converts a <code>RawGid</code> into a <code>Gid</code>.","<code>fsetxattr(fd, name, value.as_ptr(), value.len(), flags)</code>…","<code>fstat(fd)</code>—Queries metadata for an open file or directory.","<code>fstatfs(fd)</code>—Queries filesystem statistics for an open …","<code>fstatvfs(fd)</code>—Queries filesystem statistics for an open …","<code>fsync(fd)</code>—Ensures that file data and metadata is written …","<code>ftruncate(fd, length)</code>—Sets the length of a file.","<code>futimens(fd, times)</code>—Sets timestamps for an open file or …","<code>getxattr(path, name, value.as_ptr(), value.len())</code>—Get …","Returns the group ID of the owner of this file.","","","","","Returns the inode number.","Returns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …","","inotify support for working with inotifies","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Filesystem-oriented <code>ioctl</code> functions.","<code>ioctl(fd, BLKPBSZGET)</code>—Returns the physical block size of …","<code>ioctl(fd, BLKSSZGET)</code>—Returns the logical block size of a …","<code>ioctl(fd, FICLONE, src_fd)</code>—Share data between open files.","Returns <code>true</code> if this file type is a block device.","Returns <code>true</code> if this file type is a char device.","Returns <code>true</code> if this file type is a fifo.","<code>fcntl(fd, F_GETFL) &amp; O_ACCMODE</code>","Test whether this uid represents the root user (uid 0).","Test whether this gid represents the root group (gid 0).","Returns <code>true</code> if this file type is a socket.","The timestamp of the last access to a filesystem object.","The timestamp of the last modification of a filesystem …","<code>lgetxattr(path, name, value.as_ptr(), value.len())</code>—Get …","<code>link(old_path, new_path)</code>—Creates a hard link.","<code>linkat(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…","<code>listxattr(path, list.as_ptr(), list.len())</code>—List extended …","<code>llistxattr(path, list.as_ptr(), list.len())</code>—List …","<code>lremovexattr(path, name)</code>—Remove an extended filesystem …","<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…","<code>lstat(path)</code>—Queries metadata for a file or directory, …","<code>major(dev)</code>","","<code>makedev(maj, min)</code>","","<code>memfd_create(path, flags)</code>","<code>minor(dev)</code>","<code>mkdir(path, mode)</code>—Creates a directory.","<code>mkdirat(fd, path, mode)</code>—Creates a directory.","<code>mknodat(dirfd, path, mode, dev)</code>—Creates special or …","Sets the mode bits that a new file will be created with.","Returns the rights applied to this file.","Linux <code>mount</code>.","Returns the last modification time of the file, in seconds …","Returns the last modification time of the file, in …","","","","Returns the number of hard links pointing to this file.","","<code>open(path, oflags, mode)</code>—Opens a file.","<code>openat(dirfd, path, oflags, mode)</code>—Opens a file.","","…","","<code>RawDir</code> and <code>RawDirEntry</code>.","Returns the device ID of this file (if it is a special …","Reads a number of bytes starting from a given offset.","Reads the exact number of byte required to fill <code>buf</code> from …","Like <code>read_at</code>, except that it reads into a slice of buffers.","<code>readlink(path)</code>—Reads the contents of a symlink.","<code>readlinkat(fd, path)</code>—Reads the contents of a symlink.","<code>removexattr(path, name)</code>—Remove an extended filesystem …","<code>rename(old_path, new_path)</code>—Renames a file or directory.","<code>renameat(old_dirfd, old_path, new_dirfd, new_path)</code>…","<code>renameat2(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…","<code>rmdir(path)</code>—Removes a directory.","<code>lseek(fd, offset, whence)</code>—Repositions a file descriptor …","The following is derived from Rust’s …","","<code>sendfile(out_fd, in_fd, offset, count)</code>","<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…","Returns the total size of this file in bytes.","<code>stat(path)</code>—Queries metadata for a file or directory.","<code>fstatat(dirfd, path, flags)</code>—Queries metadata for a file …","<code>statfs</code>—Queries filesystem metadata.","<code>statvfs</code>—Queries filesystem metadata, POSIX version.","Linux <code>statx</code>.","<code>statx(dirfd, path, flags, mask, statxbuf)</code>","<code>symlink(old_path, new_path)</code>—Creates a symlink.","<code>symlinkat(old_path, new_dirfd, new_path)</code>—Creates a …","","<code>sync</code>—Flush cached filesystem data for all filesystems.","<code>syncfs(fd)</code>—Flush cached filesystem data.","<code>lseek(fd, 0, SEEK_CUR)</code>—Returns the current position …","","","","","","","","","Returns the user ID of the owner of this file.","<code>unlink(path)</code>—Unlinks a file.","<code>unlinkat(fd, path, flags)</code>—Unlinks a file or remove a …","<code>utimensat(dirfd, path, times, flags)</code>—Sets file or …","Attempts to write an entire buffer starting from a given …","Writes a number of bytes starting from a given offset.","Like <code>write_at</code>, except that it writes from a slice of …","","","<code>access(path, access)</code>—Tests permissions for a file or …","<code>chmod(path, mode)</code>—Sets file or directory permissions.","<code>chown(path, owner, group)</code>—Sets open file or directory …","<code>link(old_path, new_path)</code>—Creates a hard link.","<code>lstat(path)</code>—Queries metadata for a file or directory, …","<code>mkdir(path, mode)</code>—Creates a directory.","<code>open(path, oflags, mode)</code>—Opens a file.","<code>readlink(path)</code>—Reads the contents of a symlink.","<code>rename(old_path, new_path)</code>—Renames a file or directory.","<code>rmdir(path)</code>—Removes a directory.","<code>stat(path)</code>—Queries metadata for a file or directory.","<code>statfs</code>—Queries filesystem metadata.","<code>statvfs</code>—Queries filesystem metadata, POSIX version.","<code>symlink(old_path, new_path)</code>—Creates a symlink.","<code>unlink(path)</code>—Unlinks a file.","","","<code>UTIME_NOW</code> for use with <code>utimensat</code>.","<code>UTIME_OMIT</code> for use with <code>utimensat</code>.","","<code>faccessat(dirfd, path, access, flags)</code>—Tests permissions …","<code>fchmodat(dirfd, path, mode, flags)</code>—Sets file or …","<code>fchownat(dirfd, path, owner, group, flags)</code>—Sets file or …","<code>linkat(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…","<code>mkdirat(fd, path, mode)</code>—Creates a directory.","<code>mknodat(dirfd, path, mode, dev)</code>—Creates special or …","<code>openat(dirfd, path, oflags, mode)</code>—Opens a file.","<code>readlinkat(fd, path)</code>—Reads the contents of a symlink.","<code>renameat(old_dirfd, old_path, new_dirfd, new_path)</code>…","<code>renameat2(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…","<code>fstatat(dirfd, path, flags)</code>—Queries metadata for a file …","<code>symlinkat(old_path, new_dirfd, new_path)</code>—Creates a …","<code>unlinkat(fd, path, flags)</code>—Unlinks a file or remove a …","<code>utimensat(dirfd, path, times, flags)</code>—Sets file or …","","","","","","","","","","<code>copy_file_range(fd_in, off_in, fd_out, off_out, len, 0)</code>…","<code>AT_FDCWD</code>—A handle representing the current working …","Return the value of <code>CWD</code>.","","","","<code>posix_fadvise(fd, offset, len, advice)</code>—Declares an …","","<code>fcntl(fd, F_ADD_SEALS)</code>","","<code>fcntl(fd, F_GET_SEALS)</code>","","<code>fcntl(fd, F_GETFL)</code>—Returns a file descriptor’s access …","<code>fcntl(fd, F_SETLK)</code>—Acquire or release an <code>fcntl</code>-style …","","<code>fcntl(fd, F_SETFL, flags)</code>—Sets a file descriptor’s …","","","","The filesystem magic number for NFS.","The filesystem magic number for procfs.","","","","","Timestamps used by <code>utimensat</code> and <code>futimens</code>.","","","","","","<code>fallocate(fd, mode, offset, len)</code>—Adjusts file allocation.","<code>fchmod(fd, mode)</code>—Sets open file or directory permissions.","<code>fchown(fd, owner, group)</code>—Sets open file or directory …","<code>fdatasync(fd)</code>—Ensures that file data is written to the …","<code>flock(fd, operation)</code>—Acquire or release an advisory lock …","","Returns the argument unchanged.","<code>fstat(fd)</code>—Queries metadata for an open file or directory.","<code>fstatfs(fd)</code>—Queries filesystem statistics for an open …","<code>fstatvfs(fd)</code>—Queries filesystem statistics for an open …","<code>fsync(fd)</code>—Ensures that file data and metadata is written …","<code>ftruncate(fd, length)</code>—Sets the length of a file.","<code>futimens(fd, times)</code>—Sets timestamps for an open file or …","Calls <code>U::from(self)</code>.","<code>fcntl(fd, F_GETFL) &amp; O_ACCMODE</code>","The timestamp of the last access to a filesystem object.","The timestamp of the last modification of a filesystem …","<code>lseek(fd, offset, whence)</code>—Repositions a file descriptor …","<code>syncfs(fd)</code>—Flush cached filesystem data.","<code>lseek(fd, 0, SEEK_CUR)</code>—Returns the current position …","","","","","<code>S_IF*</code> constants.","","","<code>IN_*</code> for use with <code>inotify_init</code>.","<code>IN*</code> for use with <code>inotify_add_watch</code>.","<code>inotify_add_watch(self, path, flags)</code>—Adds a watch to …","<code>inotify_init1(flags)</code>—Creates a new inotify object.","<code>inotify_rm_watch(self, wd)</code>—Removes a watch from this …","","","","","<code>ioctl(fd, EXT4_IOC_RESIZE_FS, blocks)</code>—Resize ext4 …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","<code>ioctl(fd, BLKPBSZGET)</code>—Returns the physical block size of …","<code>ioctl(fd, BLKSSZGET)</code>—Returns the logical block size of a …","<code>ioctl(fd, FICLONE, src_fd)</code>—Share data between open files.","","","","","<code>major(dev)</code>","<code>makedev(maj, min)</code>","<code>minor(dev)</code>","","<code>memfd_create(path, flags)</code>","…","A directory iterator implemented with getdents.","A raw directory entry, similar to <code>std::fs::DirEntry</code>.","","","","","","","Returns the file name of this directory entry.","","Returns the type of this directory entry.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the inode number of this directory entry.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the internal buffer is empty and will be …","Create a new iterator from the given file descriptor and …","Identical to <code>Iterator::next</code> except that <code>Iterator::Item</code> …","Returns the seek cookie to the next directory entry.","","","","","","","","","Sets the offset to the current position plus the specified …","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","Sets the offset to the current position plus the specified …","Enumeration of possible methods to seek within an I/O …","Sets the offset to the provided number of bytes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","<code>sendfile(out_fd, in_fd, offset, count)</code>","","","","","<code>statx(dirfd, path, flags, mask, statxbuf)</code>","","","The first <code>statx</code> call failed with <code>NOSYS</code> (or something we’…","The first <code>statx</code> call failed with <code>PERM</code>.","The first <code>statx</code> call. We don’t know if <code>statx</code> is …","<code>sync</code>—Flush cached filesystem data for all filesystems.","<code>XATTR_CREATE</code>","<code>XATTR_REPLACE</code>","<code>XATTR_*</code> constants for use with <code>setxattr</code>, and other …","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","<code>fgetxattr(fd, name, value.as_ptr(), value.len())</code>—Get …","<code>flistxattr(fd, list.as_ptr(), list.len())</code>—List extended …","","","","","","<code>fremovexattr(fd, name)</code>—Remove an extended filesystem …","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","<code>fsetxattr(fd, name, value.as_ptr(), value.len(), flags)</code>…","<code>getxattr(path, name, value.as_ptr(), value.len())</code>—Get …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","<code>lgetxattr(path, name, value.as_ptr(), value.len())</code>—Get …","<code>listxattr(path, list.as_ptr(), list.len())</code>—List extended …","<code>llistxattr(path, list.as_ptr(), list.len())</code>—List …","<code>lremovexattr(path, name)</code>—Remove an extended filesystem …","<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","<code>removexattr(path, name)</code>—Remove an extended filesystem …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","<code>O_*</code> constants for use with <code>dup2</code>.","<code>errno</code>—An error code.","<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","<code>RWF_*</code> constants for use with <code>preadv2</code> and <code>pwritev2</code>.","A specialized <code>Result</code> type for <code>rustix</code> APIs.","Advance the internal cursor of the slice.","Advance the internal cursor of the slice.","Advance a slice of slices.","Advance a slice of slices.","","","","","","","The unsafe <code>close</code> for raw file descriptors.","<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.","","","","Functions which duplicate file descriptors.","<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …","<code>dup2(fd, new)</code>—Changes the file description of a file …","<code>dup3(fd, new, flags)</code>—Changes the file description of a …","The <code>Errno</code> type, which is a minimal wrapper around an error …","The Unix <code>fcntl</code> function is effectively lots of different …","<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …","<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.","<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The Unix <code>ioctl</code> function is effectively lots of different …","<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …","<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …","Creates a new <code>IoSliceMut</code> wrapping a byte slice.","Creates a new <code>IoSlice</code> wrapping a byte slice.","<code>pread(fd, buf, offset)</code>—Reads from a file at a given …","<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …","<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …","<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.","<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …","<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …","<code>read(fd, buf)</code>—Reads from a stream.","<code>read</code> and <code>write</code>, optionally positioned, optionally vectored","<code>readv(fd, bufs)</code>—Reads from a stream into multiple …","Call <code>f</code> until it either succeeds or fails other than …","","","","","","","","<code>write(fd, buf)</code>—Writes to a stream.","<code>writev(fd, bufs)</code>—Writes to a stream from multiple …","<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.","","<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …","<code>dup2(fd, new)</code>—Changes the file description of a file …","<code>dup3(fd, new, flags)</code>—Changes the file description of a …","","A specialized <code>Result</code> type for <code>rustix</code> APIs.","Call <code>f</code> until it either succeeds or fails other than …","","<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …","<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.","<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …","<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …","<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","","<code>pread(fd, buf, offset)</code>—Reads from a file at a given …","<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …","<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …","<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.","<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …","<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …","<code>read(fd, buf)</code>—Reads from a stream.","<code>readv(fd, bufs)</code>—Reads from a stream into multiple …","<code>write(fd, buf)</code>—Writes to a stream.","<code>writev(fd, bufs)</code>—Writes to a stream from multiple …","Provides a bad opcode at compile time.","Trait for something that provides an <code>ioctl</code> opcode at …","The direction that an <code>ioctl</code> is going.","Implements the traditional “getter” pattern for <code>ioctl</code>s.","Does the <code>ioctl</code> mutate any data in the userspace?","A trait defining the properties of an <code>ioctl</code> command.","The type used by the <code>ioctl</code> to signify the output.","Implements an <code>ioctl</code> with no real arguments.","None of the above.","Provides a <code>None</code> code at compile time.","The opcode.","The opcode used by this <code>ioctl</code> command.","The opcode used by an <code>Ioctl</code>.","The type of the output data.","The type used by the <code>ioctl</code> to signify the command.","Read data from the kernel.","Provides a read code at compile time.","Read and write data to the kernel.","Provides a read/write code at compile time.","Implements the pattern for <code>ioctl</code>s where a pointer argument …","Write data to the kernel.","Provides a write code at compile time.","","","","The opcode.","The opcode.","The opcode.","Get a pointer to the data to be passed to the <code>ioctl</code> …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new opcode from a direction, group, number and …","","","The input data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform an <code>ioctl</code> call.","<code>ioctl</code> opcode behavior for Linux platforms.","Create a new non-mutating opcode from a group, a number …","Create a new old <code>Opcode</code> from a raw opcode.","The output data.","Cast the output data to the correct type.","","","Implements typical patterns for <code>ioctl</code> usage.","Get the raw opcode.","The raw opcode.","Create a new reading opcode from a group, a number and the …","Create a new reading and writing opcode from a group, a …","","","","","","","","","Create a new writing opcode from a group, a number and the …","","","","","","","","","","","Compose an opcode from its component parts.","","","","","","","Provides a bad opcode at compile time.","Trait for something that provides an <code>ioctl</code> opcode at …","Implements the traditional “getter” pattern for <code>ioctl</code>s.","Implements an <code>ioctl</code> with no real arguments.","Provides a <code>None</code> code at compile time.","The opcode.","Provides a read code at compile time.","Provides a read/write code at compile time.","Implements the pattern for <code>ioctl</code>s where a pointer argument …","Provides a write code at compile time.","The opcode.","The opcode.","The opcode.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The input data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new no-argument <code>ioctl</code> object.","Create a new getter-style <code>ioctl</code> object.","Create a new pointer setter-style <code>ioctl</code> object.","The output data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","","A trait to borrow the file descriptor from an underlying …","A trait to extract the raw file descriptor from an …","A borrowed file descriptor.","A trait to express the ability to construct an object from …","A trait to express the ability to consume an object and …","An owned file descriptor.","Raw file descriptors.","","Borrows the file descriptor.","Extracts the raw file descriptor.","","","Constructs a new instance of <code>Self</code> from the given raw file …","Consumes this object, returning the raw underlying file …","Linux <code>mount</code>.","","<code>mount(source, target, filesystemtype, mountflags, data)</code>","<code>mount(source, target, NULL, MS_BIND, NULL)</code>","<code>mount(NULL, target, NULL, mountflags, NULL)</code>","<code>mount(source, target, NULL, MS_MOVE, NULL)</code>","<code>mount(source, target, NULL, MS_BIND | MS_REC, NULL)</code>","<code>mount(NULL, target, NULL, MS_REMOUNT | mountflags, data)</code>","<code>umount2(target, flags)</code>","A trait for passing path arguments.","","Convenient and efficient string argument passing.","Returns a view of this string as a maybe-owned <code>CStr</code>.","Returns a view of this string as a string slice.","Consumes <code>self</code> and returns a view of this string as a …","Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.","Returns a potentially-lossy rendering of this string as a …","A trait for passing path arguments.","Returns a view of this string as a maybe-owned <code>CStr</code>.","Returns a view of this string as a string slice.","Consumes <code>self</code> and returns a view of this string as a …","Runs a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.","Returns a potentially-lossy rendering of this string as a …","Runs a closure with <code>bytes</code> passed in as a <code>&amp;CStr</code>.","The slow path which handles any length. In theory OS’s …","A type for the <code>tv_nsec</code> field of <code>Timespec</code>.","A type for the <code>tv_sec</code> field of <code>Timespec</code>.","<code>struct timespec</code>","<code>gid_t</code>—A Unix group ID.","A group identifier as a raw integer.","A user identifier as a raw integer.","<code>uid_t</code>—A Unix user ID.","","Convert a <code>&amp;mut T</code> into a <code>*mut T</code> without using an <code>as</code>.","Convert a <code>&amp;T</code> into a <code>*const T</code> without using an <code>as</code>.","Convert a <code>*mut c_void</code> to a <code>*mut T</code>, checking that it is not …","Create an array value containing all default values, …","Create a union value containing a default value in one of …","Convert an <code>Option&lt;&amp;mut T&gt;</code> into a possibly-null <code>*mut T</code>.","Convert an <code>Option&lt;&amp;T&gt;</code> into a possibly-null <code>*const T</code>.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","A combination of <code>weakcall</code> and <code>syscall</code>. Use the libc …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,18,12,13,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,12,13,12,12,12,13,18,12,13,18,0,12,13,18,13,13,0,0,0,0,0,12,13,12,13,18,12,13,18,12,12,12,13,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,40,148,30,33,149,150,0,0,0,0,0,0,0,0,35,35,36,35,36,35,36,36,35,36,36,35,36,35,36,36,35,36,35,36,35,35,35,35,35,35,35,35,35,35,35,36,35,36,35,36,45,45,45,44,45,45,45,45,0,45,45,45,45,45,45,45,45,45,45,45,44,45,45,45,0,44,44,45,45,44,45,44,45,44,45,44,45,44,44,44,45,45,45,44,45,44,45,44,45,44,45,44,45,44,45,44,44,45,45,44,44,45,45,45,44,44,45,45,44,44,45,45,44,45,44,45,44,45,44,44,44,44,44,45,45,45,45,45,44,45,44,44,45,45,44,44,44,45,45,45,44,44,45,45,44,45,44,44,45,45,44,45,0,0,0,44,44,45,45,44,44,45,45,44,44,45,45,44,45,44,45,44,44,45,45,44,44,45,45,44,44,45,45,44,44,45,45,44,45,44,44,45,45,44,44,45,45,44,45,44,45,44,44,45,45,44,45,44,44,45,45,44,45,44,45,44,45,44,44,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,73,69,32,73,0,0,0,73,70,73,73,38,70,32,69,62,32,73,38,73,32,32,32,0,38,61,56,56,71,32,57,57,32,63,0,38,0,0,0,73,63,69,69,69,69,69,69,69,69,69,69,69,69,69,73,62,70,62,64,64,75,73,73,73,0,0,73,32,75,32,75,75,75,32,32,71,75,56,62,70,70,70,61,64,64,64,61,0,32,62,32,75,32,57,75,56,58,58,32,58,32,58,58,58,61,0,38,0,0,63,58,63,73,56,56,56,58,58,56,56,32,75,0,61,38,0,0,0,0,0,0,0,38,32,32,73,73,62,38,64,58,71,58,63,57,32,58,61,58,58,58,62,57,56,58,32,70,71,69,63,73,62,75,58,38,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,57,56,56,58,58,32,32,70,70,71,71,69,69,63,63,73,73,62,62,75,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,43,57,56,58,32,70,71,38,61,69,63,73,62,75,64,43,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,70,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,69,63,73,62,75,43,43,43,43,43,43,43,43,43,43,43,57,57,57,57,57,56,56,56,56,56,58,58,58,58,58,32,32,32,32,32,70,70,70,70,70,71,71,71,71,71,38,61,69,69,69,69,69,63,63,63,63,63,73,73,73,73,73,62,62,62,62,62,75,75,75,75,75,64,43,76,57,56,58,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,69,63,73,62,75,57,57,56,56,58,58,32,32,70,70,71,71,69,69,63,63,73,73,62,62,75,75,57,56,58,32,70,71,69,63,73,62,75,38,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,58,38,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,43,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,69,63,73,62,75,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,69,63,73,62,75,43,57,56,58,32,70,71,38,61,69,63,73,62,75,64,43,57,56,58,32,70,71,38,61,69,63,73,62,75,64,43,57,56,58,32,70,71,38,61,69,63,73,62,75,64,57,56,58,32,70,71,69,63,73,62,75,0,0,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,0,0,0,0,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,84,83,88,0,0,88,88,0,88,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,84,88,88,83,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,84,84,84,84,88,88,88,88,88,83,83,83,83,83,84,88,83,84,88,83,84,84,88,88,83,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,84,88,83,0,0,0,0,92,91,92,91,91,0,92,94,0,0,0,92,92,92,92,91,92,92,92,93,92,92,93,92,94,93,92,93,93,92,92,93,0,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,92,91,91,93,93,94,94,92,91,93,94,92,91,93,94,90,92,91,93,94,90,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,92,92,92,92,91,91,91,91,91,93,93,93,93,93,94,94,94,94,94,90,92,91,93,94,92,91,93,94,92,92,91,91,93,93,94,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,90,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,92,91,93,94,90,92,91,93,94,90,92,91,93,94,90,92,91,93,94,92,91,93,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,1,96,4,7,8,9,10,11,2,5,3,1,96,4,7,8,9,10,11,2,5,3,1,3,3,3,3,3,3,3,3,96,4,7,8,9,10,11,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,1,151,3,96,4,7,8,9,10,11,2,5,3,1,3,3,3,0,1,0,5,3,0,152,5,1,96,4,7,8,9,10,11,2,5,3,1,96,4,7,8,9,10,11,2,5,3,1,96,4,7,8,9,10,11,2,5,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,40,30,33,148,30,33,30,33,30,33,33,33,33,30,30,33,30,33,30,30,30,30,30,30,30,30,30,30,30,30,33,149,30,30,33,150,30,30,33,33,30,33,30,33,30,33,30,33,0,0,0,0,110,110,110,110,110,37,37,110,37,110,110,37,110,110,113,37,114,110,113,37,114,0,110,113,114,110,113,37,114,110,37,110,37,110,113,114,110,110,113,37,114,110,113,37,114,110,113,113,37,114,114,110,110,110,110,110,113,114,37,37,37,37,110,110,110,110,110,37,110,37,110,37,110,113,114,110,110,110,110,110,37,37,110,110,113,110,110,37,37,114,110,113,110,37,113,114,37,37,110,113,37,114,37,113,114,110,110,37,37,110,113,114,110,113,114,110,113,37,114,0,0,0,0,0,0,38,38,0,38,38,72,72,0,0,0,0,0,38,38,61,61,72,0,0,0,38,38,0,0,0,0,0,0,0,0,0,72,64,64,64,64,0,0,0,0,0,0,61,61,64,64,64,64,64,64,61,61,0,0,0,0,0,59,60,61,61,0,0,0,0,38,38,0,0,0,0,0,0,61,61,38,38,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,0,0,0,0,0,38,38,64,64,61,61,0,0,0,0,59,60,0,153,153,153,153,59,60,59,60,35,133,0,0,0,0,59,60,59,60,0,0,0,153,153,154,0,0,36,36,153,0,59,60,59,60,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,133,0,0,132,0,132,0,0,59,60,0,59,60,59,60,0,0,0,0,0,0,0,0,153,59,60,0,133,153,155,132,0,59,60,0,0,0,0,156,156,156,0,59,60,156,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,0,153,153,36,35,132,153,133,0,0,0,0,35,0,153,157,157,157,0,0,0,0,0,0,0,0,0,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,59,60,59,60,59,60,59,60,153,0,0,0,157,157,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,0,0,0,0,0,55,55,0,0,0,0,0,0,55,0,55,55,0,0,0,55,55,55,55,0,0,0,0,0,0,0,0,0,131,131,131,0,131,131,0,0,0,131,131,131,131,0,0,0,0,0,0,0,0,133,132,133,132,133,133,132,132,132,132,132,133,132,133,132,132,133,132,133,133,133,132,132,133,133,132,133,132,133,132,72,72,72,72,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,0,0,0,0,0,0,0,0,0,0,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,67,67,67,67,67,0,67,67,67,67,67,67,67,0,0,67,67,67,67,67,67,67,67,67,67,0,0,0,0,0,67,67,0,67,0,67,67,67,67,67,67,67,67,67,0,0,0,0,0,0,0,87,89,87,89,87,89,87,89,89,89,0,0,87,89,87,0,0,0,0,0,0,0,0,0,87,89,87,89,87,89,0,0,0,87,89,0,0,0,0,0,0,0,0,0,0,89,87,89,87,89,87,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0,0,136,0,138,137,0,137,0,136,0,136,0,0,136,0,0,0,0,139,140,141,137,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,135,136,141,135,136,0,0,135,135,140,137,135,136,0,135,135,135,135,135,136,135,136,135,136,135,136,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,0,0,0,139,140,141,139,140,141,139,140,141,158,159,160,161,162,139,140,141,158,159,160,161,162,139,140,141,139,140,141,158,159,160,161,162,141,139,140,141,158,159,160,161,162,139,140,141,140,139,140,141,139,140,141,158,159,160,161,162,139,140,141,158,159,160,161,162,139,140,141,158,159,160,161,162,0,0,0,0,0,0,0,0,0,0,0,0,33,40,148,30,33,149,150,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,49,0,49,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,147,147,147,0,147,147,147,147,0,147,147,0,147,147,147,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[1,[5,[4]]],[[3,[2]]]],[[1,[5,[4]]],6],[[1,[5,[4]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]],[5,[9]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]],[5,[9]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]],[5,[9]],[5,[10]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]],[5,[9]],[5,[10]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]],[5,[9]],[5,[10]],[5,[11]]],[[3,[2]]]],[[1,[5,[4]],[5,[7]],[5,[8]],[5,[9]],[5,[10]],[5,[11]]],[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,12],[13,13],[[]],[[]],[[12,12],14],[[],14],[[12,15],[[17,[16]]]],[[13,15],[[17,[16]]]],[[18,15],[[17,[16]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,[[],19],[[],19],[[],19],0,[20,[[5,[21]]]],[20,[[5,[21]]]],[22,[[5,[21]]]],[23,[[5,[21]]]],[24,[[5,[21]]]],0,[25,[[5,[21]]]],[24,[[5,[21]]]],[[],[[5,[21]]]],[[[26,[20]]],[[5,[21]]]],[27,[[5,[21]]]],[28,[[5,[21]]]],[[[3,[2]]],29],[[[3,[2]]],[[29,[22]]]],[[[3,[2]]],22],[[[3,[2]]],[[29,[23]]]],[[[3,[2]]],23],[[[3,[2]]],29],[[[3,[2]]]],[[[3,[2]]],[[29,[30]]]],[[[3,[2]]],[[29,[24]]]],[[[3,[2]]],[[29,[27]]]],[[[3,[2]]],27],[[[3,[2]]],[[29,[18]]]],[[],[[5,[21]]]],[[[31,[20]]]],[[[31,[20]]],[[5,[21]]]],[[[31,[20]]],[[5,[21]]]],[[[31,[20]]]],[[],[[5,[21]]]],[32,23],[32,24],0,0,0,0,0,0,0,0,[[],33],[[],34],0,0,[34],[[],34],0,0,0,0,0,0,0,0,[33,[[29,[35]]]],[[]],[[]],[[]],[[]],0,0,0,0,[36,37],[36,38],[[35,15],39],[[36,15],39],[[]],[[]],[36,24],[[]],[[]],[[]],0,[35,26],0,0,[35,[[26,[[29,[36]]]]]],[40,[[29,[35]]]],[35,[[26,[29]]]],[35],[35,[[29,[41]]]],[35,[[29,[42]]]],[35,[[29,[43]]]],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],44],[[],44],[[],45],[[],45],[[44,44],44],[[45,45],45],[[44,44]],[[45,45]],[[44,44],44],[[45,45],45],[[44,44]],[[45,45]],[44,23],[44,23],[44,23],[45,23],[45,23],[45,23],[[44,44],44],[[45,45],45],[[44,44]],[[45,45]],[[]],[[]],[[]],[[]],[44,44],[45,45],[[]],[[]],[44,44],[44,44],[45,45],[45,45],[[44,44],14],[[44,44],14],[[45,45],14],[[45,45],14],[[],45],[[44,44],44],[[44,44],44],[[45,45],45],[[45,45],45],[[],44],[[],44],[[],45],[[],45],[[44,44],14],[[45,45],14],[[],14],[[],14],[[44,46]],[[45,46]],[[44,15],39],[[44,15],39],[[44,15],39],[[44,15],39],[[44,15],39],[[45,15],39],[[45,15],39],[[45,15],39],[[45,15],39],[[45,15],39],[[]],[[]],[23,[[26,[44]]]],[23,[[26,[44]]]],[23,[[26,[45]]]],[23,[[26,[45]]]],[23,44],[23,44],[23,44],[23,45],[23,45],[23,45],[23,44],[23,44],[23,45],[23,45],[46,44],[46,45],[47,[[26,[44]]]],[47,[[26,[44]]]],[47,[[26,[45]]]],[47,[[26,[45]]]],[[44,48]],[[45,48]],[[33,49,45],[[29,[34]]]],[44,[[29,[30]]]],[[33,34],29],[[44,44]],[[44,44]],[[45,45]],[[45,45]],[[44,44],44],[[44,44],44],[[45,45],45],[[45,45],45],[[44,44],14],[[44,44],14],[[45,45],14],[[45,45],14],[[]],[[]],[44],[45],[44,14],[44,14],[45,14],[45,14],[44,14],[44,14],[45,14],[45,14],[44,[[50,[44]]]],[44,[[50,[44]]]],[45,[[50,[45]]]],[45,[[50,[45]]]],[44,[[51,[44]]]],[44,[[51,[44]]]],[45,[[51,[45]]]],[45,[[51,[45]]]],[44,44],[45,45],[[44,44]],[[44,44]],[[45,45]],[[45,45]],[[44,44,14]],[[44,44,14]],[[45,45,14]],[[45,45,14]],[[44,44],44],[[45,45],45],[[44,44]],[[45,45]],[[44,44],44],[[44,44],44],[[45,45],45],[[45,45],45],[[]],[[]],[[44,44]],[[44,44]],[[45,45]],[[45,45]],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[44,44],44],[[44,44],44],[[45,45],45],[[45,45],45],[52,53],[[53,53],52],[52,53],[[33,54,23],[[29,[24]]]],[[33,[26,[37]],55,56],29],[[37,57],29],[[33,37,57,56],29],[[33,37,57],29],[[37,58],29],[[33,37,58,56],29],[[37,[26,[59]],[26,[60]]],29],[[33,37,[26,[59]],[26,[60]],56],29],[[33,[26,[24]],33,[26,[24]],27],[[29,[27]]]],[[33,24,24,61],29],[[33,62,24,24],29],[[33,58],29],[[33,[26,[59]],[26,[60]]],29],[[33,63],29],[33,[[29,[63]]]],[33,[[29,[32]]]],[[33,64],29],[[33,32],29],[33,29],[[33,37,[31,[65]]],[[29,[27]]]],[[33,[31,[66]]],[[29,[27]]]],[[33,64],29],[[33,37],29],[[33,37,[31,[65]],67],29],[33,[[29,[41]]]],[33,[[29,[42]]]],[33,[[29,[43]]]],[33,29],[[33,24],29],[[33,55],29],[[33,[31,[65]]],[[29,[27]]]],[[33,[31,[[68,[65]]]]],[[29,[27]]]],[[37,37,[31,[65]]],[[29,[27]]]],[[33,37,45],[[29,[34]]]],[44,[[29,[30]]]],[[33,34],29],[[],14],[[37,37,[31,[65]]],[[29,[27]]]],[[37,37],29],[[33,37,33,37,56],29],[[37,[31,[66]]],[[29,[27]]]],[[37,[31,[66]]],[[29,[27]]]],[[37,37],29],[[37,37,[31,[65]],67],29],[37,[[29,[41]]]],[[37,69],[[29,[30]]]],[[37,58],29],[[33,37,58],29],[[33,37,38,58,24],29],[[37,32,58],[[29,[30]]]],[[33,37,32,58],[[29,[30]]]],[[33,37,32,58,70],[[29,[30]]]],[[37,[31,[65]]],[[29,[27]]]],[[33,37,[31,[[68,[65]]]]],[[29,[27]]]],[[37,37],29],[[37,37],29],[[33,37,33,37],29],[[33,37,33,37,71],29],[37,29],[[33,72],[[29,[24]]]],[[33,33,[26,[24]],27],[[29,[27]]]],[[37,37,[31,[65]],67],29],[37,[[29,[41]]]],[[33,37,56],[[29,[41]]]],[37,[[29,[42]]]],[42,43],[37,[[29,[43]]]],[[33,37,56,73],[[29,[74]]]],[[37,37],29],[[37,33,37],29],[[]],[33,29],[33,[[29,[24]]]],[37,29],[[33,37,56],29],[[33,37,55,56],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],57],[[],56],[[],58],[[],32],[[],70],[[],71],[[],69],[[],63],[[],73],[[],62],[[],75],[58,76],[38,76],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[57,23],[57,23],[56,23],[56,23],[58,76],[58,76],[32,23],[32,23],[70,24],[70,24],[71,23],[71,23],[69,23],[69,23],[63,53],[63,53],[73,53],[73,53],[62,53],[62,53],[75,24],[75,24],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[56,56],[58,58],[32,32],[70,70],[71,71],[38,38],[61,61],[69,69],[63,63],[73,73],[62,62],[75,75],[64,64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[56,56],[58,58],[32,32],[70,70],[71,71],[69,69],[63,63],[73,73],[62,62],[75,75],[[57,57],14],[[56,56],14],[[58,58],14],[[32,32],14],[[70,70],14],[[71,71],14],[[69,69],14],[[63,63],14],[[73,73],14],[[62,62],14],[[75,75],14],[[],70],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[],57],[[],56],[[],58],[[],32],[[],70],[[],71],[[],69],[[],63],[[],73],[[],62],[[],75],[[57,57],14],[[56,56],14],[[58,58],14],[[32,32],14],[[70,70],14],[[71,71],14],[[38,38],14],[[61,61],14],[[69,69],14],[[63,63],14],[[73,73],14],[[62,62],14],[[75,75],14],[[64,64],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[57,46]],[[56,46]],[[58,46]],[[32,46]],[[70,46]],[[71,46]],[[69,46]],[[63,46]],[[73,46]],[[62,46]],[[75,46]],0,0,0,0,0,0,0,0,0,0,0,[[57,15],39],[[57,15],39],[[57,15],39],[[57,15],39],[[57,15],39],[[56,15],39],[[56,15],39],[[56,15],39],[[56,15],39],[[56,15],39],[[58,15],39],[[58,15],39],[[58,15],39],[[58,15],39],[[58,15],39],[[32,15],39],[[32,15],39],[[32,15],39],[[32,15],39],[[32,15],39],[[70,15],39],[[70,15],39],[[70,15],39],[[70,15],39],[[70,15],39],[[71,15],39],[[71,15],39],[[71,15],39],[[71,15],39],[[71,15],39],[[38,15],39],[[61,15],39],[[69,15],39],[[69,15],39],[[69,15],39],[[69,15],39],[[69,15],39],[[63,15],39],[[63,15],39],[[63,15],39],[[63,15],39],[[63,15],39],[[73,15],39],[[73,15],39],[[73,15],39],[[73,15],39],[[73,15],39],[[62,15],39],[[62,15],39],[[62,15],39],[[62,15],39],[[62,15],39],[[75,15],39],[[75,15],39],[[75,15],39],[[75,15],39],[[75,15],39],[[64,15],39],[[]],[58,76],[[]],[[]],[76,58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[26,[57]]]],[23,[[26,[56]]]],[76,[[26,[58]]]],[23,[[26,[32]]]],[24,[[26,[70]]]],[23,[[26,[71]]]],[23,[[26,[69]]]],[53,[[26,[63]]]],[53,[[26,[73]]]],[53,[[26,[62]]]],[24,[[26,[75]]]],[23,57],[23,57],[23,56],[23,56],[76,58],[76,58],[23,32],[23,32],[24,70],[24,70],[23,71],[23,71],[23,69],[23,69],[53,63],[53,63],[53,73],[53,73],[53,62],[53,62],[24,75],[24,75],[23,57],[23,56],[76,58],[23,32],[24,70],[23,71],[23,69],[53,63],[53,73],[53,62],[24,75],[65,38],[46,57],[46,56],[46,58],[46,32],[46,70],[46,71],[46,69],[46,63],[46,73],[46,62],[46,75],[47,[[26,[57]]]],[47,[[26,[56]]]],[47,[[26,[58]]]],[47,[[26,[32]]]],[47,[[26,[70]]]],[47,[[26,[71]]]],[47,[[26,[69]]]],[47,[[26,[63]]]],[47,[[26,[73]]]],[47,[[26,[62]]]],[47,[[26,[75]]]],[76,58],[76,38],[[57,48]],[[56,48]],[[58,48]],[[32,48]],[[70,48]],[[71,48]],[[69,48]],[[63,48]],[[73,48]],[[62,48]],[[75,48]],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[57,57],14],[[56,56],14],[[58,58],14],[[32,32],14],[[70,70],14],[[71,71],14],[[69,69],14],[[63,63],14],[[73,73],14],[[62,62],14],[[75,75],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57],[56],[58],[32],[70],[71],[69],[63],[73],[62],[75],[57,14],[56,14],[58,14],[32,14],[70,14],[71,14],[69,14],[63,14],[73,14],[62,14],[75,14],[57,14],[56,14],[58,14],[32,14],[70,14],[71,14],[69,14],[63,14],[73,14],[62,14],[75,14],[57,[[50,[57]]]],[56,[[50,[56]]]],[58,[[50,[58]]]],[32,[[50,[32]]]],[70,[[50,[70]]]],[71,[[50,[71]]]],[69,[[50,[69]]]],[63,[[50,[63]]]],[73,[[50,[73]]]],[62,[[50,[62]]]],[75,[[50,[75]]]],[57,[[51,[57]]]],[56,[[51,[56]]]],[58,[[51,[58]]]],[32,[[51,[32]]]],[70,[[51,[70]]]],[71,[[51,[71]]]],[69,[[51,[69]]]],[63,[[51,[63]]]],[73,[[51,[73]]]],[62,[[51,[62]]]],[75,[[51,[75]]]],[57,57],[56,56],[58,58],[32,32],[70,70],[71,71],[69,69],[63,63],[73,73],[62,62],[75,75],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[[57,57,14]],[[56,56,14]],[[58,58,14]],[[32,32,14]],[[70,70,14]],[[71,71,14]],[[69,69,14]],[[63,63,14]],[[73,73,14]],[[62,62,14]],[[75,75,14]],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[57,57]],[[56,56]],[[58,58]],[[32,32]],[[70,70]],[[71,71]],[[69,69]],[[63,63]],[[73,73]],[[62,62]],[[75,75]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[57,57],57],[[56,56],56],[[58,58],58],[[32,32],32],[[70,70],70],[[71,71],71],[[69,69],69],[[63,63],63],[[73,73],73],[[62,62],62],[[75,75],75],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[77,77],[[]],[[77,77],14],[[],14],[[77,15],39],[[77,15],39],[[]],[53,77],[78,[[26,[77]]]],[34,77],[[77,48]],[[]],[77,79],[80],[77,34],[[]],[[],81],[[[3,[82]]],[[29,[22]]]],[[[3,[82]]],[[29,[23]]]],[[[3,[82]]],[[29,[28]]]],[[[3,[82]]],[[29,[24]]]],[[[3,[82]]],[[29,[27]]]],[[[3,[82]]],29],[[[3,[82]]],[[29,[18]]]],[[],17],[[],17],[[],19],[28],[33,[[29,[30]]]],[[33,30],29],[[33,30,83],29],[[33,28],[[29,[30]]]],[33,[[29,[84]]]],[[33,84],29],[[33,85,18],[[29,[86]]]],[[33,85,18],[[29,[86]]]],[[33,[31,[65]],24],[[29,[27]]]],[[33,[31,[87]],24],[[29,[27]]]],[[33,[31,[87]],24,88],[[29,[27]]]],[[33,[31,[65]],24],[[29,[27]]]],[[33,[31,[89]],24],[[29,[27]]]],[[33,[31,[89]],24,88],[[29,[27]]]],[[33,[31,[65]]],[[29,[27]]]],[[33,[31,[87]]],[[29,[27]]]],[[33,[31,[65]]],[[29,[27]]]],[[33,[31,[89]]],[[29,[27]]]],0,0,0,0,0,0,0,0,0,0,[[],84],[[],88],[[],83],[[84,84],84],[[88,88],88],[[83,83],83],[[84,84]],[[88,88]],[[83,83]],[[84,84],84],[[88,88],88],[[83,83],83],[[84,84]],[[88,88]],[[83,83]],[84,23],[84,23],[88,23],[88,23],[83,23],[83,23],[[84,84],84],[[88,88],88],[[83,83],83],[[84,84]],[[88,88]],[[83,83]],[[]],[[]],[[]],[[]],[[]],[[]],[84,84],[88,88],[83,83],[[]],[[]],[[]],[84,84],[88,88],[83,83],[[84,84],14],[[88,88],14],[[83,83],14],[[84,84],84],[[88,88],88],[[83,83],83],[[],84],[[],88],[[],83],[[84,84],14],[[88,88],14],[[83,83],14],[[],14],[[],14],[[],14],[[84,46]],[[88,46]],[[83,46]],[[84,15],39],[[84,15],39],[[84,15],39],[[84,15],39],[[84,15],39],[[88,15],39],[[88,15],39],[[88,15],39],[[88,15],39],[[88,15],39],[[83,15],39],[[83,15],39],[[83,15],39],[[83,15],39],[[83,15],39],[[]],[[]],[[]],[23,[[26,[84]]]],[23,[[26,[88]]]],[23,[[26,[83]]]],[23,84],[23,84],[23,88],[23,88],[23,83],[23,83],[23,84],[23,88],[23,83],[46,84],[46,88],[46,83],[47,[[26,[84]]]],[47,[[26,[88]]]],[47,[[26,[83]]]],[[84,48]],[[88,48]],[[83,48]],[[84,84]],[[88,88]],[[83,83]],[[84,84],84],[[88,88],88],[[83,83],83],[[84,84],14],[[88,88],14],[[83,83],14],[[]],[[]],[[]],[84],[88],[83],[84,14],[88,14],[83,14],[84,14],[88,14],[83,14],[84,[[50,[84]]]],[88,[[50,[88]]]],[83,[[50,[83]]]],[84,[[51,[84]]]],[88,[[51,[88]]]],[83,[[51,[83]]]],[84,84],[88,88],[83,83],[[84,84]],[[88,88]],[[83,83]],[[84,84,14]],[[88,88,14]],[[83,83,14]],[[84,84],84],[[88,88],88],[[83,83],83],[[84,84]],[[88,88]],[[83,83]],[[84,84],84],[[88,88],88],[[83,83],83],[[]],[[]],[[]],[[84,84]],[[88,88]],[[83,83]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],19],[[84,84],84],[[88,88],88],[[83,83],83],0,0,[[[26,[37]],37,[26,[37]],90,[26,[37]]],29],[[37,91],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],92],[[],91],[[],93],[[],94],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[92,23],[92,23],[91,23],[91,23],[93,23],[93,23],[94,23],[94,23],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[92,92],[91,91],[93,93],[94,94],[[]],[[]],[[]],[[]],[92,92],[91,91],[93,93],[94,94],[[92,92],14],[[91,91],14],[[93,93],14],[[94,94],14],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[],92],[[],91],[[],93],[[],94],[[92,92],14],[[91,91],14],[[93,93],14],[[94,94],14],[[],14],[[],14],[[],14],[[],14],[[92,46]],[[91,46]],[[93,46]],[[94,46]],[[92,15],39],[[92,15],39],[[92,15],39],[[92,15],39],[[92,15],39],[[91,15],39],[[91,15],39],[[91,15],39],[[91,15],39],[[91,15],39],[[93,15],39],[[93,15],39],[[93,15],39],[[93,15],39],[[93,15],39],[[94,15],39],[[94,15],39],[[94,15],39],[[94,15],39],[[94,15],39],[[]],[[]],[[]],[[]],[[]],[23,[[26,[92]]]],[23,[[26,[91]]]],[23,[[26,[93]]]],[23,[[26,[94]]]],[23,92],[23,92],[23,91],[23,91],[23,93],[23,93],[23,94],[23,94],[23,92],[23,91],[23,93],[23,94],[46,92],[46,91],[46,93],[46,94],[47,[[26,[92]]]],[47,[[26,[91]]]],[47,[[26,[93]]]],[47,[[26,[94]]]],[[92,48]],[[91,48]],[[93,48]],[[94,48]],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[92,92],14],[[91,91],14],[[93,93],14],[[94,94],14],[[]],[[]],[[]],[[]],[[]],[92],[91],[93],[94],[92,14],[91,14],[93,14],[94,14],[92,14],[91,14],[93,14],[94,14],[92,[[50,[92]]]],[91,[[50,[91]]]],[93,[[50,[93]]]],[94,[[50,[94]]]],[92,[[51,[92]]]],[91,[[51,[91]]]],[93,[[51,[93]]]],[94,[[51,[94]]]],[92,92],[91,91],[93,93],[94,94],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[[92,92,14]],[[91,91,14]],[[93,93,14]],[[94,94,14]],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],[[]],[[]],[[]],[[]],[[92,92]],[[91,91]],[[93,93]],[[94,94]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],19],[[],19],[[],19],[[92,92],92],[[91,91],91],[[93,93],93],[[94,94],94],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[82]]],22],[[[3,[82]]],23],[[[3,[82]]],95],[[[3,[82]]],28],[[[3,[82]]],24],[[[3,[82]]],27],[[[3,[82]]]],[[[3,[82]]],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67,[[5,[21]]]],[[],[[5,[21]]]],[71,[[5,[21]]]],[45,[[5,[21]]]],[[[26,[37]]],[[5,[21]]]],[56,[[5,[21]]]],[62,[[5,[21]]]],[68,[[5,[21]]]],[[],[[5,[21]]]],[32,[[5,[21]]]],[91,[[5,[21]]]],[57,[[5,[21]]]],[58,[[5,[21]]]],[90,[[5,[21]]]],[37,[[5,[21]]]],[[],[[5,[21]]]],[84,[[5,[21]]]],[[[31,[68]]],[[5,[21]]]],[83,[[5,[21]]]],[69,[[5,[21]]]],[44,[[5,[21]]]],[73,[[5,[21]]]],[63,[[5,[21]]]],[61,[[5,[21]]]],[33,[[5,[21]]]],[88,[[5,[21]]]],[[]],[[]],[[]],[96],[96,[[3,[82]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[82]],[98,[97]]],14],[[[3,[82]]],14],[[[3,[82]]],14],[53,1],0,0,0,0,[96,[[5,[21]]]],[[],96],[[[5,[21]]],96],[1,96],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,[[],60],[[],59],[[],60],[[],59],0,0,0,0,0,0,0,0,0,0,[[],33],[30,33],[33,33],[[],34],[30,34],[33,34],[[]],[[]],[[]],[[]],[34,33],[33,33],[[]],[30],0,0,[[30,15],[[17,[16]]]],[[33,15],[[17,[16]]]],[99,30],[100,30],[101,30],[102,30],[103,30],[104,30],[105,30],[106,30],[107,30],[108,30],[[]],[109,30],[[]],[34],[34,30],[[]],[[]],[[],34],[30,34],[30,14],[33,14],[[]],[30,[[17,[30,78]]]],[33,[[17,[30,78]]]],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],0,0,0,0,[110,[[31,[65]]]],[110,[[31,[65]]]],[110,37],[110,[[29,[[111,[37]]]]]],[110,[[29,[[111,[37]]]]]],[37,[[29,[[111,[37]]]]]],[37,112],[110,37],[37,37],[110,[[29,[47]]]],[110,[[29,[47]]]],[37,[[29,[47]]]],[110,37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[110,110],[113,113],[114,114],[[]],[[]],[[37,110]],[[]],[[110,110],115],[[37,37],115],[[],110],[[],37],[110,37],[113,47],[114,47],[110],[[110,110],14],[[113,113],14],[[37,37],14],[[114,114],14],[[],14],[[],14],[[],14],[[],14],[[110,15],[[17,[16]]]],[[113,15],[[17,[16]]]],[[113,15],[[17,[16]]]],[[37,15],[[17,[16]]]],[[114,15],[[17,[16]]]],[[114,15],[[17,[16]]]],[[[117,[37,116]]],110],[37,110],[[[119,[118,116]]],110],[[]],[[[111,[37]]],110],[[]],[[]],[[[31,[65]]],[[17,[37,120]]]],[[[31,[65]]],[[17,[37,114]]]],[[[31,[65]]],37],[112,37],[112,110],[[[119,[65,116]]],110],[[[119,[65,116]]],[[17,[110,121]]]],[[[119,[65,116]]],110],[[110,48]],[[37,48]],[[110,122],37],[[37,[123,[27]]],37],0,0,[[]],[[]],[[]],[110,[[117,[37,116]]]],[110,[[119,[65,116]]]],[110,[[119,[65,116]]]],[110,[[29,[[111,[37]]]]]],[110,[[29,[[111,[37]]]]]],[37,[[29,[[111,[37]]]]]],[[[117,[37,116]]],110],[110,112],[110,[[17,[81,124]]]],[113,[[119,[65,116]]]],[[110,125],29],[[110,125],29],[[37,125],29],[37,14],0,[[[126,[[119,[65,116]]]]],[[17,[110,113]]]],[113,27],[[110,110],[[26,[115]]]],[[37,37],[[26,[115]]]],[80],[80],[37,[[31,[65]]]],[37,[[31,[65]]]],[[]],[[]],[37,110],[[]],[37,[[17,[47,127]]]],[[],81],[[],81],[110,[[111,[47]]]],[110,[[111,[47]]]],[37,[[111,[47]]]],[37,[[111,[47]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[49,57],29],[[40,49,57,56],29],[59,128],[60,129],0,[[],54],[[],54],[[],24],[[],24],[[]],[[]],[[]],[[]],0,0,[[49,58],29],[[40,49,58,56],29],[[49,[26,[59]],[26,[60]]],29],[[40,49,[26,[59]],[26,[60]],56],29],[59,59],[60,60],[[]],[[]],0,0,[[40,[26,[24]],40,[26,[24]],27],[[29,[27]]]],[[],54],[[],54],[34],0,[[],33],0,0,[[],24],0,[[59,59],14],[[60,60],14],[[],14],[[],14],[[40,24],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[40,24,24,61],29],[[40,62,24,24],29],[[40,58],29],[[40,[26,[59]],[26,[60]]],29],0,[[40,63],29],0,[40,[[29,[63]]]],0,[40,[[29,[32]]]],[[40,64],29],0,[[40,32],29],0,0,0,[40,29],[[40,49,[31,[65]]],[[29,[27]]]],0,0,0,[[40,[31,[66]]],[[29,[27]]]],[[40,64],29],[[59,15],39],[[60,15],39],[[40,49],29],[[]],[[]],[128,59],[129,60],[[40,49,[31,[65]],67],29],[40,[[29,[41]]]],[40,[[29,[42]]]],[40,[[29,[43]]]],[40,29],[[40,24],29],[[40,55],29],[[49,49,[31,[65]]],[[29,[27]]]],[[],53],[[59,48]],[[60,48]],0,0,[[],24],[[],24],0,0,[[]],[[]],0,[40,[[29,[53]]]],[40,[[29,[53]]]],[[40,40],29],[[],14],[[],14],[[],14],[40,29],[59,14],[60,14],[[],14],0,0,[[49,49,[31,[65]]],[[29,[27]]]],[[49,49],29],[[40,49,40,49,56],29],[[49,[31,[66]]],[[29,[27]]]],[[49,[31,[66]]],[[29,[27]]]],[[49,49],29],[[49,49,[31,[65]],67],29],[49,[[29,[41]]]],[52,53],0,[[53,53],52],0,[[49,69],[[29,[30]]]],[52,53],[[49,58],29],[[40,49,58],29],[[40,49,38,58,52],29],[53],[[],53],0,[[],54],[[],54],0,0,0,[[],24],0,[[49,32,58],[[29,[30]]]],[[40,49,32,58],[[29,[30]]]],0,[[40,49,32,58,70],[[29,[30]]]],0,0,[[],24],[[[31,[65]],24],[[17,[27,78]]]],[[[31,[65]],24],[[17,[78]]]],[[[31,[87]],24],[[17,[27,78]]]],[[49,[126,[[119,[65]]]]],[[29,[110]]]],[[40,49,[126,[[119,[65]]]]],[[29,[110]]]],[[49,49],29],[[49,49],29],[[40,49,40,49],29],[[40,49,40,49,71],29],[49,29],[[40,72],[[29,[24]]]],0,0,[[40,40,[26,[24]],27],[[29,[27]]]],[[49,49,[31,[65]],67],29],[[],24],[49,[[29,[41]]]],[[40,49,56],[[29,[41]]]],[49,[[29,[42]]]],[49,[[29,[43]]]],0,[[40,49,56,73],[[29,[130]]]],[[49,49],29],[[49,40,49],29],0,[[]],[40,29],[40,[[29,[24]]]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],53],[49,29],[[40,49,56],29],[[40,49,55,56],29],[[[31,[65]],24],[[17,[78]]]],[[[31,[65]],24],[[17,[27,78]]]],[[[31,[89]],24],[[17,[27,78]]]],0,[[37,[119,[65]]],[[29,[110]]]],[[49,57],29],[[49,58],29],[[49,[26,[59]],[26,[60]]],29],[[49,49],29],[49,[[29,[41]]]],[[49,58],29],[[49,32,58],[[29,[30]]]],[[49,[126,[[119,[65]]]]],[[29,[110]]]],[[49,49],29],[49,29],[49,[[29,[41]]]],[49,[[29,[42]]]],[49,[[29,[43]]]],[[49,49],29],[49,29],0,0,0,0,[[33,37,[119,[65]]],[[29,[110]]]],[[40,49,57,56],29],[[40,49,58,56],29],[[40,49,[26,[59]],[26,[60]],56],29],[[40,49,40,49,56],29],[[40,49,58],29],[[40,49,38,58,52],29],[[40,49,32,58],[[29,[30]]]],[[40,49,[126,[[119,[65]]]]],[[29,[110]]]],[[40,49,40,49],29],[[40,49,40,49,71],29],[[40,49,56],[[29,[41]]]],[[49,40,49],29],[[40,49,56],29],[[40,49,55,56],29],0,0,0,0,0,0,0,0,0,[[40,[26,[24]],40,[26,[24]],27],[[29,[27]]]],0,[[],33],0,0,0,[[40,24,24,61],29],0,[[40,63],29],0,[40,[[29,[63]]]],0,[40,[[29,[32]]]],[[40,64],29],0,[[40,32],29],0,0,0,0,0,0,0,0,0,0,[33,29],[[]],[[]],[55,55],[[]],[[40,62,24,24],29],[[40,58],29],[[40,[26,[59]],[26,[60]]],29],[40,29],[[40,64],29],[[55,15],39],[[]],[40,[[29,[41]]]],[40,[[29,[42]]]],[40,[[29,[43]]]],[40,29],[[40,24],29],[[40,55],29],[[]],[40,29],0,0,[[40,72],[[29,[24]]]],[40,29],[40,[[29,[24]]]],[[]],[[],17],[[],17],[[],19],0,0,0,0,0,[[33,49,45],[[29,[34]]]],[44,[[29,[30]]]],[[33,34],29],0,[131,18],[[]],[[]],[[40,24],29],[[]],[[]],[40,[[29,[53]]]],[40,[[29,[53]]]],[[40,40],29],[[86,18],29],[[],17],[[],17],[[],19],[52,53],[[53,53],52],[52,53],0,[[49,69],[[29,[30]]]],[[40,49,32,58,70],[[29,[30]]]],0,0,[[]],[[]],[[]],[[]],0,0,[132,37],0,[132,38],0,[[132,15],39],[[]],[[]],0,[132,24],0,[[]],[[]],[[[133,[40]]],14],[[40,[31,[[68,[65]]]]],[[133,[40]]]],[[[133,[40]]],[[26,[[29,[132]]]]]],[132,24],0,0,[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],0,0,0,0,0,0,[[]],[[]],[72,72],[[]],[[72,72],14],[[],14],[[72,15],39],[[]],[[]],[[]],[[],17],[[],17],[[],19],[[40,40,[26,[24]],27],[[29,[27]]]],0,0,0,0,[[40,49,56,73],[[29,[130]]]],0,[[33,37,56,73],[[29,[130]]]],[[],[[29,[130]]]],[[],[[29,[130]]]],[[33,37,56,73],[[29,[130]]]],[[]],0,0,0,[[],67],[[67,67],67],[[67,67]],[[67,67],67],[[67,67]],[67,23],[67,23],[[67,67],67],[[67,67]],[[]],[[]],[67,67],[[]],[67,67],[[67,67],14],[[67,67],67],[[],67],[[67,67],14],[[],14],[[67,46]],[[40,49,[31,[65]]],[[29,[27]]]],[[40,[31,[66]]],[[29,[27]]]],[[67,15],39],[[67,15],39],[[67,15],39],[[67,15],39],[[67,15],39],[[40,49],29],[[]],[23,[[26,[67]]]],[23,67],[23,67],[23,67],[46,67],[47,[[26,[67]]]],[[40,49,[31,[65]],67],29],[[49,49,[31,[65]]],[[29,[27]]]],[[67,48]],[[67,67]],[[67,67],67],[[67,67],14],[[]],[67],[67,14],[67,14],[67,[[50,[67]]]],[67,[[51,[67]]]],[[49,49,[31,[65]]],[[29,[27]]]],[[49,[31,[66]]],[[29,[27]]]],[[49,[31,[66]]],[[29,[27]]]],[[49,49],29],[[49,49,[31,[65]],67],29],[67,67],[[67,67]],[[49,49],29],[[67,67,14]],[[49,49,[31,[65]],67],29],[[67,67],67],[[67,67]],[[67,67],67],[[]],[[67,67]],[[],17],[[],17],[[],19],[[67,67],67],0,0,0,0,0,0,0,[[87,27]],[[89,27]],[[[31,[87]],27]],[[[31,[89]],27]],[[]],[[]],[[]],[[]],[89,89],[[]],0,[28],[87,[[31,[65]]]],[89,[[31,[65]]]],[87,[[31,[65]]]],0,[40,[[29,[30]]]],[[40,30],29],[[40,30,83],29],0,0,[[40,28],[[29,[30]]]],[40,[[29,[84]]]],[[40,84],29],[[87,15],[[17,[16]]]],[[89,15],[[17,[16]]]],[[]],[[]],[[]],[[]],0,[[40,14],29],[40,[[29,[24]]]],[[[31,[65]]],87],[[[31,[65]]],89],[[40,[31,[65]],24],[[29,[27]]]],[[40,[31,[87]],24],[[29,[27]]]],[[40,[31,[87]],24,88],[[29,[27]]]],[[40,[31,[65]],24],[[29,[27]]]],[[40,[31,[89]],24],[[29,[27]]]],[[40,[31,[89]],24,88],[[29,[27]]]],[[40,[31,[65]]],[[29,[27]]]],0,[[40,[31,[87]]],[[29,[27]]]],[134,29],[[]],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[40,[31,[65]]],[[29,[27]]]],[[40,[31,[89]]],[[29,[27]]]],[28],0,[40,[[29,[30]]]],[[40,30],29],[[40,30,83],29],0,0,[134,29],0,[[40,28],[[29,[30]]]],[40,[[29,[84]]]],[[40,84],29],[[40,14],29],[40,[[29,[24]]]],0,0,0,[[40,[31,[65]],24],[[29,[27]]]],[[40,[31,[87]],24],[[29,[27]]]],[[40,[31,[87]],24,88],[[29,[27]]]],[[40,[31,[65]],24],[[29,[27]]]],[[40,[31,[89]],24],[[29,[27]]]],[[40,[31,[89]],24,88],[[29,[27]]]],[[40,[31,[65]]],[[29,[27]]]],[[40,[31,[87]]],[[29,[27]]]],[[40,[31,[65]]],[[29,[27]]]],[[40,[31,[89]]],[[29,[27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,85,18],[[29,[86]]]],[[33,85,18],[[29,[86]]]],0,0,0,[[],18],[[]],[[]],[[]],[[]],[135,135],[136,136],[[]],[[]],[[135,135],115],[[136,136],115],[[135,135],14],[[136,136],14],[[],14],[[],14],[[135,15],39],[[136,15],39],[[]],[[]],[[136,65,65,27],135],[[135,48]],[[136,48]],0,[[]],[[]],[[40,137],29],0,[[65,65],135],[85,135],0,[[86,18],29],[[135,135],[[26,[115]]]],[[136,136],[[26,[115]]]],0,[135,85],0,[[65,65],135],[[65,65],135],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[65,65],135],0,0,0,0,0,0,0,0,0,0,[[136,85,85,85],85],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[139,[138]]],18],[[[140,[138]]],18],[[[141,[138]]],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[139,[138]],15],39],[[[140,[138]],15],39],[[[141,[138,142]],15],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[139,[138]]]],[[],[[140,[138]]]],[[],[[141,[138]]]],0,[[86,18],29],[[86,18],29],[[86,18],29],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],33],[[],34],0,0,[34],[[],34],0,0,[[49,49,49,92,49],29],[[49,49],29],[[49,93],29],[[49,49],29],[[49,49],29],[[49,92,49],29],[[49,91],29],0,0,0,[[],[[29,[[111,[37]]]]]],[[],[[29,[47]]]],[[],[[29,[[111,[37]]]]]],[[20,125],29],[[],[[111,[47]]]],0,[[],[[29,[[111,[37]]]]]],[[],[[29,[47]]]],[[],[[29,[[111,[37]]]]]],[[20,125],29],[[],[[111,[47]]]],[[[31,[65]],125],29],[[[31,[65]],125],29],0,0,0,0,0,0,0,[[[26,[59]],[26,[60]]]],[[]],[[]],[18,[[26,[143]]]],[[],[[146,[[0,[144,145]]]]]],0,[26],[26],0,0,0,0,0,[[]],[[]],[47,18],[[]],[147,26],[147,26],[[]],0,0,[47,147],0,[[],17],[[],17],[[],19],0,0,0,0,0],"c":[2412,2631],"p":[[3,"SyscallNumber"],[3,"R0"],[3,"RetReg"],[3,"A0"],[3,"ArgReg"],[15,"never"],[3,"A1"],[3,"A2"],[3,"A3"],[3,"A4"],[3,"A5"],[3,"timespec"],[3,"iovec"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[4,"c_void"],[3,"TypeId"],[8,"Sized"],[8,"ArgNumber"],[6,"c_int"],[6,"c_uint"],[15,"u64"],[6,"__kernel_loff_t"],[4,"Option"],[15,"usize"],[6,"RawFd"],[6,"Result"],[3,"OwnedFd"],[15,"slice"],[3,"OFlags"],[3,"BorrowedFd"],[15,"i32"],[3,"Dir"],[3,"DirEntry"],[3,"CStr"],[4,"FileType"],[6,"Result"],[8,"AsFd"],[6,"Stat"],[6,"StatFs"],[3,"StatVfs"],[3,"CreateFlags"],[3,"WatchFlags"],[8,"IntoIterator"],[15,"str"],[8,"Hasher"],[8,"Arg"],[3,"Iter"],[3,"IterNames"],[6,"Dev"],[15,"u32"],[15,"i64"],[3,"Timestamps"],[3,"AtFlags"],[3,"Access"],[3,"Mode"],[3,"Uid"],[3,"Gid"],[4,"Advice"],[3,"FallocateFlags"],[3,"SealFlags"],[4,"FlockOperation"],[15,"u8"],[6,"c_char"],[3,"XattrFlags"],[19,"MaybeUninit"],[3,"MemfdFlags"],[3,"ResolveFlags"],[3,"RenameFlags"],[4,"SeekFrom"],[3,"StatxFlags"],[3,"statx"],[3,"StatVfsMountFlags"],[6,"RawMode"],[3,"Errno"],[3,"Error"],[4,"ErrorKind"],[3,"Demand"],[3,"String"],[8,"RetNumber"],[3,"DupFlags"],[3,"FdFlags"],[6,"RawOpcode"],[6,"IoctlOutput"],[3,"IoSliceMut"],[3,"ReadWriteFlags"],[3,"IoSlice"],[3,"MountFlagsArg"],[3,"UnmountFlags"],[3,"MountFlags"],[3,"MountPropagationFlags"],[3,"InternalMountFlags"],[15,"u16"],[3,"Opaque"],[15,"isize"],[3,"Range"],[3,"UnixStream"],[3,"ChildStderr"],[3,"TcpStream"],[3,"File"],[3,"TcpListener"],[3,"UnixListener"],[3,"ChildStdin"],[3,"PidFd"],[3,"ChildStdout"],[3,"UdpSocket"],[3,"UnixDatagram"],[3,"CString"],[4,"Cow"],[15,"i8"],[3,"NulError"],[3,"FromBytesWithNulError"],[4,"Ordering"],[3,"Global"],[3,"Box"],[3,"NonZeroU8"],[3,"Vec"],[3,"FromBytesUntilNulError"],[3,"FromVecWithNulError"],[3,"RangeFull"],[3,"RangeFrom"],[3,"IntoStringError"],[8,"FnOnce"],[8,"Into"],[3,"Utf8Error"],[6,"uid_t"],[6,"gid_t"],[6,"Statx"],[3,"Ficlone"],[3,"RawDirEntry"],[3,"RawDir"],[8,"FnMut"],[3,"Opcode"],[4,"Direction"],[8,"Ioctl"],[8,"CompileTimeOpcode"],[3,"NoArg"],[3,"Getter"],[3,"Setter"],[8,"Debug"],[3,"NonNull"],[8,"Default"],[8,"Copy"],[15,"array"],[3,"Weak"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"FromAsm"],[8,"ToAsm"],[8,"MetadataExt"],[8,"OpenOptionsExt"],[8,"DirEntryExt"],[8,"FileTypeExt"],[8,"FileExt"],[3,"BadOpcode"],[3,"ReadOpcode"],[3,"WriteOpcode"],[3,"ReadWriteOpcode"],[3,"NoneOpcode"]],"a":{"2big":[1450],"acces":[1324],"at_fdcwd":[2277,2630],"blkpbszget":[2495,2699],"blksszget":[2496,2700],"creat":[526],"errno":[1354,2845],"ext4_ioc_resize_fs":[2421,2696],"f_add_seals":[2450,2637],"f_dupfd_cloexec":[2872,2914],"f_get_seals":[2452,2639],"f_getfd":[2873,2915],"f_getfl":[2454,2641],"f_setfd":[2874,2916],"f_setfl":[2457,2644],"f_setlk":[2455,2642],"f_setlkw":[2455,2642],"faccessat":[2383,2606],"fchmodat":[2398,2607],"fchownat":[2400,2608],"ficlone":[2497,2701],"fionbio":[2882,2917],"fionread":[2883,2918],"fstatat":[2558,2616],"ifo":[545,2295,2296],"inode_number":[2728],"inotify_init1":[361,2690],"inotify_rm_watch":[362,2691],"lseek":[2551,2568,2677,2679],"mandlock":[1701],"mount":[3129,3130,3131,3132,3133],"ms_bind":[3129],"ms_move":[3131],"ms_rec":[3132],"ms_remount":[3133],"noattr":[1397],"off":[2735],"posix_fadvise":[2445,2635],"posix_fallocate":[2446,2660],"renameat2":[2549,2615],"umount":[3134],"umount2":[3134]}},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDNNNDNDNNEDNNDDENNNNNNNNNDNNNNNNNNNNNNDDNNNEDDDNNDNNNNDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNEEDDNNNEEDNNNCDFNDNDNNNNNNNNDFNNNNDNEFNDFDFDFDFDFDFDFNNDNNENNEEDDNNNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNNNNGNENNNNNNENNNNONDENNNNNDENNNNDDDDDDDDDEDDDDDDDENNNNNNDNNNNDEDENNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMMMMMMMMMMMMMALLMMMMMMMMMMOMMMMOALLLMMMMMMMMMMMAOAOAMMMMMAMMMAMMMMMMMMMLLMMMMMLAAMMMMMAMMMMLLLMMLLLLLLLMAAMMMMAMMMMMMLAMMMMMMMMMMMMMMMMMLMMMAMMMMMMMAMAMMMMAMMAMMAMMMMMMMMMLLAMMMMMMMMMMMMMMOAFLFLAOAOOFLAMMMMMMMMMMAMAMMMMMMMMAMAMMMLALLLMMAMMMALLLAMMLLAMMMMMMLMMMLMMMMMMAMMMMEDINNEDDNNNQLLLLLLLLLLMLLLLLLLLLLMMLLLLLLLLKLLLLLMKLLLLLLLLLLLALLMMMALLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLMDDLLLLLLLLLLFFFFFFLLLLLLLLDLLLMLLLLLLLLLDNENNNNDLLLLLLLLLLLLFFLLMLLLLLLLLLLLLLLLMLLFLLMLLFFMLLFLLLLLLLLLLLLDEDDNNNDMMLLLLLLLLLLMLLLLLLLLLLMMMLLLLLLLMMLLLLLLLLLLLLMMMLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMEDDDDNNNMLLLLLLLLLLMLLLLLLLLLLMMMMLLLLLMMLLLLLLAAMLMLLLLLLLLLLLLLLLLLLLLLMMMFFFDILLLLLLLLLLDDDDGDLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMMMLFFLLLLLMMLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNSEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNNNNDNNNNNNNENNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLAMAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNENNNFFLLFLLLFFLOLAFLFLFFLFLLLFLLLLDLLLLLLLLLLLLLLLLDLLMMLLLLLLLLLLFIKSAKDDILLLLLLLLLLLLLLLLLLLAADNDDDEDDNNNDDDNNDDNDEDNNDDEDDNDELMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMLMMLMLLLLLLLMMLLLLLLLLLLLLAMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMFFDMOMAFFDMLLLLLLLLLLMLLLALALLLLLLLLLNNNNNNNEDDDDDDDDDDNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLAAMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLMFFFFFFFFFFFFFFFDIELLLLMMLLLLLFFLFMLLLLLLNNDENMLLLLLLLLMLLLLLLLFAMALLLLLLMLLLLLLOOOOOOOODLLLLMLFFLFMLLLLNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLAALLLLLLLLLLLLFNDDNDQIDGIIGNDEFLLLLLLLLLLMFLLLLLMLMMLLALLLLLLLLLLFFLLLLLLMMMFKLLLKLFLLLLLMMMLFLLLLFLLLLLLLLLLLLMIIKKNDDNDNNDNENNNDDEDDNMMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLLMMLLLLLLLLLLLLMMMLMMMMMMMLLLLLLLLLLLLLLMMMMMLLLLLLLLLAMALMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMFFFDLLLLLLLLLNDDDDIIEDDDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLFLFFLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNDELLLLLLLLLLLLLLLMLLLMLLAMAMLLLLLLLLLLLLLLLLAIIAKIDLLLLLLLLLMLLLLMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLMLLLDNNDDNNNNNNNNNNENNNENDDDDDDDDDDDDDDNMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLAMAMMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMMMLLLLFFFF","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","Ident","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","Lit","LitBool","LitBool","LitByte","LitByte","LitByteStr","LitByteStr","LitChar","LitChar","LitFloat","LitFloat","LitInt","LitInt","LitStr","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","StrStyle","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","_marker","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","attr","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","bigint","borrow","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone_into","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_token","const_token","custom_keyword","custom_keyword","custom_punctuation","custom_punctuation","data","data","default","default","delimiter","delimiter","derive","discriminant","dot_token","dots","drops","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","equivalent","error","expr","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","func","gen","generics","generics","generics","generics","generics","group","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inner","inputs","inputs","into","leading_colon","left","len","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lit","lit","lookahead","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","macros","member","messages","meta","meta","modifier","mutability","mutability","mutability","name","name","name","named","new","new_raw","op","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse2","parse_any","parse_macro_input","parse_macro_input","parse_quote","parse_quote","parse_quote_spanned","parse_str","partial_cmp","path","path","path","path","path","path","path","path","position","pound_token","predicates","print","pub_token","punctuated","qself","qself","repr","repr","repr","repr","repr","repr","restriction","right","sealed","segments","semi_token","semi_token","set_span","span","span","span","span","span","span","spanned","star_token","struct_token","style","thread","to_owned","to_string","to_tokens","token","tokens","tokens","try_from","try_into","ty","ty","ty","ty","ty","ty","ty","type_id","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","variadic","variants","verbatim","vis","vis","where_clause","where_token","AttrStyle","Attribute","FilterAttrs","Inner","List","Meta","MetaList","MetaNameValue","NameValue","Outer","Path","Ret","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_token","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","delimiter","eq_token","from","from","from","from","from","from","from","from","inner","into","into","into","into","into","meta","outer","parse","parse","parse","parse_args","parse_args","parse_args_with","parse_args_with","parse_inner","parse_nested_meta","parse_nested_meta","parse_outer","parsing","path","path","path","path","pound_token","printing","require_list","require_name_value","require_path_only","span","span","span","span","style","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","DisplayAttrStyle","DisplayPath","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","parse_inner","parse_meta_after_path","parse_meta_list_after_path","parse_meta_name_value_after_path","single_parse_inner","single_parse_outer","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","BigInt","add_assign","borrow","borrow_mut","digits","from","into","mul_assign","new","reserve_two_digits","to_string","try_from","try_into","type_id","Cursor","End","Entry","Group","Ident","Literal","Punct","TokenBuffer","any_group","any_group_token","begin","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bump_ignore_group","clone","clone_into","close_span_of_group","cmp_assuming_same_buffer","create","empty","entries","entry","eof","eq","equivalent","from","from","from","group","ident","ignore_none","into","into","into","lifetime","literal","marker","new","new2","open_span_of_group","partial_cmp","prev_span","ptr","punct","recursive_new","same_buffer","same_scope","scope","skip","span","start_of_buffer","to_owned","token_stream","token_tree","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Field","Fields","FieldsNamed","FieldsUnnamed","Named","Unit","Unnamed","Variant","attrs","attrs","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brace_token","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","colon_token","discriminant","fields","from","from","from","from","from","from","from","ident","ident","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","mutability","named","paren_token","parse","parse","parse","parse_named","parse_unnamed","parsing","printing","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","unnamed","vis","Data","DataEnum","DataStruct","DataUnion","DeriveInput","Enum","Struct","Union","attrs","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brace_token","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","data","enum_token","fields","fields","from","from","from","from","from","generics","ident","into","into","into","into","into","parse","parsing","printing","semi_token","span","struct_token","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union_token","variants","vis","data_enum","data_struct","data_union","NoDrop","TrivialDrop","borrow","borrow_mut","deref","deref_mut","from","into","new","try_from","try_into","type_id","Error","ErrorMessage","IntoIter","Iter","Result","SpanRange","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","combine","end","extend","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","into_iter","into_iter","message","messages","messages","messages","new","new2","new_at","new_spanned","next","next","provide","span","span","start","to_compile_error","to_compile_error","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Array","Assign","Async","Await","Binary","Block","Break","Call","Cast","Closure","Const","Continue","DUMMY","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","ForLoop","Group","If","Index","Index","Infer","Let","Lit","Loop","Macro","Match","Member","MethodCall","Named","Paren","Path","Range","Reference","Repeat","Return","Struct","Try","TryBlock","Tuple","Unary","Unnamed","Unsafe","Verbatim","While","Yield","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","_noconstruct","args","as_token","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_token","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dot_token","eq","eq","equivalent","equivalent","expr","expr","expr","expr","expr","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","group_token","hash","hash","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","left","lit","mac","member","op","op","paren_token","paren_token","parse","parse","parse","parse","parse","parse","parsing","path","printing","qself","right","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","And","Any","Arithmetic","Assign","BitAnd","BitOr","BitXor","Cast","Compare","Or","Precedence","Range","Shift","Term","ambiguous_expr","atom_expr","borrow","borrow_mut","check_cast","clone","clone_into","eq","expr_group","expr_paren","from","impl_by_parsing_expr","into","kw","multi_index","of","parse_expr","partial_cmp","path_or_macro_or_struct","peek_precedence","to_owned","trailer_expr","try_from","try_into","type_id","unary_expr","borrow","borrow","borrow_mut","borrow_mut","builtin","clone","clone","clone_into","clone_into","default","default","display","display","from","from","into","into","parse","parse","peek","peek","raw","span","span","span","span","to_owned","to_owned","to_tokens","to_tokens","try_from","try_from","try_into","try_into","type_id","type_id","outer_attrs_to_tokens","IdentExt","parse_any","peek_any","private","unraw","IdentAny","PeekFn","Sealed","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","display","from","from","into","into","peek","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","clone","helper","BoundLifetimes","Const","ConstParam","ConstParams","ConstParamsMut","GenericParam","Generics","ImplGenerics","Lifetime","Lifetime","Lifetime","LifetimeParam","Lifetimes","LifetimesMut","Maybe","None","PredicateLifetime","PredicateType","Trait","TraitBound","TraitBoundModifier","Turbofish","Type","Type","TypeGenerics","TypeParam","TypeParamBound","TypeParams","TypeParamsMut","Verbatim","WhereClause","WherePredicate","as_turbofish","attrs","attrs","attrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","colon_token","colon_token","colon_token","colon_token","colon_token","const_params","const_params_mut","const_token","default","default","default","default","eq_token","eq_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generics_wrapper_impls","gt_token","gt_token","ident","ident","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lt_token","lt_token","make_where_clause","modifier","new","next","next","next","next","next","next","params","paren_token","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse_multiple","parsing","path","predicates","printing","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","split_for_impl","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","where_clause","where_token","parse_delimited","parse_group","Ident","_marker","ident_from_token","inner","parsing","xid_ok","accept_as_ident","Lifetime","apostrophe","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","hash","ident","into","new","parse","parsing","partial_cmp","printing","set_span","span","span","to_owned","to_string","to_tokens","try_from","try_into","type_id","Bool","Byte","ByteStr","Char","Cooked","Float","Int","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitFloatRepr","LitInt","LitIntRepr","LitRepr","LitStr","Raw","Str","StrStyle","Verbatim","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","digits","digits","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","lit_extra_traits","new","new","new","new","new","new","new","new","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse_with","parsing","printing","repr","repr","repr","repr","repr","repr","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","suffix","suffix","suffix","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","token","token","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","value","parse_negative_lit","backslash_u","backslash_x","byte","next_chr","parse_lit_byte","parse_lit_byte_str","parse_lit_byte_str_cooked","parse_lit_byte_str_raw","parse_lit_char","parse_lit_float","parse_lit_int","parse_lit_str","parse_lit_str_cooked","parse_lit_str_raw","Lookahead1","Peek","TokenMarker","borrow","borrow","borrow_mut","borrow_mut","comparisons","cursor","error","from","from","into","into","is_delimiter","new","peek","peek_impl","scope","try_from","try_from","try_into","try_into","type_id","type_id","Brace","Bracket","Macro","MacroDelimiter","Paren","bang_token","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","delimiter","from","from","into","into","parse","parse_body","parse_body_with","parse_delimiter","parsing","path","printing","span","span","surround","to_owned","to_owned","to_tokens","tokens","try_from","try_from","try_into","try_into","type_id","type_id","ast_enum","ast_enum_from_struct","ast_enum_of_structs","ast_enum_of_structs_impl","ast_struct","check_keyword_matches","generate_to_tokens","strip_attrs_pub","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_meta_path","parse_nested_meta","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Add","AddAssign","And","BinOp","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Deref","Div","DivAssign","Eq","Ge","Gt","Le","Lt","Mul","MulAssign","Ne","Neg","Not","Or","Rem","RemAssign","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","UnOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","parse","parse","parsing","printing","span","span","to_owned","to_owned","to_tokens","to_tokens","try_from","try_from","try_into","try_into","type_id","type_id","parse_binop","Chain","Error","Lookahead1","None","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","Some","StepCursor","Unexpected","advance_step_cursor","advance_to","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","cell","cell_clone","check_unexpected","clone","clone","clone_into","clone_into","comparisons","cursor","cursor","cursor","default","deref","discouraged","drop","error","error","fmt","fmt","fork","from","from","from","from","get_unexpected","inner_unexpected","into","into","into","into","is_empty","lookahead1","marker","marker","messages","new_parse_buffer","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_scoped","parse_str","parse_terminated","peek","peek2","peek3","scope","scope","scope","span","span_of_unexpected_ignoring_nones","step","to_owned","to_owned","to_string","tokens_to_parse_buffer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unexpected","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","AngleBracketed","AngleBracketedGenericArguments","AssocConst","AssocConst","AssocType","AssocType","Const","Constraint","Constraint","GenericArgument","Lifetime","None","Parenthesized","ParenthesizedGenericArguments","Path","PathArguments","PathSegment","QSelf","Type","args","arguments","as_token","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","colon2_token","colon_token","default","do_parse","eq_token","eq_token","from","from","from","from","from","from","from","from","from","from","from","from","generics","generics","generics","get_ident","gt_token","gt_token","ident","ident","ident","ident","inputs","into","into","into","into","into","into","into","into","into","into","is_empty","is_ident","is_mod_style","is_none","leading_colon","lt_token","lt_token","output","paren_token","parse","parse","parse","parse","parse","parse_helper","parse_helper","parse_mod_style","parse_rest","parsing","position","printing","require_ident","segments","span","span","span","span","span","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","const_argument","qpath","print_path","TokensOrDefault","borrow","borrow_mut","from","into","span","to_tokens","try_from","try_into","type_id","End","IntoIter","IntoPairs","Iter","IterMut","IterMutTrait","IterTrait","Pair","Pairs","PairsMut","PrivateIter","PrivateIterMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","do_extend","empty_or_trailing","empty_punctuated_iter","empty_punctuated_iter_mut","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","inner","inner","inner","inner","inner","inner","inner","inner","inner","insert","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","printing","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","FieldMutability","Inherited","None","Public","Restricted","VisRestricted","Visibility","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","from","from","from","in_token","into","into","into","paren_token","parse","parse_pub","parsing","path","printing","pub_token","span","span","to_owned","to_owned","to_owned","to_tokens","to_tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","lookahead","Sealed","Spanned","private","span","Sealed","ThreadBound","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","new","thread_id","to_owned","try_from","try_into","type_id","value","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","define_delimiters","define_keywords","define_punctuation","define_punctuation_structs","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","impl_deref_if_len_is_1","impl_low_level_token","impl_token","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","peek_impl","private","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Sealed","WithSpan","borrow","borrow_mut","from","into","span","try_from","try_into","type_id","Abi","Array","BareFn","BareFnArg","BareVariadic","Default","Group","ImplTrait","Infer","Macro","Never","Paren","Path","Ptr","Reference","ReturnType","Slice","TraitObject","Tuple","Type","Type","TypeArray","TypeBareFn","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Verbatim","abi","and_token","attrs","attrs","bang_token","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bracket_token","bracket_token","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comma","const_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","extern_token","fn_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","group_token","impl_token","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","len","lifetime","lifetimes","mac","mutability","mutability","name","name","name","output","paren_token","paren_token","paren_token","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse_bounds","parsing","path","printing","qself","semi_token","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","star_token","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underscore_token","unsafety","variadic","without_plus","without_plus","without_plus","without_plus","ambig_ty","parse_bare_fn_arg","parse_bare_variadic","between"],"q":[[0,"syn"],[587,"syn::attr"],[690,"syn::attr::parsing"],[716,"syn::bigint"],[730,"syn::buffer"],[797,"syn::data"],[895,"syn::derive"],[971,"syn::derive::parsing"],[974,"syn::drops"],[986,"syn::error"],[1065,"syn::expr"],[1684,"syn::expr::parsing"],[1724,"syn::expr::parsing::kw"],[1760,"syn::expr::printing"],[1761,"syn::ext"],[1766,"syn::ext::private"],[1788,"syn::gen"],[1790,"syn::generics"],[2141,"syn::group"],[2143,"syn::ident"],[2149,"syn::ident::parsing"],[2150,"syn::lifetime"],[2178,"syn::lit"],[2423,"syn::lit::parsing"],[2424,"syn::lit::value"],[2438,"syn::lookahead"],[2463,"syn::mac"],[2502,"syn::macros"],[2510,"syn::meta"],[2526,"syn::op"],[2587,"syn::op::parsing"],[2588,"syn::parse"],[2685,"syn::parse::discouraged"],[2689,"syn::path"],[2876,"syn::path::parsing"],[2878,"syn::path::printing"],[2879,"syn::print"],[2889,"syn::punctuated"],[3100,"syn::restriction"],[3149,"syn::sealed"],[3150,"syn::sealed::lookahead"],[3151,"syn::spanned"],[3154,"syn::spanned::private"],[3155,"syn::thread"],[3171,"syn::token"],[4865,"syn::token::private"],[4875,"syn::ty"],[5228,"syn::ty::parsing"],[5231,"syn::verbatim"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","","A word of Rust code, which may be a keyword or legal …","","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","","A byte literal: <code>b&#39;f&#39;</code>.","","A byte string literal: <code>b&quot;foo&quot;</code>.","","A character literal: <code>&#39;a&#39;</code>.","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","","An integer literal: <code>1</code> or <code>1u16</code>.","","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …","","","","","","","","","","","","","","","","Define a type that supports parsing and printing a given …","","Define a type that supports parsing and printing a …","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","","","","","","","","","","","","","","Facility for interpreting structured content inside of an …","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","","Parse the input TokenStream of a macro, triggering a …","","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","Returns the span of this <code>Ident</code>.","","","","A trait that can provide the <code>Span</code> of the complete contents …","","","","","","","","Tokens representing Rust punctuation, keywords, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","","","A structured list within an attribute, like …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A name-value pair within an attribute, like …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parses zero or more inner attributes from the stream.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","","Internal type which is used instead of <code>TokenTree</code> to …","","","","","A buffer that can be efficiently traversed multiple times, …","","","Creates a cursor referencing the first token in the buffer …","","","","","","","Bump the cursor to point at the next token after the …","","","","","This create method intelligently exits …","Creates a cursor referencing a static empty TokenStream.","","Get the current entry.","Checks whether the cursor is currently pointing at the end …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","While the cursor is looking at a <code>None</code>-delimited group, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","","Returns the <code>Span</code> of the token immediately prior to the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","","","","","Skip over the next token without cloning it. Returns <code>None</code> …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","","","","A field of a struct or enum variant.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","Named fields of a struct or struct variant such as …","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An enum variant.","","","","","","","","","","","","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","Content stored in the variant.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Name of the variant.","Name of the field, if any.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","Returns the number of fields.","","","","","","","Parses a named (braced struct) field.","Parses an unnamed (tuple struct) field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Data structure sent to a <code>proc_macro_derive</code> macro.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Error returned when a Syn parser cannot parse the input …","","","","The result of a Syn parser.","","","","","","","","","","","","","","","","","","Add another error message to self such that when …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","Usually the <code>ParseStream::error</code> method will be used …","","","Creates an error with the specified message spanning the …","","","","The source location of the error.","","","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A struct or tuple struct field accessed in a struct …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A named field like <code>self.x</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","Tokens in expression position not interpreted by Syn.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</codeeturns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","","","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","Returned by <code>Generics::split_for_impl</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","","","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","Returned by <code>TypeGenerics::as_turbofish</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","Returned by <code>Generics::split_for_impl</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","","","","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","","","","","","","","","","","","","","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","","","","","","","","","Split a type’s generics into the pieces required for impl…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","A word of Rust code, which may be a keyword or legal …","","","","","","","A Rust lifetime: <code>&#39;a</code>.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Panics","","","","","","","","","","","","","","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","An ordinary string like <code>&quot;data&quot;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A Rust literal such as a string or integer or boolean.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","","An integer literal: <code>1</code> or <code>1u16</code>.","","","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A raw token literal not interpreted by Syn.","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","Invoke parser on the content of this string literal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the byte at offset idx, or a default of <code>b&#39;\\\\0&#39;</code> if we’…","","","","","","","","","","","","Support for checking the next token in a stream to decide …","Types that can be parsed by looking at just one token.","","","","","","","","Triggers an error at the current position of the parse …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Looks at the next token in the parse stream to determine …","","","","","","","","","","","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","","","","","","","","","","","","","","","","","","","","","","","","","","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","The <code>*</code> operator for dereferencing","The <code>/</code> operator (division)","The <code>/=</code> operator","The <code>==</code> operator (equality)","The <code>&gt;=</code> operator (greater than or equal to)","The <code>&gt;</code> operator (greater than)","The <code>&lt;=</code> operator (less than or equal to)","The <code>&lt;</code> operator (less than)","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","The <code>%</code> operator (modulus)","The <code>%=</code> operator","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","","","","","Provides low-level access to the token representation …","","","","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","","","","","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","","","Returns the <code>Span</code> of the next token in the parse stream, or …","","Speculatively parses tokens from this parse stream, …","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","A const expression. Must be inside of a block.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A lifetime argument.","","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","The explicit Self type in a qualified path: the <code>T</code> in …","A type argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","If this path consists of a single ident, returns the ident.","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Determines whether this is a path of length 1 equal to the …","","","","","","<code>C</code>","","","","","","","","","Parse a <code>Path</code> containing no path arguments on any of its …","","","","","An error if this path is not a single ident, as defined in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","","","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","","","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","","","","","","","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","Unused, but reserved for RFC 3323 restrictions.","An inherited visibility, which usually means private.","","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","","Returns a <code>Span</code> covering the complete contents of this …","","ThreadBound is a Sync-maker and Send-maker that allows …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeupport writing <code>token.span</code> rather than <code>token.spans[0]</code> on …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The binary interface of a function: <code>extern &quot;C&quot;</code>.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","Return type is not specified.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","Return type of a function signature.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","The possible types that a Rust value could have.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","Tokens in type position not interpreted by Syn.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","","",""],"i":[0,122,122,122,177,0,79,299,79,0,178,0,178,79,0,0,79,299,0,0,0,79,122,122,122,122,122,122,79,4,0,164,164,79,4,4,79,79,4,79,79,131,178,0,0,178,79,318,0,0,0,0,317,167,0,122,122,63,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,4,79,122,0,0,0,79,299,122,0,0,0,79,0,299,0,79,79,299,199,37,4,122,79,0,0,131,136,140,178,0,38,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,122,0,79,299,0,79,138,0,0,0,0,79,122,122,38,55,91,122,167,299,138,177,201,167,122,37,79,164,299,177,0,0,38,79,299,0,0,0,0,299,199,0,79,318,79,299,122,122,79,199,0,79,0,122,122,122,122,299,4,0,63,79,122,122,0,136,0,0,299,79,79,79,299,0,0,131,140,178,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,63,55,55,91,79,0,79,136,4,299,0,0,0,0,79,79,2,104,111,105,112,101,102,99,107,118,94,95,114,108,98,119,106,113,109,93,100,103,115,117,116,110,96,97,301,310,3,81,179,176,82,184,0,54,58,62,80,81,82,83,84,85,86,87,88,89,90,132,133,134,315,316,163,306,83,0,2,2,142,132,133,141,142,182,303,312,56,65,0,36,85,300,311,0,0,2,2,2,179,58,132,133,134,141,142,182,316,134,309,0,0,0,0,0,62,133,134,39,163,0,54,83,316,0,312,300,302,307,309,310,311,313,65,2,2,40,133,134,180,181,2,0,0,82,84,85,88,90,0,314,54,64,66,2,2,2,301,135,2,2,2,2,2,2,2,81,0,0,62,180,181,182,0,84,302,130,135,179,184,2,0,3,54,58,62,133,134,176,180,181,182,303,200,85,92,2,183,301,2,41,80,300,0,132,141,310,135,137,142,301,0,86,0,130,135,179,184,0,87,305,0,83,69,0,36,137,58,309,310,314,315,316,56,2,2,0,80,90,183,301,130,57,81,88,137,183,200,301,307,313,0,0,0,2,0,2,0,0,0,0,0,0,2,0,39,40,89,137,163,200,308,184,36,139,0,200,0,89,308,11,7,6,8,10,9,0,80,0,41,64,300,2,0,2,2,2,92,5,0,309,64,36,0,2,2,2,0,39,163,2,2,0,58,82,134,180,184,315,2,304,66,57,2,301,40,5,181,301,65,0,58,62,130,139,0,0,0,37,38,0,0,0,38,37,38,319,36,37,38,39,40,36,37,38,39,40,36,36,37,38,39,40,36,37,38,39,40,39,40,36,37,38,38,38,38,39,40,319,36,37,38,39,40,36,319,38,39,40,36,39,36,39,36,36,39,36,0,36,38,39,40,36,0,38,38,38,36,38,39,40,36,36,37,38,39,40,36,38,39,40,39,36,37,38,39,40,36,37,38,39,40,36,37,38,39,40,40,0,0,45,47,45,47,45,47,45,47,45,47,0,0,0,0,0,0,45,47,45,47,45,47,45,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,0,52,0,52,52,52,52,0,50,50,51,52,51,50,52,51,50,50,50,50,0,0,50,50,51,50,50,50,50,52,51,50,50,50,50,52,51,50,50,50,50,51,51,0,50,50,50,50,51,0,0,50,50,50,0,50,50,50,52,51,50,52,51,50,52,51,50,0,0,0,0,55,55,55,0,54,58,54,55,56,57,58,54,55,56,57,58,56,54,55,56,57,58,54,55,56,57,58,58,54,54,54,55,55,55,56,57,58,54,58,54,55,56,57,58,55,55,55,55,55,55,55,58,56,57,54,56,57,58,58,0,0,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,54,55,56,57,58,58,54,55,56,57,58,57,58,0,0,0,0,0,63,63,63,62,62,63,64,65,66,62,63,64,65,66,65,62,63,64,65,66,62,63,64,65,66,62,65,64,66,62,63,64,65,66,62,62,62,63,64,65,66,62,0,0,64,62,64,62,63,64,65,66,62,62,63,64,65,66,62,63,64,65,66,62,63,64,65,66,66,65,62,0,0,0,0,0,67,67,67,67,67,67,67,67,67,67,0,0,0,0,0,0,69,70,71,76,77,69,70,71,76,77,69,70,71,69,70,71,69,71,69,69,69,70,69,69,70,71,76,77,69,70,71,76,77,69,69,69,76,77,70,69,76,77,69,0,0,69,76,77,69,69,70,71,69,70,69,70,71,69,69,70,71,76,77,69,70,71,76,77,69,70,71,76,77,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,79,79,79,0,79,79,79,79,79,79,79,0,79,91,79,79,79,79,79,79,79,79,79,79,79,91,79,79,79,79,104,111,105,112,101,102,99,107,118,94,95,114,108,98,119,106,113,109,93,100,103,115,117,116,110,96,97,81,82,80,81,82,83,84,85,86,87,88,89,90,83,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,85,79,80,81,82,83,84,85,86,87,88,89,90,91,92,79,80,81,82,83,84,85,86,87,88,89,90,91,92,83,91,92,91,92,82,84,85,88,90,91,92,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,91,91,91,92,92,81,84,91,92,85,92,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,80,86,87,83,80,90,81,88,79,86,87,89,91,92,0,89,0,89,80,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,91,92,92,92,79,80,81,82,83,84,85,86,87,88,89,90,91,92,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,82,79,104,111,105,112,80,101,102,81,82,99,107,118,83,94,84,95,85,114,108,86,98,87,119,106,88,89,113,109,93,100,103,115,117,116,90,110,96,97,91,92,120,120,120,120,120,120,120,120,120,120,0,120,120,120,0,0,120,120,0,120,120,120,0,0,120,0,120,0,0,120,0,120,0,0,120,0,120,120,120,0,123,124,123,124,0,123,124,123,124,123,124,123,124,123,124,123,124,123,124,123,124,0,123,124,123,124,123,124,123,124,123,124,123,124,123,124,0,0,320,320,0,320,0,0,0,126,321,126,321,126,126,321,126,321,126,321,321,126,126,321,126,321,126,321,0,0,0,131,0,0,0,0,0,0,131,136,140,0,0,0,138,138,0,0,136,0,0,0,131,140,0,0,0,0,0,136,0,0,127,132,133,134,145,146,147,148,143,144,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,147,148,143,144,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,142,132,133,141,142,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,132,133,134,141,142,130,130,134,130,135,133,134,133,134,135,145,146,147,148,143,144,129,127,128,130,131,131,131,131,132,133,133,134,135,136,136,136,137,138,139,140,140,140,141,142,0,130,135,133,134,145,146,147,148,143,144,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,147,148,143,144,132,141,130,135,137,142,130,130,135,130,137,132,145,146,147,148,143,144,130,137,130,131,132,133,134,135,136,137,138,139,140,136,0,137,139,0,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,130,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,147,148,143,144,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,145,146,147,148,143,144,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,134,145,146,147,148,143,144,129,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,130,130,130,139,0,0,0,2,0,2,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,3,3,3,3,3,3,3,3,3,4,4,4,4,318,4,4,0,0,0,0,0,0,0,0,0,0,0,318,4,0,4,10,9,10,9,153,154,155,4,11,7,6,8,10,9,5,318,153,154,155,4,11,7,6,8,10,9,5,318,153,154,155,4,11,7,6,8,10,9,5,153,154,155,4,11,7,6,8,10,9,5,154,155,10,9,153,154,155,4,4,4,4,4,4,4,4,11,7,6,8,10,10,9,9,5,318,153,154,155,4,11,7,6,8,10,9,5,318,0,4,11,7,6,8,10,9,5,4,11,11,7,6,8,10,9,5,11,0,0,11,7,6,8,10,9,4,11,7,6,8,10,9,5,4,4,11,11,7,7,6,6,8,8,10,10,9,9,5,5,5,4,11,7,6,8,10,9,153,154,155,153,154,155,4,11,7,6,8,10,9,5,10,9,4,11,7,6,8,10,9,5,11,7,6,8,10,9,5,153,154,155,153,154,155,4,11,7,6,8,10,9,5,318,153,154,155,4,11,7,6,8,10,9,5,318,153,154,155,4,11,7,6,8,10,9,5,318,0,11,7,6,8,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,1,161,1,161,161,161,161,1,161,1,0,0,161,0,161,161,1,161,1,161,1,164,164,0,0,164,163,163,164,163,164,163,164,163,164,163,163,164,163,164,163,163,163,0,0,163,0,163,164,164,163,164,163,163,163,164,163,164,163,164,0,0,0,0,0,0,0,0,0,166,166,166,166,166,166,0,0,166,0,166,166,166,166,166,122,122,122,0,122,122,122,122,122,122,167,122,122,122,122,122,122,122,122,122,122,167,167,122,122,122,122,122,122,122,122,122,0,122,167,122,167,122,167,122,167,122,167,122,167,122,167,0,0,122,167,122,167,122,167,122,167,122,167,122,167,0,172,0,0,172,0,42,0,0,0,0,0,0,172,0,0,0,151,151,168,172,174,151,168,172,174,151,151,0,151,168,172,168,172,161,151,161,168,172,168,0,151,151,168,151,151,151,151,168,172,174,0,0,151,168,172,174,151,151,151,168,69,0,29,151,42,174,42,151,0,42,151,151,151,151,161,151,168,151,0,151,168,172,151,0,151,168,172,174,151,168,172,174,151,168,172,174,151,0,0,322,323,177,0,0,178,0,178,178,0,178,0,178,177,177,0,0,0,0,0,178,179,176,184,41,176,177,178,179,180,181,182,183,184,41,176,177,178,179,180,181,182,183,184,182,41,176,177,178,179,180,181,182,183,184,41,176,177,178,179,180,181,182,183,184,179,182,177,179,180,181,41,41,176,176,177,178,179,180,181,182,183,184,180,181,182,41,179,184,176,180,181,182,183,41,176,177,178,179,180,181,182,183,184,177,41,41,177,41,179,184,183,183,41,176,178,179,183,41,176,41,41,0,184,0,41,41,41,176,177,178,179,180,181,182,183,184,41,176,177,178,179,180,181,182,183,184,41,176,177,178,179,180,181,182,183,41,176,177,178,179,180,181,182,183,184,41,176,177,178,179,180,181,182,183,184,180,184,41,176,177,178,179,180,181,182,183,184,181,0,0,0,0,187,187,187,187,187,187,187,187,187,192,0,0,0,0,0,0,0,0,0,0,0,0,192,150,188,196,189,190,59,191,60,197,192,150,188,196,189,190,59,191,60,197,192,150,150,188,189,190,59,191,192,193,150,150,188,189,190,59,191,192,192,150,0,150,0,0,150,150,150,150,150,188,196,189,190,59,191,60,197,192,150,150,150,150,150,188,196,189,190,59,191,60,197,150,150,188,196,189,190,59,191,60,197,192,150,150,150,188,196,189,190,59,191,60,197,150,192,192,150,150,150,150,150,188,196,189,191,197,150,150,188,196,189,190,59,191,60,197,150,192,188,196,189,190,59,191,60,197,188,196,189,190,59,191,60,197,150,150,150,150,150,150,150,150,0,192,192,150,150,150,188,196,189,190,59,60,150,192,150,188,189,190,59,191,192,150,192,150,150,188,196,189,190,59,191,60,197,192,150,188,196,189,190,59,191,60,197,192,150,188,196,189,190,59,191,60,197,192,192,192,0,199,201,199,199,0,0,199,200,201,199,200,201,199,200,201,199,200,201,199,200,201,200,199,200,201,200,199,199,0,200,0,200,199,200,199,200,201,199,200,199,200,201,199,200,201,199,200,201,0,0,0,0,324,0,0,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,0,0,0,0,25,253,256,257,259,260,261,121,265,269,272,273,276,277,280,149,283,284,286,291,293,295,25,253,256,257,259,260,261,121,265,269,272,273,276,277,280,149,283,284,286,291,293,295,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,0,0,0,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,0,0,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,205,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,296,297,298,25,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,205,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,205,25,206,207,208,209,210,211,212,213,214,215,22,216,217,218,219,220,23,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,20,24,239,240,21,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,121,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,185,280,281,149,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,0,0,325,325,325,325,325,325,325,325,0,299,299,0,0,317,299,299,299,299,299,299,299,299,299,0,299,299,299,0,317,0,0,0,0,0,0,0,0,0,0,0,0,0,0,299,301,310,315,316,306,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,303,312,300,311,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,316,309,316,312,300,302,307,309,310,311,313,314,301,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,302,303,301,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,300,310,301,305,309,310,314,315,316,301,301,307,313,299,300,301,302,303,303,304,305,306,307,307,308,309,310,311,312,312,313,314,315,317,317,312,0,308,0,308,300,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,309,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,315,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,304,301,301,299,303,312,317,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,0,0,0,0,0,0,0,0,0,0,0,[1,3],0,0,0,0,0,0,0,[1,4],0,0,[1,5],0,[1,6],0,[1,7],0,[1,8],0,[1,9],0,[1,10],0,[1,11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,2],[[]],[[2,2],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,2],13],[[2,[0,[[15,[14]],16]]],13],0,0,0,0,0,[[],13],0,0,0,0,0,0,0,0,0,0,0,0,[[2,17],[[19,[18]]]],[[2,17],[[19,[18]]]],[[2,17],[[19,[18]]]],0,0,[20,2],[21,2],[22,2],[23,2],[[]],[24,2],[25,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,26]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,27],2],[[14,27],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[28,[[30,[29]]]],[31,[[30,[2]]]],[32,[[30,[29]]]],[31,[[30,[2]]]],0,0,0,0,0,[14,[[30,[29]]]],[[2,2],[[33,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,27]],0,[2,[[33,[27]]]],[2,27],[[],27],0,0,0,0,0,0,0,[[]],[[],34],[[2,32]],0,0,0,[[],19],[[],19],0,0,0,0,0,0,0,[[],35],0,0,0,[2,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[36,36],[37,37],[38,38],[39,39],[40,40],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[41,38],[39,38],[40,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[31,[[30,[38]]]],[31,[[30,[39]]]],[31,[[30,[40]]]],[36,[[30,[29]]]],[39,[[30,[29]]]],[[36,42],30],[[39,42],30],[31,[[30,[[43,[36]]]]]],[[36,44],30],[[39,44],30],[31,[[30,[[43,[36]]]]]],0,[36,41],[38,41],0,0,0,0,[38,[[30,[39]]]],[38,[[30,[40]]]],[38,[[30,[41]]]],[[],27],[[],27],[[],27],[[],27],0,[[]],[[]],[[]],[[]],[[]],[[36,32]],[[38,32]],[[39,32]],[[40,32]],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,[[]],[[]],[[]],[[]],[[45,17],46],[[47,17],46],[[]],[[]],[[]],[[]],[[31,[43,[36]]],30],[[41,31],[[30,[38]]]],[[41,31],[[30,[39]]]],[[41,31],[[30,[40]]]],[31,[[30,[36]]]],[31,[[30,[36]]]],[[],34],[[],34],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],0,[[48,49]],[[]],[[]],0,[[]],[[]],[[48,49]],[[],48],[48],[48,34],[[],19],[[],19],[[],35],0,0,0,0,0,0,0,0,[50,33],[50,33],[51,50],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[50,50],[[]],[50,27],[[50,50],12],[[52,52],50],[[],50],0,[50,52],[50,13],[[50,50],13],[[],13],[[]],[[]],[[]],[[50,53],33],[50,33],[50],[[]],[[]],[[]],[50,33],[50,33],0,[28,51],[32,51],[50,27],[[50,50],[[33,[12]]]],[50,27],0,[50,33],[[[43,[52]],32]],[[50,50],13],[[50,50],13],0,[50,[[33,[50]]]],[50,27],[50,52],[[]],[50,32],[50,33],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[54,54],[55,55],[56,56],[57,57],[58,58],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[56,55],[[]],[57,55],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[55],[55],[55],[55,13],[55,[[59,[58]]]],[55,[[60,[58]]]],[55,61],0,0,0,[31,[[30,[54]]]],[31,[[30,[56]]]],[31,[[30,[57]]]],[31,[[30,[58]]]],[31,[[30,[58]]]],0,0,[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[54,32]],[[55,32]],[[56,32]],[[57,32]],[[58,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[62,62],[63,63],[64,64],[65,65],[66,66],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[31,[[30,[62]]]],0,0,0,[[],27],0,[[]],[[]],[[]],[[]],[[]],[[62,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,[31,30],[31,30],[31,30],0,0,[[]],[[]],[[[67,[16]]]],[[[67,[16]]]],[[]],[[]],[68,[[67,[68]]]],[[],19],[[],19],[[],35],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,69],[70,70],[71,71],[[]],[[]],[[]],[[69,69]],0,[[69,72]],[[69,17],46],[[69,17],46],[[70,17],46],[[]],[73,69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,32],[69],[69],[[]],[[]],0,0,0,0,[[27,74],69],[[27,27,74],69],[[27,50,74],69],[[75,74],69],[76,33],[77,33],[78],[69,27],0,0,[69,32],[70,32],[[]],[[]],[[]],[[],34],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[91,91],13],[[92,92],13],[[],13],[[],13],0,0,0,0,0,[[91,17],46],[[92,17],46],[93,79],[94,79],[95,79],[96,79],[97,79],[98,79],[86,79],[80,79],[99,79],[100,79],[101,79],[81,79],[82,79],[102,79],[103,79],[104,79],[[]],[105,79],[84,79],[89,79],[90,79],[106,79],[107,79],[108,79],[87,79],[109,79],[85,79],[110,79],[111,79],[112,79],[88,79],[113,79],[114,79],[115,79],[116,79],[83,79],[117,79],[118,79],[119,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,91],[92,91],[61,91],[[]],[61,92],[[]],0,0,[[91,26]],[[92,26]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[31,[[30,[79]]]],[31,[[30,[86]]]],[31,[[30,[87]]]],[31,[[30,[89]]]],[31,[[30,[91]]]],[31,[[30,[92]]]],0,0,0,0,0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[91,[[33,[27]]]],[[],27],[92,[[33,[27]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,32]],[[104,32]],[[111,32]],[[105,32]],[[112,32]],[[80,32]],[[101,32]],[[102,32]],[[81,32]],[[82,32]],[[99,32]],[[107,32]],[[118,32]],[[83,32]],[[94,32]],[[84,32]],[[95,32]],[[85,32]],[[114,32]],[[108,32]],[[86,32]],[[98,32]],[[87,32]],[[119,32]],[[106,32]],[[88,32]],[[89,32]],[[113,32]],[[109,32]],[[93,32]],[[100,32]],[[103,32]],[[115,32]],[[117,32]],[[116,32]],[[90,32]],[[110,32]],[[96,32]],[[97,32]],[[91,32]],[[92,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[31,[[30,[79]]]],[31,[[30,[79]]]],[[]],[[]],[31,30],[120,120],[[]],[[120,120],13],[31,[[30,[84]]]],[31,[[30,[88]]]],[[]],0,[[]],0,[[79,121,9],[[30,[13]]]],[122,120],[[31,79,120],[[30,[79]]]],[[120,120],[[33,[12]]]],[31,[[30,[79]]]],[31,120],[[]],[31,[[30,[79]]]],[[],19],[[],19],[[],35],[31,[[30,[79]]]],[[]],[[]],[[]],[[]],0,[123,123],[124,124],[[]],[[]],[[],123],[[],124],[[],14],[[],14],[[]],[[]],[[]],[[]],[31,[[30,[123]]]],[31,[[30,[124]]]],[50,13],[50,13],0,[[],27],[[],27],0,0,[[]],[[]],0,0,[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[[125,[36]],32]],0,[31,30],0,0,[[],2],0,0,0,[[]],[[]],[[]],[[]],[126,126],[[]],[[],14],[[]],[[]],[[]],[[]],[50,13],[[]],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[127,128],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[129,129],[127,127],[128,128],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[130,143],[130,144],0,[[],130],[[],135],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,131],[133,131],[134,131],[[]],[[]],[[]],[2,133],[[]],[[]],[[]],[3,136],[137,136],[[]],[[]],[[]],[[]],[142,140],[141,140],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[130,145],0,0,0,[130,146],0,0,[130,139],0,[3,132],[145,33],[146,33],[147,33],[148,33],[143,33],[144,33],0,0,[31,[[30,[130]]]],[31,[[30,[131]]]],[31,[[30,[132]]]],[31,[[30,[133]]]],[31,[[30,[134]]]],[31,[[30,[135]]]],[31,[[30,[136]]]],[31,[[30,[137]]]],[31,[[30,[138]]]],[31,[[30,[139]]]],[31,[[30,[140]]]],[[31,13],[[30,[[150,[136,149]]]]]],0,0,0,0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[130],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[129,32]],[[127,32]],[[128,32]],[[130,32]],[[131,32]],[[132,32]],[[133,32]],[[134,32]],[[135,32]],[[136,32]],[[137,32]],[[138,32]],[[139,32]],[[140,32]],[[141,32]],[[142,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[130,147],[130,148],0,0,[[151,53],30],[151,[[30,[0]]]],0,0,0,0,0,[14,13],[2,13],0,0,[[]],[[]],[3,3],[[]],[[3,3],12],[[3,3],13],[[],13],[[3,17],46],[[]],[[3,26]],0,[[]],[[14,27],3],[31,[[30,[3]]]],0,[[3,3],[[33,[12]]]],0,[[3,27]],[[],27],[3,27],[[]],[[],34],[[3,32]],[[],19],[[],19],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,14],[9,14],[10,[[30,[152]]]],[9,[[30,[152]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[153,153],[154,154],[155,155],[4,4],[11,11],[7,7],[6,6],[8,8],[10,10],[9,9],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[10,17],46],[[9,17],46],[[]],[[]],[[]],[11,4],[[]],[6,4],[5,4],[8,4],[7,4],[9,4],[10,4],[[]],[[]],[[]],[[]],[[]],[156,10],[[]],[156,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[156,4],[[14,27],11],[[[125,[49]],27],7],[[49,27],6],[[157,27],8],[[14,27],10],[[14,27],9],[[13,27],5],[31,[[30,[4]]]],[11,[[30,[29]]]],[31,[[30,[11]]]],[31,[[30,[7]]]],[31,[[30,[6]]]],[31,[[30,[8]]]],[31,[[30,[10]]]],[31,[[30,[9]]]],[31,[[30,[5]]]],[[11,42],30],0,0,0,0,0,0,0,0,[[4,27]],[[11,27]],[[7,27]],[[6,27]],[[8,27]],[[10,27]],[[9,27]],[[5,27]],[4,27],[[],27],[11,27],[[],27],[7,27],[[],27],[6,27],[[],27],[8,27],[[],27],[[],27],[10,27],[9,27],[[],27],[[],27],[5,27],0,[4,14],[11,14],[7,14],[6,14],[8,14],[10,14],[9,14],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[4,32]],[[11,32]],[[7,32]],[[6,32]],[[8,32]],[[10,32]],[[9,32]],[[5,32]],[11,156],[7,156],[6,156],[8,156],[10,156],[9,156],[5,2],0,0,0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,[11,34],[7,[[43,[49]]]],[6,49],[8,157],[5,13],0,[[158,50],33],[14],[[[0,[[160,[[159,[61]]]],[15,[[125,[49]]]],16]]]],[[[0,[[15,[[125,[49]]]],16]],61],49],[14,157],[14],[14],[14],[14],[14],[14,33],[14,33],[14],[14],[14],0,0,0,[[]],[[]],[[]],[[]],0,0,[161,69],[[]],[[]],[[]],[[]],[[50,53],13],[[27,50],161],[[161,162],13],[161,13],0,[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[163,163],[164,164],[[]],[[]],0,[[]],[[]],[[]],[[]],[31,[[30,[163]]]],[163,[[30,[29]]]],[[163,42],30],[31,30],0,0,0,[[],27],[164,165],[[164,32,32]],[[]],[[]],[[163,32]],0,[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],0,0,0,0,0,0,0,0,0,[[]],[[]],[[166,74],69],[[]],0,[[]],[31,[[30,[41]]]],[[31,44],30],[[166,44],30],[44,42],0,[[],19],[[],19],[[],35],[166,[[30,[31]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[122,122],[167,167],[[]],[[]],[[]],[[]],[[]],[[]],[31,[[30,[122]]]],[31,[[30,[167]]]],0,0,[[],27],[[],27],[[]],[[]],[[122,32]],[[167,32]],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[31,[[30,[122]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[168,50],50],[[151,151]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[151,30],0,[[[171,[[0,[169,170]]]]],[[0,[169,170]]]],[151,30],[168,168],[172,172],[[]],[[]],0,[151,50],0,0,[[],172],[168],0,[151],[[151,74],69],[[168,74],69],[[151,17],46],[[151,17],46],[151,151],[[]],[[]],[[]],[[]],[151,[[173,[[171,[172]]]]]],[151],[[]],[[]],[[]],[[]],[151,13],[151,161],0,0,0,[[27,50,[173,[[171,[172]]]]],151],[31,30],[151,[[30,[29]]]],[28,30],[31,[[30,[174]]]],[32,30],[151,30],[[42,27,32],30],[14,30],[[151,162],[[30,[150]]]],[[151,162],13],[[151,162],13],[[151,162],13],0,0,0,[151,27],[50,[[33,[27]]]],[[151,175],30],[[]],[[]],[[],34],[51,151],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],0,0,0,[[]],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[41,41],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],177],[[[33,[185]],31],[[30,[179]]]],0,0,[[[186,[176]]],41],[[]],[[]],[[[186,[2]]],176],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[41,[[33,[2]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[177,13],[[41,16],13],[41,13],[177,13],0,0,0,0,0,[31,[[30,[41]]]],[31,[[30,[176]]]],[31,[[30,[178]]]],[31,[[30,[179]]]],[31,[[30,[183]]]],[[31,13],[[30,[41]]]],[[31,13],[[30,[176]]]],[31,[[30,[41]]]],[[31,41,13],30],0,0,0,[41,[[30,[2]]]],0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[184,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[41,32]],[[176,32]],[[177,32]],[[178,32]],[[179,32]],[[180,32]],[[181,32]],[[182,32]],[[183,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,[31,[[30,[79]]]],[[31,13],30],[[32,[33,[184]],41]],0,[[]],[[]],[[]],[[]],[[],27],[[[187,[[0,[75,169]]]],32]],[[],19],[[],19],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[150],[[[150,[170,170]]],[[150,[170,170]]]],[188,188],[[[189,[170,170]]],[[189,[170,170]]]],[[[190,[170]]],[[190,[170]]]],[59,59],[191,191],[[[192,[170,170]]],[[192,[170,170]]]],[[],[[194,[[67,[193]]]]]],[[[150,[170,170]],[150,[170,170]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[192,[170,170]]],[[192,[170,170]]]],[[],150],[[150,195]],[150,13],[[],59],[[],60],[[[150,[169]],72]],[[[150,[169]],72]],[150,33],[150,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,[[150,[169]]]],[72,150],[[150,61]],[[150,61]],0,0,0,0,0,0,0,0,0,[[[150,[169]],61]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[150],[150],[150],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[150,189],[192],[192],[150,13],[150,59],[150,60],[150,33],0,0,0,0,0,0,[150,33],[150,61],[188,61],[196,61],[189,61],[190,61],[59,61],[191,61],[60,61],[197,61],[[],150],[33,192],[188,33],[196,33],[189,33],[190,33],[59,33],[191,33],[60,33],[197,33],[188,33],[196,33],[189,33],[190,33],[59,33],[191,33],[60,33],[197,33],[150,188],[150,196],[31,[[30,[[150,[29,[0,[198,29]]]]]]]],[31,[[30,[[150,[[0,[198,29]]]]]]]],[31,[[30,[[150,[29,29]]]]]],[31,[[30,[[150,[29]]]]]],[150,[[33,[192]]]],[150,33],0,[192,33],[192,33],[[[150,[169]]]],[150],[150],[188],[196],[189],[190],[59],[60],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[150,[75,75]],32]],[[[192,[75,75]],32]],[150,13],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[192],[192],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[199,199],[200,200],[201,201],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],0,[31,[[30,[199]]]],[31,[[30,[199]]]],0,0,0,0,[[],27],[[],27],[[]],[[]],[[]],[[199,32]],[[200,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],0,0,0,0,[[],27],0,0,[[]],[[]],[[[203,[202]]],[[203,[202]]]],[[]],[[[203,[204]],17],46],[[]],[203,33],[[]],[[],203],0,[[]],[[],19],[[],19],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[205,205],[25,25],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[22,22],[216,216],[217,217],[218,218],[219,219],[220,220],[23,23],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],[238,238],[20,20],[24,24],[239,239],[240,240],[21,21],[241,241],[242,242],[243,243],[244,244],[245,245],[246,246],[247,247],[248,248],[249,249],[250,250],[251,251],[252,252],[253,253],[254,254],[255,255],[256,256],[257,257],[258,258],[259,259],[260,260],[261,261],[121,121],[262,262],[263,263],[264,264],[265,265],[266,266],[267,267],[268,268],[269,269],[270,270],[271,271],[272,272],[273,273],[274,274],[275,275],[276,276],[277,277],[278,278],[279,279],[185,185],[280,280],[281,281],[149,149],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[288,288],[289,289],[290,290],[291,291],[292,292],[293,293],[294,294],[295,295],[296,296],[297,297],[298,298],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],205],[[],25],[[],206],[[],207],[[],208],[[],209],[[],210],[[],211],[[],212],[[],213],[[],214],[[],215],[[],22],[[],216],[[],217],[[],218],[[],219],[[],220],[[],23],[[],221],[[],222],[[],223],[[],224],[[],225],[[],226],[[],227],[[],228],[[],229],[[],230],[[],231],[[],232],[[],233],[[],234],[[],235],[[],236],[[],237],[[],238],[[],20],[[],24],[[],239],[[],240],[[],21],[[],241],[[],242],[[],243],[[],244],[[],245],[[],246],[[],247],[[],248],[[],249],[[],250],[[],251],[[],252],[[],253],[[],254],[[],255],[[],256],[[],257],[[],258],[[],259],[[],260],[[],261],[[],121],[[],262],[[],263],[[],264],[[],265],[[],266],[[],267],[[],268],[[],269],[[],270],[[],271],[[],272],[[],273],[[],274],[[],275],[[],276],[[],277],[[],278],[[],279],[[],185],[[],280],[[],281],[[],149],[[],282],[[],283],[[],284],[[],285],[[],286],[[],287],[[],288],[[],289],[[],290],[[],291],[[],292],[[],293],[[],294],[[],295],[[],296],[[],297],[[],298],0,0,0,0,[25],[253],[256],[257],[259],[260],[261],[121],[265],[269],[272],[273],[276],[277],[280],[149],[283],[284],[286],[291],[293],[295],[25],[253],[256],[257],[259],[260],[261],[121],[265],[269],[272],[273],[276],[277],[280],[149],[283],[284],[286],[291],[293],[295],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,[[30,[25]]]],[31,[[30,[206]]]],[31,[[30,[207]]]],[31,[[30,[208]]]],[31,[[30,[209]]]],[31,[[30,[210]]]],[31,[[30,[211]]]],[31,[[30,[212]]]],[31,[[30,[213]]]],[31,[[30,[214]]]],[31,[[30,[215]]]],[31,[[30,[22]]]],[31,[[30,[216]]]],[31,[[30,[217]]]],[31,[[30,[218]]]],[31,[[30,[219]]]],[31,[[30,[220]]]],[31,[[30,[23]]]],[31,[[30,[221]]]],[31,[[30,[222]]]],[31,[[30,[223]]]],[31,[[30,[224]]]],[31,[[30,[225]]]],[31,[[30,[226]]]],[31,[[30,[227]]]],[31,[[30,[228]]]],[31,[[30,[229]]]],[31,[[30,[230]]]],[31,[[30,[231]]]],[31,[[30,[232]]]],[31,[[30,[233]]]],[31,[[30,[234]]]],[31,[[30,[235]]]],[31,[[30,[236]]]],[31,[[30,[237]]]],[31,[[30,[238]]]],[31,[[30,[20]]]],[31,[[30,[24]]]],[31,[[30,[239]]]],[31,[[30,[240]]]],[31,[[30,[21]]]],[31,[[30,[241]]]],[31,[[30,[242]]]],[31,[[30,[243]]]],[31,[[30,[244]]]],[31,[[30,[245]]]],[31,[[30,[246]]]],[31,[[30,[247]]]],[31,[[30,[248]]]],[31,[[30,[249]]]],[31,[[30,[250]]]],[31,[[30,[251]]]],[31,[[30,[252]]]],[31,[[30,[253]]]],[31,[[30,[254]]]],[31,[[30,[255]]]],[31,[[30,[256]]]],[31,[[30,[257]]]],[31,[[30,[258]]]],[31,[[30,[259]]]],[31,[[30,[260]]]],[31,[[30,[261]]]],[31,[[30,[121]]]],[31,[[30,[262]]]],[31,[[30,[263]]]],[31,[[30,[264]]]],[31,[[30,[265]]]],[31,[[30,[266]]]],[31,[[30,[267]]]],[31,[[30,[268]]]],[31,[[30,[269]]]],[31,[[30,[270]]]],[31,[[30,[271]]]],[31,[[30,[272]]]],[31,[[30,[273]]]],[31,[[30,[274]]]],[31,[[30,[275]]]],[31,[[30,[276]]]],[31,[[30,[277]]]],[31,[[30,[278]]]],[31,[[30,[279]]]],[31,[[30,[185]]]],[31,[[30,[280]]]],[31,[[30,[281]]]],[31,[[30,[149]]]],[31,[[30,[282]]]],[31,[[30,[283]]]],[31,[[30,[284]]]],[31,[[30,[285]]]],[31,[[30,[286]]]],[31,[[30,[287]]]],[31,[[30,[288]]]],[31,[[30,[289]]]],[31,[[30,[290]]]],[31,[[30,[291]]]],[31,[[30,[292]]]],[31,[[30,[293]]]],[31,[[30,[294]]]],[31,[[30,[295]]]],[50,13],0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[205,32,175]],[[296,32,175]],[[297,32,175]],[[298,32,175]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,32]],[[206,32]],[[207,32]],[[208,32]],[[209,32]],[[210,32]],[[211,32]],[[212,32]],[[213,32]],[[214,32]],[[215,32]],[[22,32]],[[216,32]],[[217,32]],[[218,32]],[[219,32]],[[220,32]],[[23,32]],[[221,32]],[[222,32]],[[223,32]],[[224,32]],[[225,32]],[[226,32]],[[227,32]],[[228,32]],[[229,32]],[[230,32]],[[231,32]],[[232,32]],[[233,32]],[[234,32]],[[235,32]],[[236,32]],[[237,32]],[[238,32]],[[20,32]],[[24,32]],[[239,32]],[[240,32]],[[21,32]],[[241,32]],[[242,32]],[[243,32]],[[244,32]],[[245,32]],[[246,32]],[[247,32]],[[248,32]],[[249,32]],[[250,32]],[[251,32]],[[252,32]],[[253,32]],[[254,32]],[[255,32]],[[256,32]],[[257,32]],[[258,32]],[[259,32]],[[260,32]],[[261,32]],[[121,32]],[[262,32]],[[263,32]],[[264,32]],[[265,32]],[[266,32]],[[267,32]],[[268,32]],[[269,32]],[[270,32]],[[271,32]],[[272,32]],[[273,32]],[[274,32]],[[275,32]],[[276,32]],[[277,32]],[[278,32]],[[279,32]],[[185,32]],[[280,32]],[[281,32]],[[149,32]],[[282,32]],[[283,32]],[[284,32]],[[285,32]],[[286,32]],[[287,32]],[[288,32]],[[289,32]],[[290,32]],[[291,32]],[[292,32]],[[293,32]],[[294,32]],[[295,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,[[]],[[]],[[]],[[]],0,[[],19],[[],19],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[299,299],[300,300],[301,301],[302,302],[303,303],[304,304],[305,305],[306,306],[307,307],[308,308],[309,309],[310,310],[311,311],[312,312],[313,313],[314,314],[315,315],[316,316],[317,317],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[306,299],[312,299],[300,299],[307,299],[309,299],[308,299],[311,299],[303,299],[310,299],[[]],[301,299],[304,299],[305,299],[313,299],[302,299],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[31,[[30,[299]]]],[31,[[30,[300]]]],[31,[[30,[301]]]],[31,[[30,[302]]]],[[31,13],[[30,[303]]]],[31,[[30,[303]]]],[31,[[30,[304]]]],[31,[[30,[305]]]],[31,[[30,[306]]]],[31,[[30,[307]]]],[[31,13],[[30,[307]]]],[31,[[30,[308]]]],[31,[[30,[309]]]],[31,[[30,[310]]]],[31,[[30,[311]]]],[31,[[30,[312]]]],[[31,13],[[30,[312]]]],[31,[[30,[313]]]],[31,[[30,[314]]]],[31,[[30,[315]]]],[31,[[30,[317]]]],[[31,13],[[30,[317]]]],[[27,31,13],[[30,[[150,[136,149]]]]]],0,0,0,0,0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[299,32]],[[300,32]],[[301,32]],[[302,32]],[[303,32]],[[304,32]],[[305,32]],[[306,32]],[[307,32]],[[308,32]],[[309,32]],[[310,32]],[[311,32]],[[312,32]],[[313,32]],[[314,32]],[[315,32]],[[316,32]],[[317,32]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,[31,[[30,[299]]]],[31,[[30,[303]]]],[31,[[30,[312]]]],[31,[[30,[317]]]],[[31,13,13],[[30,[299]]]],[[31,13],[[30,[315]]]],[[31,[43,[36]]],[[30,[316]]]],[[31,31],32]],"c":[],"p":[[4,"TokenMarker"],[3,"Ident"],[3,"Lifetime"],[4,"Lit"],[3,"LitBool"],[3,"LitByte"],[3,"LitByteStr"],[3,"LitChar"],[3,"LitFloat"],[3,"LitInt"],[3,"LitStr"],[4,"Ordering"],[15,"bool"],[15,"str"],[8,"AsRef"],[8,"Sized"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"SelfType"],[3,"Super"],[3,"Crate"],[3,"Extern"],[3,"SelfValue"],[3,"Underscore"],[8,"Hasher"],[3,"Span"],[3,"TokenStream"],[8,"Parse"],[6,"Result"],[6,"ParseStream"],[3,"TokenStream"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Path"],[8,"Parser"],[3,"Vec"],[8,"FnMut"],[3,"DisplayAttrStyle"],[6,"Result"],[3,"DisplayPath"],[3,"BigInt"],[15,"u8"],[3,"Cursor"],[3,"TokenBuffer"],[4,"Entry"],[4,"Delimiter"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[3,"Iter"],[3,"IterMut"],[15,"usize"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"NoDrop"],[8,"TrivialDrop"],[3,"Error"],[3,"ErrorMessage"],[3,"SpanRange"],[8,"IntoIterator"],[3,"LexError"],[8,"Display"],[8,"ToTokens"],[3,"IntoIter"],[3,"Iter"],[3,"Demand"],[4,"Expr"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprGroup"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprMacro"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[4,"Member"],[3,"Index"],[3,"ExprRepeat"],[3,"ExprForLoop"],[3,"ExprIf"],[3,"ExprWhile"],[3,"ExprYield"],[3,"ExprLoop"],[3,"ExprClosure"],[3,"ExprReturn"],[3,"ExprBlock"],[3,"ExprBreak"],[3,"ExprStruct"],[3,"ExprArray"],[3,"ExprAsync"],[3,"ExprMethodCall"],[3,"ExprConst"],[3,"ExprLet"],[3,"ExprReference"],[3,"ExprUnsafe"],[3,"ExprAssign"],[3,"ExprAwait"],[3,"ExprRange"],[3,"ExprInfer"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprTryBlock"],[3,"ExprContinue"],[3,"ExprMatch"],[4,"Precedence"],[3,"Dot"],[4,"BinOp"],[3,"builtin"],[3,"raw"],[15,"slice"],[3,"PeekFn"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"ImplGenerics"],[3,"Generics"],[4,"GenericParam"],[3,"LifetimeParam"],[3,"TypeParam"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"ConstParams"],[3,"ConstParamsMut"],[3,"Lifetimes"],[3,"LifetimesMut"],[3,"TypeParams"],[3,"TypeParamsMut"],[3,"Plus"],[3,"Punctuated"],[3,"ParseBuffer"],[8,"FromStr"],[3,"LitRepr"],[3,"LitIntRepr"],[3,"LitFloatRepr"],[3,"Literal"],[15,"char"],[3,"Punct"],[3,"RangeFrom"],[8,"Index"],[3,"Lookahead1"],[8,"Peek"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DelimSpan"],[3,"ParseNestedMeta"],[4,"UnOp"],[3,"StepCursor"],[8,"Default"],[8,"Clone"],[3,"Cell"],[4,"Unexpected"],[3,"Rc"],[3,"Nothing"],[8,"FnOnce"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"AssocType"],[3,"AssocConst"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[3,"PathSep"],[8,"Into"],[3,"TokensOrDefault"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[3,"PrivateIter"],[4,"Pair"],[8,"IterTrait"],[3,"Box"],[8,"Iterator"],[3,"PairsMut"],[3,"PrivateIterMut"],[8,"Token"],[4,"Visibility"],[3,"VisRestricted"],[4,"FieldMutability"],[8,"Copy"],[3,"ThreadBound"],[8,"Debug"],[3,"Group"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Comma"],[3,"Dollar"],[3,"DotDot"],[3,"DotDotDot"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"FatArrow"],[3,"Ge"],[3,"Gt"],[3,"LArrow"],[3,"Le"],[3,"Lt"],[3,"Minus"],[3,"MinusEq"],[3,"Ne"],[3,"Not"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Percent"],[3,"PercentEq"],[3,"PlusEq"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Slash"],[3,"SlashEq"],[3,"Star"],[3,"StarEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"BareVariadic"],[4,"ReturnType"],[4,"StrStyle"],[8,"FilterAttrs"],[8,"IdentExt"],[3,"IdentAny"],[8,"Speculative"],[8,"AnyDelimiter"],[8,"Spanned"],[3,"WithSpan"]]},\
"tempfile":{"doc":"Temporary files and directories.","t":"DRRDDDDDDLMLLLLLALLAMMAMMLLMLLLMLMMMMLMLMAFLMFLFLFLFLLLLLADLLLLFLLLLLLLLMFFLLLLLIDLLMLLLLMLLLLLLKDDDDLLLLLLLLLLLLLLLLLFLLMMMMLLLLLLLLLLLLLLLLALLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLAFFFFFFFNNEDLLLLLLLLLMLLLLMLLLLLLLLLFLLLLLLLLFF","n":["Builder","NUM_RAND_CHARS","NUM_RETRIES","NamedTempFile","PathPersistError","PersistError","SpooledTempFile","TempDir","TempPath","append","append","borrow","borrow_mut","clone","clone_into","default","dir","eq","equivalent","error","error","error","file","file","file","fmt","from","inner","into","make","make_in","max_size","new","path","path","path","path","prefix","prefix","rand_bytes","random_len","spooled","spooled_tempfile","suffix","suffix","tempdir","tempdir","tempdir_in","tempdir_in","tempfile","tempfile","tempfile_in","tempfile_in","to_owned","try_from","try_into","type_id","util","TempDir","as_ref","borrow","borrow_mut","close","create","drop","fmt","from","into","into_path","new","new_in","path","path","tempdir","tempdir_in","try_from","try_into","type_id","with_prefix","with_prefix_in","IoResultExt","PathError","borrow","borrow_mut","err","fmt","fmt","from","into","path","provide","source","to_string","try_from","try_into","type_id","with_err_path","NamedTempFile","PathPersistError","PersistError","TempPath","as_fd","as_file","as_file_mut","as_raw_fd","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","close","close","create_named","deref","drop","error","error","file","file","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parts","from_path","imp","into","into","into","into","into_file","into_parts","into_temp_path","keep","keep","new","new_in","path","path","path","path","persist","persist","persist_noclobber","persist_noclobber","provide","provide","read","read","read_exact","read_exact","read_to_end","read_to_end","read_to_string","read_to_string","read_vectored","read_vectored","reopen","seek","seek","source","source","tempfile","tempfile_in","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_prefix","with_prefix_in","write","write","write_all","write_all","write_fmt","write_fmt","write_vectored","write_vectored","unix","create","create_named","create_unix","create_unlinked","keep","persist","reopen","InMemory","OnDisk","SpooledData","SpooledTempFile","borrow","borrow","borrow_mut","borrow_mut","flush","fmt","fmt","from","from","inner","into","into","into_inner","is_rolled","max_size","new","read","read_exact","read_to_end","read_to_string","read_vectored","roll","seek","set_len","spooled_tempfile","try_from","try_from","try_into","try_into","type_id","type_id","write","write_vectored","create_helper","tmpname"],"q":[[0,"tempfile"],[58,"tempfile::dir"],[80,"tempfile::error"],[97,"tempfile::file"],[204,"tempfile::file::imp"],[205,"tempfile::file::imp::unix"],[212,"tempfile::spooled"],[249,"tempfile::util"]],"d":["Create a new temporary file or directory with custom …","","","A named temporary file.","Error returned when persisting a temporary file path fails.","Error returned when persisting a temporary file fails.","An object that behaves like a regular temporary file, but …","A directory in the filesystem that is automatically …","A path to a named temporary file without an open file …","Set the file to be opened in append mode.","","","","","","","","","","","The underlying IO error.","The underlying IO error.","","","The temporary file that couldn’t be persisted.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Attempts to create a temporary file (or file-like object) …","This is the same as <code>Builder::make</code>, except <code>dir</code> is used as …","","Create a new <code>Builder</code>.","","","","The temporary file path that couldn’t be persisted.","Set a custom filename prefix.","","Set the number of random bytes.","","","Create a new spooled temporary file.","Set a custom filename suffix.","","Create a new temporary directory.","Attempts to make a temporary directory inside of …","Create a new temporary directory in a specific directory.","Attempts to make a temporary directory inside of <code>dir</code>. The …","Create a new temporary file.","Create the named temporary file.","Create a new temporary file in the specified directory.","Create the named temporary file in the specified directory.","","","","","","A directory in the filesystem that is automatically …","","","","Closes and removes the temporary directory, returning a …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Persist the temporary directory to disk, returning the …","Attempts to make a temporary directory inside of …","Attempts to make a temporary directory inside of <code>dir</code>. The …","Accesses the <code>Path</code> to the temporary directory.","","Create a new temporary directory.","Create a new temporary directory in a specific directory.","","","","Attempts to make a temporary directory with the specified …","Attempts to make a temporary directory with the specified …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","A named temporary file.","Error returned when persisting a temporary file path fails.","Error returned when persisting a temporary file fails.","A path to a named temporary file without an open file …","","Get a reference to the underlying file.","Get a mutable reference to the underlying file.","","","","","","","","","","","","","Close and remove the temporary file.","Close and remove the temporary file.","","","","The underlying IO error.","The underlying IO error.","","The temporary file that couldn’t be persisted.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>NamedTempFile</code> from its constituent parts.","Create a new TempPath from an existing path. This can be …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the temporary file into a <code>std::fs::File</code>.","Converts the named temporary file into its constituent …","Closes the file, leaving only the temporary file path.","Keep the temporary file from being deleted. This function …","Keep the temporary file from being deleted. This function …","Create a new named temporary file.","Create a new named temporary file in the specified …","Get the temporary file’s path.","","","The temporary file path that couldn’t be persisted.","Persist the temporary file at the target path.","Persist the temporary file at the target path.","Persist the temporary file at the target path if and only …","Persist the temporary file at the target path if and only …","","","","","","","","","","","","","Securely reopen the temporary file.","","","","","Create a new temporary file.","Create a new temporary file in the specified directory.","","","","","","","","","","","","","","","Create a new named temporary file with the specified …","Create a new named temporary file with the specified …","","","","","","","","","","","","","","","","","","","A wrapper for the two states of a <code>SpooledTempFile</code>.","An object that behaves like a regular temporary file, but …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes and returns the inner <code>SpooledData</code> type.","Returns true if the file has been rolled over to disk.","","","","","","","","Rolls over to a file on disk, regardless of current size. …","","","Create a new spooled temporary file.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,32,33,0,6,32,1,1,13,1,1,1,13,1,14,29,6,33,1,1,1,1,0,0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,14,14,14,14,0,14,14,14,14,14,14,14,14,14,0,0,14,14,14,14,14,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,48,0,0,0,0,6,6,6,6,29,29,6,29,6,32,33,29,6,32,33,29,6,0,29,29,32,33,6,32,6,6,29,6,32,32,33,33,29,29,6,6,32,33,6,29,0,29,6,32,33,6,6,6,29,6,6,6,6,29,6,33,29,6,29,6,32,33,6,6,6,6,6,6,6,6,6,6,6,6,6,32,33,0,0,32,33,29,6,32,33,29,6,32,33,29,6,32,33,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,45,45,0,0,45,13,45,13,13,45,13,45,13,13,45,13,13,13,13,13,13,13,13,13,13,13,13,13,0,45,13,45,13,45,13,13,13,0,0],"f":[0,0,0,0,0,0,0,0,0,[[1,2],1],0,[[]],[[]],[1,1],[[]],[[],1],0,[[1,1],2],[[],2],0,0,0,0,0,0,[[1,3],4],[[]],0,[[]],[[1,5],[[7,[6]]]],[[1,[9,[8]],5],[[7,[6]]]],0,[[],1],0,0,0,0,[[1,[0,[[9,[10]],11]]],1],0,[[1,12],1],0,0,[12,13],[[1,[0,[[9,[10]],11]]],1],0,[[],[[7,[14]]]],[1,[[7,[14]]]],[[[9,[8]]],[[7,[14]]]],[[1,[9,[8]]],[[7,[14]]]],[[],[[7,[15]]]],[1,[[7,[6]]]],[[[9,[8]]],[[7,[15]]]],[[1,[9,[8]]],[[7,[6]]]],[[]],[[],16],[[],16],[[],17],0,0,[14,8],[[]],[[]],[14,7],[18,[[7,[14]]]],[14],[[14,3],4],[[]],[[]],[14,18],[[],[[7,[14]]]],[[[9,[8]]],[[7,[14]]]],[14,8],0,[[],[[7,[14]]]],[[[9,[8]]],[[7,[14]]]],[[],16],[[],16],[[],17],[[[9,[10]]],[[7,[14]]]],[[[9,[10]],[9,[8]]],[[7,[14]]]],0,0,[[]],[[]],0,[[19,3],4],[[19,3],4],[[]],[[]],0,[20],[19,[[22,[21]]]],[[],23],[[],16],[[],16],[[],17],[24],0,0,0,0,[[[6,[25]]],26],[6],[6],[[[6,[27]]],28],[29,8],[29,10],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,7],[6,7],[[18,30],[[7,[6]]]],[29,8],[29],0,0,0,0,[[[6,[15]]],7],[[[6,[31]]],7],[[29,3],4],[[6,3],4],[[32,3],4],[[32,3],4],[[33,3],4],[[33,3],4],[33,29],[[]],[[]],[32,6],[[]],[[]],[29,6],[[[34,[18]]],29],0,[[]],[[]],[[]],[[]],[6],[6],[6,29],[29,[[16,[18,33]]]],[6,[[16,[32]]]],[[],[[7,[6]]]],[[[9,[8]]],[[7,[6]]]],[6,8],0,0,0,[[29,[9,[8]]],[[16,[33]]]],[[6,[9,[8]]],[[16,[32]]]],[[29,[9,[8]]],[[16,[33]]]],[[6,[9,[8]]],[[16,[32]]]],[20],[20],[[[6,[35]],[37,[36]]],[[7,[12]]]],[[[6,[15]],[37,[36]]],[[7,[12]]]],[[[6,[35]],[37,[36]]],7],[[[6,[15]],[37,[36]]],7],[[[6,[35]],[38,[36]]],[[7,[12]]]],[[[6,[15]],[38,[36]]],[[7,[12]]]],[[[6,[35]],23],[[7,[12]]]],[[[6,[15]],23],[[7,[12]]]],[[[6,[15]],[37,[39]]],[[7,[12]]]],[[[6,[35]],[37,[39]]],[[7,[12]]]],[[[6,[15]]],[[7,[15]]]],[[[6,[40]],41],[[7,[42]]]],[[[6,[15]],41],[[7,[42]]]],[32,[[22,[21]]]],[33,[[22,[21]]]],[[],[[7,[15]]]],[[[9,[8]]],[[7,[15]]]],[[],23],[[],23],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[[9,[10]]],[[7,[6]]]],[[[9,[10]],[9,[8]]],[[7,[6]]]],[[[6,[31]],[37,[36]]],[[7,[12]]]],[[[6,[15]],[37,[36]]],[[7,[12]]]],[[[6,[31]],[37,[36]]],7],[[[6,[15]],[37,[36]]],7],[[[6,[31]],43],7],[[[6,[15]],43],7],[[[6,[31]],[37,[44]]],[[7,[12]]]],[[[6,[15]],[37,[44]]],[[7,[12]]]],0,[8,[[7,[15]]]],[[8,30],[[7,[15]]]],[8,[[7,[15]]]],[8,[[7,[15]]]],[8,7],[[8,8,2],7],[[15,8],[[7,[15]]]],0,0,0,0,[[]],[[]],[[]],[[]],[13,7],[[45,3],4],[[13,3],4],[[]],[[]],0,[[]],[[]],[13,45],[13,2],0,[12,13],[[13,[37,[36]]],[[7,[12]]]],[[13,[37,[36]]],7],[[13,[38,[36]]],[[7,[12]]]],[[13,23],[[7,[12]]]],[[13,[37,[39]]],[[7,[12]]]],[13,7],[[13,41],[[7,[42]]]],[[13,42],[[16,[46]]]],[12,13],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[13,[37,[36]]],[[7,[12]]]],[[13,[37,[44]]],[[7,[12]]]],[[8,10,10,12,5],7],[[10,10,12],47]],"c":[],"p":[[3,"Builder"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"FnMut"],[3,"NamedTempFile"],[6,"Result"],[3,"Path"],[8,"AsRef"],[3,"OsStr"],[8,"Sized"],[15,"usize"],[3,"SpooledTempFile"],[3,"TempDir"],[3,"File"],[4,"Result"],[3,"TypeId"],[3,"PathBuf"],[3,"PathError"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[8,"FnOnce"],[8,"AsFd"],[3,"BorrowedFd"],[8,"AsRawFd"],[6,"RawFd"],[3,"TempPath"],[3,"OpenOptions"],[8,"Write"],[3,"PersistError"],[3,"PathPersistError"],[8,"Into"],[8,"Read"],[15,"u8"],[15,"slice"],[3,"Vec"],[3,"IoSliceMut"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"Arguments"],[3,"IoSlice"],[4,"SpooledData"],[3,"Error"],[3,"OsString"],[8,"IoResultExt"]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"YAA","n":["Error","aserror","display"],"q":[[0,"thiserror"]],"d":["","",""],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"thiserror_impl":{"doc":"","t":"YAAAAAAADNDEDNDMMMMLLLLLLLLLLLLMLLMMLLLLLLLLLLLLMMLLLMMMLLLLLLMLMMMMLLLLLLLLLLLLMLLLLLLLLLLMDNNDNNNNNEDNNMMLLLLLLLLLLLLLLLMLLLLMLLLLMFMMLLLLMMFFLMLLLMLLLLLMLLLLLLLLLLLLFFFFFFFFFFFFFDDLLLLLMFLLLLLLMLLMLLLLLLFFFFFFFFF","n":["Error","ast","attr","expand","fmt","generics","prop","valid","Enum","Enum","Field","Input","Struct","Struct","Variant","attrs","attrs","attrs","attrs","backtrace_field","backtrace_field","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","contains_generic","distinct_backtrace_field","distinct_backtrace_field","fields","fields","from","from","from","from","from","from_field","from_field","from_syn","from_syn","from_syn","from_syn","from_syn","generics","generics","has_backtrace","has_display","has_source","ident","ident","ident","into","into","into","into","into","is_backtrace","member","multiple_from_syn","original","original","original","original","source_field","source_field","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","validate","validate","validate","validate","validate","variants","Attrs","Binary","Debug","Display","Display","LowerExp","LowerHex","Octal","Pointer","Trait","Transparent","UpperExp","UpperHex","args","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","display","eq","equivalent","expand_shorthand","fmt","fmt","from","from","from","from","from","get","has_bonus_display","implied_bounds","into","into","into","into","original","original","parse_error_attribute","parse_token_expr","partial_cmp","source","span","span","span","span","to_owned","to_owned","to_owned","to_tokens","to_tokens","transparent","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","derive","fields_pat","from_initializer","impl_enum","impl_struct","spanned_error_trait","type_is_option","type_parameter_of_option","unoptional_type","use_as_display","explicit_named_args","take_ident","take_int","InferredBounds","ParamsInScope","augment_where_clause","borrow","borrow","borrow_mut","borrow_mut","bounds","crawl","from","from","insert","intersects","into","into","names","new","new","order","try_from","try_from","try_into","try_into","type_id","type_id","backtrace_field","distinct_backtrace_field","from_field","source_field","type_is_backtrace","check_field_attrs","check_non_field_attrs","contains_non_static_lifetime","same_member"],"q":[[0,"thiserror_impl"],[8,"thiserror_impl::ast"],[92,"thiserror_impl::attr"],[168,"thiserror_impl::expand"],[178,"thiserror_impl::fmt"],[181,"thiserror_impl::generics"],[206,"thiserror_impl::prop"],[211,"thiserror_impl::valid"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,1,10,4,2,1,4,6,1,10,4,2,6,1,10,4,2,2,1,4,1,4,6,1,10,4,2,1,4,6,1,10,4,2,1,10,10,10,10,1,10,4,6,1,10,4,2,2,2,2,1,10,4,2,1,4,6,1,10,4,2,6,1,10,4,2,2,6,1,10,4,2,6,1,10,4,2,10,0,23,23,0,23,23,23,23,23,0,0,23,23,21,29,29,21,22,23,29,21,22,23,21,22,23,21,22,23,23,29,23,23,21,23,21,29,21,22,23,29,0,21,21,29,21,22,23,21,22,0,0,23,29,29,21,23,22,21,22,23,21,23,29,29,21,22,23,29,21,22,23,29,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,12,37,12,37,37,0,12,37,37,12,12,37,12,12,37,37,12,37,12,37,12,37,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,[[3,[2]]]],[4,[[3,[2]]]],0,0,[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[4,[[3,[2]]]],[5,[[7,[6]]]],[[5,8],[[7,[1]]]],[[5,9],[[7,[10]]]],[[11,12,13],[[7,[4]]]],[[14,15,12,13],[[7,[2]]]],0,0,[10,16],[10,16],[10,16],0,0,0,[[]],[[]],[[]],[[]],[[]],[2,16],0,[[17,12,13],[[7,[[18,[2]]]]]],0,0,0,0,[1,[[3,[2]]]],[4,[[3,[2]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,[[],20],[[],20],[[],20],[[],20],[[],20],[6,7],[1,7],[10,7],[4,7],[2,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[22,22],[23,23],[[]],[[]],[[]],[[23,23],24],0,[[23,23],16],[[],16],[[21,[25,[2]]]],[[23,26],27],0,[[]],[[]],[[]],[[]],0,[[[25,[28]]],[[7,[29]]]],0,0,[[]],[[]],[[]],[[]],0,0,[[29,28],7],[[30,16],[[7,[31]]]],[[23,23],[[3,[24]]]],0,[29,[[3,[13]]]],[[],13],[[],13],0,[[]],[[]],[[]],[[21,31]],[[23,31]],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[5,[[7,[31]]]],[[[25,[2]]],31],[[2,[3,[2]]],31],[10,31],[1,31],[5,31],[32,16],[32,[[3,[32]]]],[32,31],[16,[[3,[31]]]],[30,[[7,[[34,[33]]]]]],[35,33],[35,36],0,0,[[37,38],39],[[]],[[]],[[]],[[]],0,[[12,32,16]],[[]],[[]],[[37,40,40]],[[12,32],16],[[]],[[]],0,[38,12],[[],37],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[[25,[2]]],[[3,[2]]]],[[2,[3,[2]]],[[3,[2]]]],[[[25,[2]]],[[3,[2]]]],[[[25,[2]]],[[3,[2]]]],[32,16],[[[25,[2]]],7],[29,7],[32,16],[[2,2],16]],"c":[],"p":[[3,"Struct"],[3,"Field"],[4,"Option"],[3,"Variant"],[3,"DeriveInput"],[4,"Input"],[6,"Result"],[3,"DataStruct"],[3,"DataEnum"],[3,"Enum"],[3,"Variant"],[3,"ParamsInScope"],[3,"Span"],[15,"usize"],[3,"Field"],[15,"bool"],[4,"Fields"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"Display"],[3,"Transparent"],[4,"Trait"],[4,"Ordering"],[15,"slice"],[3,"Formatter"],[6,"Result"],[3,"Attribute"],[3,"Attrs"],[6,"ParseStream"],[3,"TokenStream"],[4,"Type"],[3,"Ident"],[3,"BTreeSet"],[15,"str"],[3,"String"],[3,"InferredBounds"],[3,"Generics"],[3,"WhereClause"],[8,"ToTokens"]]},\
"ucd_trie":{"doc":"The ucd-trie crate provides a compressed trie set …","t":"RENNGGDDLLLLLLLLLLLALMMMMMMLLLRENNGDLLLLLLLLLFFLLLLLLLLLLLLLLLLMMMMMMLLLLLL","n":["CHUNK_SIZE","Error","GaveUp","InvalidCodepoint","Result","TrieSet","TrieSetOwned","TrieSetSlice","borrow","borrow_mut","chunk_contains","clone","clone_into","contains","contains_char","contains_u32","fmt","from","into","owned","to_owned","tree1_level1","tree2_level1","tree2_level2","tree3_level1","tree3_level2","tree3_level3","try_from","try_into","type_id","CHUNKS","Error","GaveUp","InvalidCodepoint","Result","TrieSetOwned","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compress_postfix_leaves","compress_postfix_mid","contains_char","contains_u32","fmt","fmt","fmt","from","from","from_codepoints","from_scalars","into","into","new","provide","to_owned","to_owned","to_string","tree1_level1","tree2_level1","tree2_level2","tree3_level1","tree3_level2","tree3_level3","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"ucd_trie"],[30,"ucd_trie::owned"]],"d":["","An error that can occur during construction of a trie.","This error is returned when a set of Unicode codepoints …","This error is returned when an invalid codepoint is given …","A type alias that maps to …","A type alias for <code>TrieSetSlice&lt;&#39;static&gt;</code>.","An owned trie set.","A borrowed trie set.","","","","","","","Returns true if and only if the given Unicode scalar value …","Returns true if and only if the given codepoint is in this …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","An error that can occur during construction of a trie.","This error is returned when a set of Unicode codepoints …","This error is returned when an invalid codepoint is given …","A type alias that maps to …","An owned trie set.","Return this set as a slice.","","","","","","","","","","","Returns true if and only if the given Unicode scalar value …","Returns true if and only if the given codepoint is in this …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new trie set from a set of Unicode scalar values.","Create a new trie set from a set of Unicode scalar values.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,12,12,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,11,11,11,11,11,11,1,1,1,0,0,12,12,0,0,11,12,11,12,11,12,11,12,11,0,0,11,11,12,12,11,12,11,11,11,12,11,11,12,12,11,12,11,11,11,11,11,11,12,11,12,11,12,11],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[1,2,3],4],[1,1],[[]],[[1,2],4],[[1,5],4],[[1,6],4],[[1,7],8],[[]],[[]],0,[[]],0,0,0,0,0,0,[[],9],[[],9],[[],10],0,0,0,0,0,0,[11,1],[[]],[[]],[[]],[[]],[12,12],[11,11],[[]],[[]],[[[13,[3]]],14],[[[13,[15]],2],14],[[11,5],4],[[11,6],4],[[12,7],8],[[12,7],8],[[11,7],8],[[]],[[]],[16,[[14,[11]]]],[16,[[14,[11]]]],[[]],[[]],[[[13,[4]]],[[14,[11]]]],[17],[[]],[[]],[[],18],0,0,0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"c":[],"p":[[3,"TrieSetSlice"],[15,"usize"],[15,"u64"],[15,"bool"],[15,"char"],[15,"u32"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"TrieSetOwned"],[4,"Error"],[15,"slice"],[6,"Result"],[15,"u8"],[8,"IntoIterator"],[3,"Demand"],[3,"String"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FFAHHDDRRHRHHLLLLLLLLLLLLLL","n":["is_xid_continue","is_xid_start","tables","ASCII_CONTINUE","ASCII_START","Align64","Align8","CHUNK","F","LEAF","T","TRIE_CONTINUE","TRIE_START","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"unicode_ident"],[3,"unicode_ident::tables"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,5,6,5,6,5,6,5,6,5,6,5,6],"f":[[1,2],[1,2],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4]],"c":[],"p":[[15,"char"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"Align8"],[3,"Align64"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
