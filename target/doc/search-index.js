var searchIndex = JSON.parse('{\
"clausy":{"doc":"","t":"AAAADLLLMLLLLLLLLMNEDDGNNNGLLLLLMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNDENRNLLLLNLLLNLLNLLLLLLNNNNNLFFLLLLLLLLNNAAAAAA","n":["cnf","formula","parser","tests","CNF","assert_valid","borrow","borrow_mut","clauses","fmt","from","from","into","to_string","try_from","try_into","type_id","vars","And","Expr","ExprInFormula","Formula","Id","Not","Or","Var","VarId","add_expr","add_var","assert_shared","assert_shared_expr","assert_valid","aux_root_id","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","child_exprs_refl","dedup","eq","equivalent","expr","exprs","exprs_inv","fmt","fmt","fmt","fmt","format_expr","from","from","from","from","get_child_exprs","get_clauses","get_expr","get_root_expr","get_var","get_vars","hash","hash_expr","into","into","into","is_non_aux_and","negate_exprs","new","print_expr","print_sub_exprs","reverse_postorder","reverse_preorder","set_child_exprs","set_root_expr","splice_or","to_cnf_dist","to_cnf_expr_dist","to_nnf","to_nnf_expr","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","var","vars","vars_inv","EOI","ModelParser","Rule","WHITESPACE","_PEST_GRAMMAR_ModelParser","and","borrow","borrow","borrow_mut","borrow_mut","char","clone","clone_into","cmp","comment","eq","equivalent","expr","fmt","from","from","hash","into","into","line","name","not","or","paren_expr","parse","parse_children","parse_pair","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsupported","var","cnf","formula","parser","cnf_dist","nnf","valid"],"q":[[0,"clausy"],[4,"clausy::cnf"],[18,"clausy::formula"],[94,"clausy::parser"],[136,"clausy::tests"],[139,"clausy::tests::formula"]],"d":["Clause representation of a feature-model formula.","Data structures and algorithms for feature-model formulas.","Parser for feature-model formulas.","Unit tests.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A conjunction of an expression.","An expression in a formula.","An expression that is explicitly paired with the formula â€¦","A feature-model formula.","Identifier type for expressions.","A negation of an expression.","A disjunction of an expression.","A propositional variable.","Identifier type for variables.","","","","","Panics if the formula is invalid.","Specifies the auxiliary root expression of this formula.","","","","","","","","","","","","Stores all expressions in this formula.","Maps expressions to their identifiers.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new, empty formula.","","","","","","","","","","","","","","","","","","","","","","","","Stores all variables in this formula.","Maps variables to their identifiers.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,8,0,0,0,0,8,8,8,0,4,4,4,4,4,4,14,8,4,14,8,4,4,4,8,8,4,4,4,14,8,4,4,4,14,8,4,4,4,4,4,4,4,4,8,4,14,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,14,4,14,8,4,14,8,4,14,8,4,4,4,4,19,0,0,19,0,19,19,24,19,24,19,19,19,19,19,19,19,19,19,19,24,19,19,24,19,19,19,19,19,24,0,0,19,19,19,24,19,24,19,24,19,19,0,0,0,0,0,0],"f":[0,0,0,0,0,[1],[[]],[[]],0,[[1,2],3],[4,1],[[]],[[]],[[],5],[[],6],[[],6],[[],7],0,0,0,0,0,0,0,0,0,0,[[4,8],9],[[4,10],9],[4],[[4,9]],[4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[4,9],[[11,[9]]]],[[[12,[9]]],[[12,[9]]]],[[8,8],13],[[],13],[[4,8],9],0,0,[[14,2],3],[[8,2],3],[[4,2],3],[[4,2],3],[[4,9,2],3],[[]],[[]],[10,4],[[]],[[4,8],[[11,[9]]]],[4,[[12,[[12,[15]]]]]],[[4,8],[[16,[9]]]],[4,9],[[4,10],[[16,[9]]]],[4,[[12,[10]]]],[[8,17]],[8,18],[[]],[[]],[[]],[[4,9],13],[[4,[12,[9]]],[[12,[9]]]],[[],4],[[4,9]],[4],[4],[4],[[4,9,[12,[9]]]],[[4,9]],[[4,9,[12,[9]]]],[4,4],[[4,9]],[4,4],[[4,9]],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[4,10],9],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[19,19],[[]],[[19,19],20],0,[[19,19],13],[[],13],0,[[19,2],3],[[]],[[]],[[19,17]],[[]],[[]],0,0,0,0,0,[[19,10],[[6,[[21,[19]],[22,[19]]]]]],[[[23,[19]],4],[[12,[9]]]],[[[23,[19]],4],9],[[19,19],[[16,[20]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,0,0,0,0,0,0,0],"c":[],"p":[[3,"CNF"],[3,"Formatter"],[6,"Result"],[3,"Formula"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"Expr"],[15,"usize"],[15,"str"],[15,"slice"],[3,"Vec"],[15,"bool"],[3,"ExprInFormula"],[15,"i32"],[4,"Option"],[8,"Hasher"],[15,"u64"],[4,"Rule"],[4,"Ordering"],[3,"Pairs"],[3,"Error"],[3,"Pair"],[3,"ModelParser"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
