var searchIndex = JSON.parse('{\
"clausy":{"doc":"","t":"AAAADLLLLMLLLLLLLLLLLLLMRNNEDDGNNNRENGLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNDENRNLLLLNLLLNLLNLLLLLLNNNNNLFFLLLLLLLLNNAAAAAA","n":["cnf","formula","parser","tests","CNF","assert_count","assert_valid","borrow","borrow_mut","clauses","count","count_d4","count_featureide","dimacs_featureide","fmt","from","from","get_clauses","into","to_string","try_from","try_into","type_id","vars","AUX_VAR_PREFIX","And","Aux","Expr","ExprInFormula","Formula","Id","Named","Not","Or","PRINT_ID","Var","Var","VarId","add_expr","add_var","add_var_aux","add_var_named","assert_shared","assert_valid","aux_root_id","aux_var_id","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dedup","def_and","def_or","eq","eq","equivalent","equivalent","expr","exprs","exprs_inv","fmt","fmt","fmt","fmt","fmt","fmt","format_expr","from","from","from","from","from","get_child_exprs","get_expr","get_root_expr","get_var_named","hash","hash","hash_expr","into","into","into","into","is_non_aux_and","make_shared","negate_exprs","new","postorder_rev","preorder_rev","print_sub_exprs","reset_aux_root_expr","set_child_exprs","set_root_expr","splice_or","to_cnf_dist","to_cnf_tseitin","to_nnf","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","var","vars","vars_inv","EOI","ModelParser","Rule","WHITESPACE","_PEST_GRAMMAR_ModelParser","and","borrow","borrow","borrow_mut","borrow_mut","char","clone","clone_into","cmp","comment","eq","equivalent","expr","fmt","from","from","hash","into","into","line","name","not","or","paren_expr","parse","parse_children","parse_pair","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsupported","var","cnf","formula","parser","cnf_dist","nnf","valid"],"q":[[0,"clausy"],[4,"clausy::cnf"],[24,"clausy::formula"],[122,"clausy::parser"],[164,"clausy::tests"],[167,"clausy::tests::formula"]],"d":["Clause representation of a feature-model formula.","Data structures and algorithms for feature-model formulas.","Parser for feature-model formulas.","Unit tests.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the sub-expressions of a formula as clauses.","Calls <code>U::from(self)</code>.","","","","","","Prefix for auxiliary variables.","A conjunction of an expression.","An auxiliary variable.","An expression in a formula.","An expression that is explicitly paired with the formula …","A feature-model formula.","Identifier type for expressions.","A named variable.","A negation of an expression.","A disjunction of an expression.","Whether to print identifiers of expressions.","A variable in a formula.","A propositional variable.","Identifier type for variables.","Adds a new expression to this formula, returning its new …","Adds a new variable to this formula, returning the …","Adds a new auxiliary variable to this formula, returning …","Adds a new named variable to this formula, returning the …","Panics if structural sharing is violated in this formula.","Panics if this formula is invalid.","Specifies the auxiliary root expression of this formula.","","","","","","","","","","","","","Defines an And expression with a new auxiliary variable.","Defines an Or expression with a new auxiliary variable.","","","","","Adds or looks up an expression of this formula, returning …","Stores all expressions in this formula.","Maps expressions to their identifiers.","","","","","","","Writes an expression of this formula to a formatter.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the identifiers of the children of an expression.","Looks ups the identifier for an expression of this formula.","Returns the root expression of this formula.","Looks ups the identifier for the Var expression of a named …","","","Computes the hash of an expression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Manually enforces structural sharing in this formula.","Returns expressions that negate the given expressions.","Creates a new, empty formula.","Visits all sub-expressions of this formula using a reverse …","Visits all sub-expressions of this formula using a reverse …","Prints all sub-expression of this formula.","Resets the auxiliary root expression, if necessary.","Sets the children of an expression in this formula.","Sets the root expression of this formula.","","Transforms this formula into conjunctive normal form by …","","Transforms this formula into negation normal form by …","","","","","","","","","","","","","","","","","Adds or looks up a named variable of this formula, …","Stores all variables in this formula.","Maps variables to their identifiers.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,11,13,0,0,0,0,13,11,11,0,0,11,0,6,6,6,6,6,6,6,6,16,11,13,6,16,11,13,6,13,13,6,6,6,11,13,11,13,6,6,6,16,11,13,13,6,6,6,16,11,13,6,6,6,6,6,6,11,13,6,16,11,13,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,13,16,13,6,16,11,13,6,16,11,13,6,16,11,13,6,6,6,6,21,0,0,21,0,21,21,26,21,26,21,21,21,21,21,21,21,21,21,21,26,21,21,26,21,21,21,21,21,26,0,0,21,21,21,26,21,26,21,26,21,21,0,0,0,0,0,0],"f":[0,0,0,0,0,[[1,2]],[1],[[]],[[]],0,[1,3],[2,3],[2,3],[2,3],[[1,4],5],[[]],[6,1],[6,[[8,[[8,[7]]]]]],[[]],[[],3],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[6,11],12],[[6,13],12],[6,12],[[6,2],12],[6],[6,6],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[[]],[[[8,[12]]],[[8,[12]]]],[[6,[14,[12]]]],[[6,[14,[12]]]],[[11,11],15],[[13,13],15],[[],15],[[],15],[[6,11],12],0,0,[[16,4],5],[[11,4],5],[[13,4],5],[[13,4],5],[[6,4],5],[[6,4],5],[[6,12,4],5],[[]],[[]],[[]],[2,6],[[]],[11,[[14,[12]]]],[[6,11],[[17,[12]]]],[6,12],[[6,2],[[17,[12]]]],[[11,18]],[[13,18]],[11,19],[[]],[[]],[[]],[[]],[[6,12],15],[6],[[6,[8,[12]]],[[8,[12]]]],[[],6],[[6,20]],[[6,20]],[6],[6],[[6,12,[8,[12]]]],[[6,12]],[[6,12,[8,[12]]]],[6,6],[6,6],[6,6],[[]],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[6,2],12],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[21,21],[[]],[[21,21],22],0,[[21,21],15],[[],15],0,[[21,4],5],[[]],[[]],[[21,18]],[[]],[[]],0,0,0,0,0,[[21,2],[[9,[[23,[21]],[24,[21]]]]]],[[[25,[21]],6],[[8,[12]]]],[[[25,[21]],6],12],[[21,21],[[17,[22]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,0,0,0],"c":[],"p":[[3,"CNF"],[15,"str"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"Formula"],[15,"i32"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[4,"Expr"],[15,"usize"],[4,"Var"],[15,"slice"],[15,"bool"],[3,"ExprInFormula"],[4,"Option"],[8,"Hasher"],[15,"u64"],[8,"FnMut"],[4,"Rule"],[4,"Ordering"],[3,"Pairs"],[3,"Error"],[3,"Pair"],[3,"ModelParser"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
